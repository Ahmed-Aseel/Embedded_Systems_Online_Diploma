
Unit15_MyRTOS_Project.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d10  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08000e40  08000e40  00010e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000e64  08000e64  00010e6c  2**0
                  CONTENTS
  4 .ARM          00000000  08000e64  08000e64  00010e6c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e64  08000e6c  00010e6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e64  08000e64  00010e64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000e68  08000e68  00010e68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010e6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f0  20000000  08000e6c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f0  08000e6c  000201f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010e6c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003cde  00000000  00000000  00010e95  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000a7f  00000000  00000000  00014b73  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000bf0  00000000  00000000  000155f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000220  00000000  00000000  000161e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001c8  00000000  00000000  00016408  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00003bcd  00000000  00000000  000165d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000024a5  00000000  00000000  0001a19d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000fcea  00000000  00000000  0001c642  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0002c32c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000698  00000000  00000000  0002c3a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000e28 	.word	0x08000e28

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000e28 	.word	0x08000e28

08000170 <strcmp>:
 8000170:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000174:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000178:	2a01      	cmp	r2, #1
 800017a:	bf28      	it	cs
 800017c:	429a      	cmpcs	r2, r3
 800017e:	d0f7      	beq.n	8000170 <strcmp>
 8000180:	1ad0      	subs	r0, r2, r3
 8000182:	4770      	bx	lr

08000184 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000184:	b480      	push	{r7}
 8000186:	b083      	sub	sp, #12
 8000188:	af00      	add	r7, sp, #0
 800018a:	4603      	mov	r3, r0
 800018c:	6039      	str	r1, [r7, #0]
 800018e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000194:	2b00      	cmp	r3, #0
 8000196:	db0a      	blt.n	80001ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000198:	683b      	ldr	r3, [r7, #0]
 800019a:	b2da      	uxtb	r2, r3
 800019c:	490c      	ldr	r1, [pc, #48]	; (80001d0 <__NVIC_SetPriority+0x4c>)
 800019e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001a2:	0152      	lsls	r2, r2, #5
 80001a4:	b2d2      	uxtb	r2, r2
 80001a6:	440b      	add	r3, r1
 80001a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001ac:	e00a      	b.n	80001c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001ae:	683b      	ldr	r3, [r7, #0]
 80001b0:	b2da      	uxtb	r2, r3
 80001b2:	4908      	ldr	r1, [pc, #32]	; (80001d4 <__NVIC_SetPriority+0x50>)
 80001b4:	79fb      	ldrb	r3, [r7, #7]
 80001b6:	f003 030f 	and.w	r3, r3, #15
 80001ba:	3b04      	subs	r3, #4
 80001bc:	0152      	lsls	r2, r2, #5
 80001be:	b2d2      	uxtb	r2, r2
 80001c0:	440b      	add	r3, r1
 80001c2:	761a      	strb	r2, [r3, #24]
}
 80001c4:	bf00      	nop
 80001c6:	370c      	adds	r7, #12
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bc80      	pop	{r7}
 80001cc:	4770      	bx	lr
 80001ce:	bf00      	nop
 80001d0:	e000e100 	.word	0xe000e100
 80001d4:	e000ed00 	.word	0xe000ed00

080001d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	3b01      	subs	r3, #1
 80001e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80001e8:	d301      	bcc.n	80001ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80001ea:	2301      	movs	r3, #1
 80001ec:	e00f      	b.n	800020e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80001ee:	4a0a      	ldr	r2, [pc, #40]	; (8000218 <SysTick_Config+0x40>)
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	3b01      	subs	r3, #1
 80001f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80001f6:	2107      	movs	r1, #7
 80001f8:	f04f 30ff 	mov.w	r0, #4294967295
 80001fc:	f7ff ffc2 	bl	8000184 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000200:	4b05      	ldr	r3, [pc, #20]	; (8000218 <SysTick_Config+0x40>)
 8000202:	2200      	movs	r2, #0
 8000204:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000206:	4b04      	ldr	r3, [pc, #16]	; (8000218 <SysTick_Config+0x40>)
 8000208:	2207      	movs	r2, #7
 800020a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800020c:	2300      	movs	r3, #0
}
 800020e:	4618      	mov	r0, r3
 8000210:	3708      	adds	r7, #8
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	e000e010 	.word	0xe000e010

0800021c <HardFault_Handler>:
 */

#include "CortexMx_OS_Porting.h"

void HardFault_Handler()
{
 800021c:	b480      	push	{r7}
 800021e:	af00      	add	r7, sp, #0
	while(1);
 8000220:	e7fe      	b.n	8000220 <HardFault_Handler+0x4>

08000222 <MemManage_Handler>:
}

void MemManage_Handler()
{
 8000222:	b480      	push	{r7}
 8000224:	af00      	add	r7, sp, #0
	while(1);
 8000226:	e7fe      	b.n	8000226 <MemManage_Handler+0x4>

08000228 <BusFault_Handler>:
}

void BusFault_Handler()
{
 8000228:	b480      	push	{r7}
 800022a:	af00      	add	r7, sp, #0
	while(1);
 800022c:	e7fe      	b.n	800022c <BusFault_Handler+0x4>

0800022e <UsageFault_Handler>:
}

void UsageFault_Handler()
{
 800022e:	b480      	push	{r7}
 8000230:	af00      	add	r7, sp, #0
	while(1);
 8000232:	e7fe      	b.n	8000232 <UsageFault_Handler+0x4>

08000234 <SVC_Handler>:
}

__attribute__ ((naked)) void SVC_Handler()
{
	__asm volatile ("TST LR,#0x04 \n\t"
 8000234:	f01e 0f04 	tst.w	lr, #4
 8000238:	bf0c      	ite	eq
 800023a:	f3ef 8008 	mrseq	r0, MSP
 800023e:	f3ef 8009 	mrsne	r0, PSP
 8000242:	f000 badb 	b.w	80007fc <OS_SVC>
					"ITE EQ \n\t"
					"MRSEQ R0,MSP \n\t"
					"MRSNE R0,PSP \n\t"
					"B OS_SVC");
}
 8000246:	bf00      	nop

08000248 <HW_Init>:

void HW_Init()
{
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
	 */

	/* Decrease PendSV interrupt priority to be smaller than SysTick timer
	 * SysTick timer has a priority 14
	 */
	__NVIC_SetPriority(PendSV_IRQn, 15);
 800024c:	210f      	movs	r1, #15
 800024e:	f06f 0001 	mvn.w	r0, #1
 8000252:	f7ff ff97 	bl	8000184 <__NVIC_SetPriority>
}
 8000256:	bf00      	nop
 8000258:	bd80      	pop	{r7, pc}
	...

0800025c <Trigger_OS_PendSV>:

void Trigger_OS_PendSV()
{
 800025c:	b480      	push	{r7}
 800025e:	af00      	add	r7, sp, #0
	// Set PendSv
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8000260:	4b04      	ldr	r3, [pc, #16]	; (8000274 <Trigger_OS_PendSV+0x18>)
 8000262:	685b      	ldr	r3, [r3, #4]
 8000264:	4a03      	ldr	r2, [pc, #12]	; (8000274 <Trigger_OS_PendSV+0x18>)
 8000266:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800026a:	6053      	str	r3, [r2, #4]
}
 800026c:	bf00      	nop
 800026e:	46bd      	mov	sp, r7
 8000270:	bc80      	pop	{r7}
 8000272:	4770      	bx	lr
 8000274:	e000ed00 	.word	0xe000ed00

08000278 <Start_Ticker>:

void Start_Ticker()
{
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
	/* This clock tree should be defined in HW_Init()
	 * 8MHz
	 * 1 Count = 0.125us
	 * X counts = 1 ms -> X = 8000 counts
	 */
	SysTick_Config(8000);
 800027c:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8000280:	f7ff ffaa 	bl	80001d8 <SysTick_Config>
}
 8000284:	bf00      	nop
 8000286:	bd80      	pop	{r7, pc}

08000288 <FIFO_Create>:

#include "MyRTOS_FIFO.h"

// APIs
FIFO_Status FIFO_Create(FIFO_BUF_t* fifo, element_type* buf, uint32_t length)
{
 8000288:	b480      	push	{r7}
 800028a:	b085      	sub	sp, #20
 800028c:	af00      	add	r7, sp, #0
 800028e:	60f8      	str	r0, [r7, #12]
 8000290:	60b9      	str	r1, [r7, #8]
 8000292:	607a      	str	r2, [r7, #4]
	if(buf == NULL)
 8000294:	68bb      	ldr	r3, [r7, #8]
 8000296:	2b00      	cmp	r3, #0
 8000298:	d101      	bne.n	800029e <FIFO_Create+0x16>
		return FIFO_Null;
 800029a:	2303      	movs	r3, #3
 800029c:	e00f      	b.n	80002be <FIFO_Create+0x36>

	fifo->base = buf;
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	68ba      	ldr	r2, [r7, #8]
 80002a2:	609a      	str	r2, [r3, #8]
	fifo->head = buf;
 80002a4:	68fb      	ldr	r3, [r7, #12]
 80002a6:	68ba      	ldr	r2, [r7, #8]
 80002a8:	60da      	str	r2, [r3, #12]
	fifo->tail = buf;
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	68ba      	ldr	r2, [r7, #8]
 80002ae:	611a      	str	r2, [r3, #16]
	fifo->length = length;
 80002b0:	68fb      	ldr	r3, [r7, #12]
 80002b2:	687a      	ldr	r2, [r7, #4]
 80002b4:	601a      	str	r2, [r3, #0]
	fifo->count = 0;
 80002b6:	68fb      	ldr	r3, [r7, #12]
 80002b8:	2200      	movs	r2, #0
 80002ba:	605a      	str	r2, [r3, #4]

	return FIFO_No_Error;
 80002bc:	2300      	movs	r3, #0
}
 80002be:	4618      	mov	r0, r3
 80002c0:	3714      	adds	r7, #20
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bc80      	pop	{r7}
 80002c6:	4770      	bx	lr

080002c8 <FIFO_Enqueue>:

FIFO_Status FIFO_Enqueue(FIFO_BUF_t* fifo, element_type item)
{
 80002c8:	b480      	push	{r7}
 80002ca:	b083      	sub	sp, #12
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	6078      	str	r0, [r7, #4]
 80002d0:	6039      	str	r1, [r7, #0]
	// check if queue is valid
	if(!fifo->base || !fifo->head || !fifo->tail)
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	689b      	ldr	r3, [r3, #8]
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d007      	beq.n	80002ea <FIFO_Enqueue+0x22>
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	68db      	ldr	r3, [r3, #12]
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d003      	beq.n	80002ea <FIFO_Enqueue+0x22>
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	691b      	ldr	r3, [r3, #16]
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d101      	bne.n	80002ee <FIFO_Enqueue+0x26>
		return FIFO_Null;
 80002ea:	2303      	movs	r3, #3
 80002ec:	e025      	b.n	800033a <FIFO_Enqueue+0x72>

	// check if FIFO is full
	if(fifo->count == fifo->length)
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	685a      	ldr	r2, [r3, #4]
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	429a      	cmp	r2, r3
 80002f8:	d101      	bne.n	80002fe <FIFO_Enqueue+0x36>
		return FIFO_Full;
 80002fa:	2301      	movs	r3, #1
 80002fc:	e01d      	b.n	800033a <FIFO_Enqueue+0x72>

	// enqueue item
	*(fifo->tail) = item;
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	691b      	ldr	r3, [r3, #16]
 8000302:	683a      	ldr	r2, [r7, #0]
 8000304:	601a      	str	r2, [r3, #0]
	fifo->count++;
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	685b      	ldr	r3, [r3, #4]
 800030a:	1c5a      	adds	r2, r3, #1
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	605a      	str	r2, [r3, #4]

	if(fifo->tail == (element_type*)(fifo->base + fifo->length))
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	691a      	ldr	r2, [r3, #16]
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	6899      	ldr	r1, [r3, #8]
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	009b      	lsls	r3, r3, #2
 800031e:	440b      	add	r3, r1
 8000320:	429a      	cmp	r2, r3
 8000322:	d104      	bne.n	800032e <FIFO_Enqueue+0x66>
		fifo->tail = fifo->base;
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	689a      	ldr	r2, [r3, #8]
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	611a      	str	r2, [r3, #16]
 800032c:	e004      	b.n	8000338 <FIFO_Enqueue+0x70>
	else
		fifo->tail++;
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	691b      	ldr	r3, [r3, #16]
 8000332:	1d1a      	adds	r2, r3, #4
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	611a      	str	r2, [r3, #16]

	return FIFO_No_Error;
 8000338:	2300      	movs	r3, #0
}
 800033a:	4618      	mov	r0, r3
 800033c:	370c      	adds	r7, #12
 800033e:	46bd      	mov	sp, r7
 8000340:	bc80      	pop	{r7}
 8000342:	4770      	bx	lr

08000344 <FIFO_Dequeue>:

FIFO_Status FIFO_Dequeue(FIFO_BUF_t* fifo, element_type* item)
{
 8000344:	b480      	push	{r7}
 8000346:	b083      	sub	sp, #12
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
 800034c:	6039      	str	r1, [r7, #0]
	// check if FIFO is valid
	if(!fifo->base || !fifo->head || !fifo->tail)
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	689b      	ldr	r3, [r3, #8]
 8000352:	2b00      	cmp	r3, #0
 8000354:	d007      	beq.n	8000366 <FIFO_Dequeue+0x22>
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	68db      	ldr	r3, [r3, #12]
 800035a:	2b00      	cmp	r3, #0
 800035c:	d003      	beq.n	8000366 <FIFO_Dequeue+0x22>
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	691b      	ldr	r3, [r3, #16]
 8000362:	2b00      	cmp	r3, #0
 8000364:	d101      	bne.n	800036a <FIFO_Dequeue+0x26>
		return FIFO_Null;
 8000366:	2303      	movs	r3, #3
 8000368:	e024      	b.n	80003b4 <FIFO_Dequeue+0x70>

	// check if FIFO is empty
	if(fifo->count == 0)
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	685b      	ldr	r3, [r3, #4]
 800036e:	2b00      	cmp	r3, #0
 8000370:	d101      	bne.n	8000376 <FIFO_Dequeue+0x32>
		return FIFO_Empty;
 8000372:	2302      	movs	r3, #2
 8000374:	e01e      	b.n	80003b4 <FIFO_Dequeue+0x70>

	// dequeue item
	*item = *(fifo->head);
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	68db      	ldr	r3, [r3, #12]
 800037a:	681a      	ldr	r2, [r3, #0]
 800037c:	683b      	ldr	r3, [r7, #0]
 800037e:	601a      	str	r2, [r3, #0]
	fifo->count--;
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	685b      	ldr	r3, [r3, #4]
 8000384:	1e5a      	subs	r2, r3, #1
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	605a      	str	r2, [r3, #4]

	if(fifo->head == (element_type*)(fifo->base + fifo->length))
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	68da      	ldr	r2, [r3, #12]
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	6899      	ldr	r1, [r3, #8]
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	009b      	lsls	r3, r3, #2
 8000398:	440b      	add	r3, r1
 800039a:	429a      	cmp	r2, r3
 800039c:	d104      	bne.n	80003a8 <FIFO_Dequeue+0x64>
		fifo->head = fifo->base;
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	689a      	ldr	r2, [r3, #8]
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	60da      	str	r2, [r3, #12]
 80003a6:	e004      	b.n	80003b2 <FIFO_Dequeue+0x6e>
	else
		fifo->head++;
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	68db      	ldr	r3, [r3, #12]
 80003ac:	1d1a      	adds	r2, r3, #4
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	60da      	str	r2, [r3, #12]

	return FIFO_No_Error;
 80003b2:	2300      	movs	r3, #0
}
 80003b4:	4618      	mov	r0, r3
 80003b6:	370c      	adds	r7, #12
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bc80      	pop	{r7}
 80003bc:	4770      	bx	lr
	...

080003c0 <MyARTOS_Init>:
static void MyRTOS_Update_ScheduleTable();
static void bubble_sort();
static void MyRTOS_Decide_WhatNext();
/* ============================================= */
MyRTOS_errorID MyARTOS_Init()
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b082      	sub	sp, #8
 80003c4:	af00      	add	r7, sp, #0
	MyRTOS_errorID error_status = NoError;
 80003c6:	2300      	movs	r3, #0
 80003c8:	71fb      	strb	r3, [r7, #7]

	// Update OS Mode (OS_Suspend)
	Os_Control.OS_Mode = OS_Suspend;
 80003ca:	4b15      	ldr	r3, [pc, #84]	; (8000420 <MyARTOS_Init+0x60>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	// Specify Main Stack For OS
	error_status = MyRTOS_Create_MainStack();
 80003d2:	f000 f8a9 	bl	8000528 <MyRTOS_Create_MainStack>
 80003d6:	4603      	mov	r3, r0
 80003d8:	71fb      	strb	r3, [r7, #7]

	// Create OS Ready Queue
	if(FIFO_Create(&Ready_Queue, Ready_Queue_Buf, NUMBER_OF_TASKS) != FIFO_No_Error)
 80003da:	220a      	movs	r2, #10
 80003dc:	4911      	ldr	r1, [pc, #68]	; (8000424 <MyARTOS_Init+0x64>)
 80003de:	4812      	ldr	r0, [pc, #72]	; (8000428 <MyARTOS_Init+0x68>)
 80003e0:	f7ff ff52 	bl	8000288 <FIFO_Create>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d002      	beq.n	80003f0 <MyARTOS_Init+0x30>
	{
		error_status = Ready_Queue_Init_Error;
 80003ea:	2301      	movs	r3, #1
 80003ec:	71fb      	strb	r3, [r7, #7]
 80003ee:	e012      	b.n	8000416 <MyARTOS_Init+0x56>
	}
	else
	{
		// Configure Idle Task
		strcpy((char*)MyRTOS_IdleTask.TaskName, "Idle_Task");
 80003f0:	4b0e      	ldr	r3, [pc, #56]	; (800042c <MyARTOS_Init+0x6c>)
 80003f2:	4a0f      	ldr	r2, [pc, #60]	; (8000430 <MyARTOS_Init+0x70>)
 80003f4:	ca07      	ldmia	r2, {r0, r1, r2}
 80003f6:	c303      	stmia	r3!, {r0, r1}
 80003f8:	801a      	strh	r2, [r3, #0]
		MyRTOS_IdleTask.Priority = 255;
 80003fa:	4b0e      	ldr	r3, [pc, #56]	; (8000434 <MyARTOS_Init+0x74>)
 80003fc:	22ff      	movs	r2, #255	; 0xff
 80003fe:	711a      	strb	r2, [r3, #4]
		MyRTOS_IdleTask.p_TaskEntry = MyRTOS_Idle_Task;
 8000400:	4b0c      	ldr	r3, [pc, #48]	; (8000434 <MyARTOS_Init+0x74>)
 8000402:	4a0d      	ldr	r2, [pc, #52]	; (8000438 <MyARTOS_Init+0x78>)
 8000404:	609a      	str	r2, [r3, #8]
		MyRTOS_IdleTask.Stack_Size = 100;
 8000406:	4b0b      	ldr	r3, [pc, #44]	; (8000434 <MyARTOS_Init+0x74>)
 8000408:	2264      	movs	r2, #100	; 0x64
 800040a:	601a      	str	r2, [r3, #0]

		error_status = MyRTOS_CreateTask(&MyRTOS_IdleTask);
 800040c:	4809      	ldr	r0, [pc, #36]	; (8000434 <MyARTOS_Init+0x74>)
 800040e:	f000 f815 	bl	800043c <MyRTOS_CreateTask>
 8000412:	4603      	mov	r3, r0
 8000414:	71fb      	strb	r3, [r7, #7]
	}

	return error_status;
 8000416:	79fb      	ldrb	r3, [r7, #7]
}
 8000418:	4618      	mov	r0, r3
 800041a:	3708      	adds	r7, #8
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}
 8000420:	200000a4 	.word	0x200000a4
 8000424:	20000030 	.word	0x20000030
 8000428:	2000001c 	.word	0x2000001c
 800042c:	20000074 	.word	0x20000074
 8000430:	08000e40 	.word	0x08000e40
 8000434:	20000058 	.word	0x20000058
 8000438:	08000575 	.word	0x08000575

0800043c <MyRTOS_CreateTask>:

MyRTOS_errorID MyRTOS_CreateTask(Task_Ref *Tref)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b084      	sub	sp, #16
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
	MyRTOS_errorID error_status = NoError;
 8000444:	2300      	movs	r3, #0
 8000446:	73fb      	strb	r3, [r7, #15]
	/* - S_PSP_Task -
	 * - Task stack -
	 * - E_PSP_Task -
	 * -  8 bytes   -
	 */
	Tref->S_PSP_Task = Os_Control.PSP_Task_Locator;
 8000448:	4b17      	ldr	r3, [pc, #92]	; (80004a8 <MyRTOS_CreateTask+0x6c>)
 800044a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	611a      	str	r2, [r3, #16]
	Tref->E_PSP_Task = Tref->S_PSP_Task - Tref->Stack_Size;
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	691a      	ldr	r2, [r3, #16]
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	1ad2      	subs	r2, r2, r3
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	615a      	str	r2, [r3, #20]
	// Aligned 8 bytes space between task PSP and other
	Os_Control.PSP_Task_Locator = Tref->E_PSP_Task - 8;
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	695b      	ldr	r3, [r3, #20]
 8000462:	3b08      	subs	r3, #8
 8000464:	4a10      	ldr	r2, [pc, #64]	; (80004a8 <MyRTOS_CreateTask+0x6c>)
 8000466:	6313      	str	r3, [r2, #48]	; 0x30

	// Check if task stack size exceed the available PSP stack size
	if(Tref->E_PSP_Task < (uint32_t)&_eheap)
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	695b      	ldr	r3, [r3, #20]
 800046c:	4a0f      	ldr	r2, [pc, #60]	; (80004ac <MyRTOS_CreateTask+0x70>)
 800046e:	4293      	cmp	r3, r2
 8000470:	d202      	bcs.n	8000478 <MyRTOS_CreateTask+0x3c>
	{
		// Error exceed the available stack size
		error_status = Task_Exceeded_Stack;
 8000472:	2302      	movs	r3, #2
 8000474:	73fb      	strb	r3, [r7, #15]
 8000476:	e011      	b.n	800049c <MyRTOS_CreateTask+0x60>
	}
	else
	{
		// Initialize task PSP stack
		MyRTOS_Init_TaskStack(Tref);
 8000478:	6878      	ldr	r0, [r7, #4]
 800047a:	f000 f889 	bl	8000590 <MyRTOS_Init_TaskStack>

		// TAsk state update --> suspended
		Tref->TaskState = Suspend;
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	2200      	movs	r2, #0
 8000482:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

		// Add task to schedule table
		Os_Control.OSTasks[Os_Control.NoOfCreatedTasks] = Tref;
 8000486:	4b08      	ldr	r3, [pc, #32]	; (80004a8 <MyRTOS_CreateTask+0x6c>)
 8000488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800048a:	4907      	ldr	r1, [pc, #28]	; (80004a8 <MyRTOS_CreateTask+0x6c>)
 800048c:	687a      	ldr	r2, [r7, #4]
 800048e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Os_Control.NoOfCreatedTasks++;
 8000492:	4b05      	ldr	r3, [pc, #20]	; (80004a8 <MyRTOS_CreateTask+0x6c>)
 8000494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000496:	3301      	adds	r3, #1
 8000498:	4a03      	ldr	r2, [pc, #12]	; (80004a8 <MyRTOS_CreateTask+0x6c>)
 800049a:	6353      	str	r3, [r2, #52]	; 0x34
	}

	return error_status;
 800049c:	7bfb      	ldrb	r3, [r7, #15]
}
 800049e:	4618      	mov	r0, r3
 80004a0:	3710      	adds	r7, #16
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	200000a4 	.word	0x200000a4
 80004ac:	200007f0 	.word	0x200007f0

080004b0 <MyRTOS_ActivateTask>:
MyRTOS_errorID MyRTOS_ActivateTask(Task_Ref *Tref)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b084      	sub	sp, #16
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
	MyRTOS_errorID error_status = NoError;
 80004b8:	2300      	movs	r3, #0
 80004ba:	73fb      	strb	r3, [r7, #15]

	Tref->TaskState = Waiting;
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	2201      	movs	r2, #1
 80004c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

	MyRTOS_OS_SVC_Set(SVC_ActivateTask);
 80004c4:	2001      	movs	r0, #1
 80004c6:	f000 f9c9 	bl	800085c <MyRTOS_OS_SVC_Set>

	return error_status;
 80004ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80004cc:	4618      	mov	r0, r3
 80004ce:	3710      	adds	r7, #16
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}

080004d4 <MyRTOS_StartOS>:

	return error_status;
}

void MyRTOS_StartOS()
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
	Os_Control.OS_Mode = OS_Running;
 80004d8:	4b11      	ldr	r3, [pc, #68]	; (8000520 <MyRTOS_StartOS+0x4c>)
 80004da:	2201      	movs	r2, #1
 80004dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	// Set default/current task --> MyRTOS_IdleTask
	Os_Control.CurrentTask = &MyRTOS_IdleTask;
 80004e0:	4b0f      	ldr	r3, [pc, #60]	; (8000520 <MyRTOS_StartOS+0x4c>)
 80004e2:	4a10      	ldr	r2, [pc, #64]	; (8000524 <MyRTOS_StartOS+0x50>)
 80004e4:	639a      	str	r2, [r3, #56]	; 0x38
	// Activate MyRTOS_IdleTask
	MyRTOS_ActivateTask(&MyRTOS_IdleTask);
 80004e6:	480f      	ldr	r0, [pc, #60]	; (8000524 <MyRTOS_StartOS+0x50>)
 80004e8:	f7ff ffe2 	bl	80004b0 <MyRTOS_ActivateTask>
	// Start Ticker --> tick = 1ms
	Start_Ticker();
 80004ec:	f7ff fec4 	bl	8000278 <Start_Ticker>
	// Set PSP with CurrentTask/MyRTOS_IdleTask PSP
	OS_SET_PSP(Os_Control.CurrentTask->S_PSP_Task);
 80004f0:	4b0b      	ldr	r3, [pc, #44]	; (8000520 <MyRTOS_StartOS+0x4c>)
 80004f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004f4:	691b      	ldr	r3, [r3, #16]
 80004f6:	4618      	mov	r0, r3
 80004f8:	f380 8809 	msr	PSP, r0
	// Switch thread mode from MSP to PSP
	OS_SWITCH_SP_TO_PSP();
 80004fc:	f3ef 8014 	mrs	r0, CONTROL
 8000500:	f040 0002 	orr.w	r0, r0, #2
 8000504:	f380 8814 	msr	CONTROL, r0
	// Switch thread mode to unprivileged
	OS_SWITCH_ACCESS_TO_UNPRIVILEGED();
 8000508:	f3ef 8014 	mrs	r0, CONTROL
 800050c:	f040 0001 	orr.w	r0, r0, #1
 8000510:	f380 8814 	msr	CONTROL, r0
	// Call CurrentTask/MyRTOS_IdleTask
	Os_Control.CurrentTask->p_TaskEntry();
 8000514:	4b02      	ldr	r3, [pc, #8]	; (8000520 <MyRTOS_StartOS+0x4c>)
 8000516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000518:	689b      	ldr	r3, [r3, #8]
 800051a:	4798      	blx	r3

	while(1);
 800051c:	e7fe      	b.n	800051c <MyRTOS_StartOS+0x48>
 800051e:	bf00      	nop
 8000520:	200000a4 	.word	0x200000a4
 8000524:	20000058 	.word	0x20000058

08000528 <MyRTOS_Create_MainStack>:
}

/* ============================================== */
static MyRTOS_errorID MyRTOS_Create_MainStack()
{
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
	MyRTOS_errorID error_status = NoError;
 800052e:	2300      	movs	r3, #0
 8000530:	71fb      	strb	r3, [r7, #7]

	Os_Control.S_MSP_Task = (uint32_t)&_estack;
 8000532:	4a0d      	ldr	r2, [pc, #52]	; (8000568 <MyRTOS_Create_MainStack+0x40>)
 8000534:	4b0d      	ldr	r3, [pc, #52]	; (800056c <MyRTOS_Create_MainStack+0x44>)
 8000536:	629a      	str	r2, [r3, #40]	; 0x28
	Os_Control.E_MSP_Task = Os_Control.S_MSP_Task - MAIN_STACK_SIZE;
 8000538:	4b0c      	ldr	r3, [pc, #48]	; (800056c <MyRTOS_Create_MainStack+0x44>)
 800053a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800053c:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
 8000540:	4a0a      	ldr	r2, [pc, #40]	; (800056c <MyRTOS_Create_MainStack+0x44>)
 8000542:	62d3      	str	r3, [r2, #44]	; 0x2c
	// Aligned 8 bytes space between MSP & PSP
	Os_Control.PSP_Task_Locator = Os_Control.E_MSP_Task - 8;
 8000544:	4b09      	ldr	r3, [pc, #36]	; (800056c <MyRTOS_Create_MainStack+0x44>)
 8000546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000548:	3b08      	subs	r3, #8
 800054a:	4a08      	ldr	r2, [pc, #32]	; (800056c <MyRTOS_Create_MainStack+0x44>)
 800054c:	6313      	str	r3, [r2, #48]	; 0x30

	if(Os_Control.E_MSP_Task < (uint32_t)&_eheap)
 800054e:	4b07      	ldr	r3, [pc, #28]	; (800056c <MyRTOS_Create_MainStack+0x44>)
 8000550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000552:	4a07      	ldr	r2, [pc, #28]	; (8000570 <MyRTOS_Create_MainStack+0x48>)
 8000554:	4293      	cmp	r3, r2
 8000556:	d201      	bcs.n	800055c <MyRTOS_Create_MainStack+0x34>
	{
		// Error exceed the available stack size
		error_status = Task_Exceeded_Stack;
 8000558:	2302      	movs	r3, #2
 800055a:	71fb      	strb	r3, [r7, #7]
	}

	return error_status;
 800055c:	79fb      	ldrb	r3, [r7, #7]
}
 800055e:	4618      	mov	r0, r3
 8000560:	370c      	adds	r7, #12
 8000562:	46bd      	mov	sp, r7
 8000564:	bc80      	pop	{r7}
 8000566:	4770      	bx	lr
 8000568:	20002800 	.word	0x20002800
 800056c:	200000a4 	.word	0x200000a4
 8000570:	200007f0 	.word	0x200007f0

08000574 <MyRTOS_Idle_Task>:

static void MyRTOS_Idle_Task()
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
	while(1)
	{
		IdleTask_flag ^= 1;
 8000578:	4b04      	ldr	r3, [pc, #16]	; (800058c <MyRTOS_Idle_Task+0x18>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	b2db      	uxtb	r3, r3
 800057e:	f083 0301 	eor.w	r3, r3, #1
 8000582:	b2da      	uxtb	r2, r3
 8000584:	4b01      	ldr	r3, [pc, #4]	; (800058c <MyRTOS_Idle_Task+0x18>)
 8000586:	701a      	strb	r2, [r3, #0]
		__asm volatile("NOP");
 8000588:	bf00      	nop
		IdleTask_flag ^= 1;
 800058a:	e7f5      	b.n	8000578 <MyRTOS_Idle_Task+0x4>
 800058c:	200000a1 	.word	0x200000a1

08000590 <MyRTOS_Init_TaskStack>:
	}
}

static void MyRTOS_Init_TaskStack(Task_Ref *Tref)
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
	 * R3:R0
	 * ------> done manually
	 * R4:R11
	 */

	Tref->Current_PSP = (uint32_t*)Tref->S_PSP_Task;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	691b      	ldr	r3, [r3, #16]
 800059c:	461a      	mov	r2, r3
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	619a      	str	r2, [r3, #24]

	Tref->Current_PSP--;
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	699b      	ldr	r3, [r3, #24]
 80005a6:	1f1a      	subs	r2, r3, #4
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	619a      	str	r2, [r3, #24]
	*(Tref->Current_PSP) = 0x01000000; // Dummy xPSR T bit should be 1
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	699b      	ldr	r3, [r3, #24]
 80005b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80005b4:	601a      	str	r2, [r3, #0]
	Tref->Current_PSP--;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	699b      	ldr	r3, [r3, #24]
 80005ba:	1f1a      	subs	r2, r3, #4
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	619a      	str	r2, [r3, #24]
	*(Tref->Current_PSP) = (unsigned int)Tref->p_TaskEntry; // Dummy PC
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	689a      	ldr	r2, [r3, #8]
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	699b      	ldr	r3, [r3, #24]
 80005c8:	601a      	str	r2, [r3, #0]
	Tref->Current_PSP--;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	699b      	ldr	r3, [r3, #24]
 80005ce:	1f1a      	subs	r2, r3, #4
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	619a      	str	r2, [r3, #24]
	*(Tref->Current_PSP) = 0xFFFFFFFD; // Dummy LR EXC_RETURN to thread mode with PSP
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	699b      	ldr	r3, [r3, #24]
 80005d8:	f06f 0202 	mvn.w	r2, #2
 80005dc:	601a      	str	r2, [r3, #0]

	// Dummy values for R12:R0
	for (int i = 0; i < 13; ++i)
 80005de:	2300      	movs	r3, #0
 80005e0:	60fb      	str	r3, [r7, #12]
 80005e2:	e00b      	b.n	80005fc <MyRTOS_Init_TaskStack+0x6c>
	{
		Tref->Current_PSP--;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	699b      	ldr	r3, [r3, #24]
 80005e8:	1f1a      	subs	r2, r3, #4
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	619a      	str	r2, [r3, #24]
		*(Tref->Current_PSP) = 0;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	699b      	ldr	r3, [r3, #24]
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 13; ++i)
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	3301      	adds	r3, #1
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	2b0c      	cmp	r3, #12
 8000600:	ddf0      	ble.n	80005e4 <MyRTOS_Init_TaskStack+0x54>
	}
}
 8000602:	bf00      	nop
 8000604:	3714      	adds	r7, #20
 8000606:	46bd      	mov	sp, r7
 8000608:	bc80      	pop	{r7}
 800060a:	4770      	bx	lr

0800060c <bubble_sort>:

// Handler mode
static void bubble_sort()
{
 800060c:	b480      	push	{r7}
 800060e:	b087      	sub	sp, #28
 8000610:	af00      	add	r7, sp, #0
    uint32_t i = 0, j = 0, n;
 8000612:	2300      	movs	r3, #0
 8000614:	617b      	str	r3, [r7, #20]
 8000616:	2300      	movs	r3, #0
 8000618:	613b      	str	r3, [r7, #16]
    uint8_t sorted_flag = 1;
 800061a:	2301      	movs	r3, #1
 800061c:	73fb      	strb	r3, [r7, #15]
    Task_Ref *temp;

    n = Os_Control.NoOfCreatedTasks;
 800061e:	4b24      	ldr	r3, [pc, #144]	; (80006b0 <bubble_sort+0xa4>)
 8000620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000622:	60bb      	str	r3, [r7, #8]

    for(i = 0; i < n-1; i++)
 8000624:	2300      	movs	r3, #0
 8000626:	617b      	str	r3, [r7, #20]
 8000628:	e037      	b.n	800069a <bubble_sort+0x8e>
    {
    	/* Set sorted_flag before inner loop
    	 * the value of sorted_flag changes only if there is swap
    	 */
    	sorted_flag = 1;
 800062a:	2301      	movs	r3, #1
 800062c:	73fb      	strb	r3, [r7, #15]

        for(j = 0; j < n-1-i; j++)
 800062e:	2300      	movs	r3, #0
 8000630:	613b      	str	r3, [r7, #16]
 8000632:	e025      	b.n	8000680 <bubble_sort+0x74>
        {
            if(Os_Control.OSTasks[j]->Priority > Os_Control.OSTasks[j+1]->Priority)
 8000634:	4a1e      	ldr	r2, [pc, #120]	; (80006b0 <bubble_sort+0xa4>)
 8000636:	693b      	ldr	r3, [r7, #16]
 8000638:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800063c:	791a      	ldrb	r2, [r3, #4]
 800063e:	693b      	ldr	r3, [r7, #16]
 8000640:	3301      	adds	r3, #1
 8000642:	491b      	ldr	r1, [pc, #108]	; (80006b0 <bubble_sort+0xa4>)
 8000644:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000648:	791b      	ldrb	r3, [r3, #4]
 800064a:	429a      	cmp	r2, r3
 800064c:	d915      	bls.n	800067a <bubble_sort+0x6e>
            {
            	// Swap 2 elements
            	temp = Os_Control.OSTasks[j];
 800064e:	4a18      	ldr	r2, [pc, #96]	; (80006b0 <bubble_sort+0xa4>)
 8000650:	693b      	ldr	r3, [r7, #16]
 8000652:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000656:	607b      	str	r3, [r7, #4]
            	Os_Control.OSTasks[j] = Os_Control.OSTasks[j+1];
 8000658:	693b      	ldr	r3, [r7, #16]
 800065a:	3301      	adds	r3, #1
 800065c:	4a14      	ldr	r2, [pc, #80]	; (80006b0 <bubble_sort+0xa4>)
 800065e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000662:	4913      	ldr	r1, [pc, #76]	; (80006b0 <bubble_sort+0xa4>)
 8000664:	693b      	ldr	r3, [r7, #16]
 8000666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            	Os_Control.OSTasks[j+1] = temp;
 800066a:	693b      	ldr	r3, [r7, #16]
 800066c:	3301      	adds	r3, #1
 800066e:	4910      	ldr	r1, [pc, #64]	; (80006b0 <bubble_sort+0xa4>)
 8000670:	687a      	ldr	r2, [r7, #4]
 8000672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                // Clear sorted_flag indicating array is not sorted
                sorted_flag = 0;
 8000676:	2300      	movs	r3, #0
 8000678:	73fb      	strb	r3, [r7, #15]
        for(j = 0; j < n-1-i; j++)
 800067a:	693b      	ldr	r3, [r7, #16]
 800067c:	3301      	adds	r3, #1
 800067e:	613b      	str	r3, [r7, #16]
 8000680:	68ba      	ldr	r2, [r7, #8]
 8000682:	697b      	ldr	r3, [r7, #20]
 8000684:	1ad3      	subs	r3, r2, r3
 8000686:	3b01      	subs	r3, #1
 8000688:	693a      	ldr	r2, [r7, #16]
 800068a:	429a      	cmp	r2, r3
 800068c:	d3d2      	bcc.n	8000634 <bubble_sort+0x28>
        }

        /* If there is no swap the array is already sorted
		 * no need to iterate again
		 */
        if(sorted_flag == 1)
 800068e:	7bfb      	ldrb	r3, [r7, #15]
 8000690:	2b01      	cmp	r3, #1
 8000692:	d008      	beq.n	80006a6 <bubble_sort+0x9a>
    for(i = 0; i < n-1; i++)
 8000694:	697b      	ldr	r3, [r7, #20]
 8000696:	3301      	adds	r3, #1
 8000698:	617b      	str	r3, [r7, #20]
 800069a:	68bb      	ldr	r3, [r7, #8]
 800069c:	3b01      	subs	r3, #1
 800069e:	697a      	ldr	r2, [r7, #20]
 80006a0:	429a      	cmp	r2, r3
 80006a2:	d3c2      	bcc.n	800062a <bubble_sort+0x1e>
 80006a4:	e000      	b.n	80006a8 <bubble_sort+0x9c>
        {
            return;
 80006a6:	bf00      	nop
        }
    }
}
 80006a8:	371c      	adds	r7, #28
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bc80      	pop	{r7}
 80006ae:	4770      	bx	lr
 80006b0:	200000a4 	.word	0x200000a4

080006b4 <MyRTOS_Update_ScheduleTable>:

// Handler mode
static void MyRTOS_Update_ScheduleTable()
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b084      	sub	sp, #16
 80006b8:	af00      	add	r7, sp, #0
	uint32_t i = 0;
 80006ba:	2300      	movs	r3, #0
 80006bc:	60fb      	str	r3, [r7, #12]
    Task_Ref *temp, *ptask, *pnext_task;

    /* 1- bubble sort schedule table(Os_Control.OSTasks[NUMBER_OF_TASKS])
	 * 	  high priority then low
	 */
	bubble_sort();
 80006be:	f7ff ffa5 	bl	800060c <bubble_sort>

	/* 2- Free ready queue */
	while(FIFO_Dequeue(&Ready_Queue, &temp) != FIFO_Empty);
 80006c2:	bf00      	nop
 80006c4:	463b      	mov	r3, r7
 80006c6:	4619      	mov	r1, r3
 80006c8:	4827      	ldr	r0, [pc, #156]	; (8000768 <MyRTOS_Update_ScheduleTable+0xb4>)
 80006ca:	f7ff fe3b 	bl	8000344 <FIFO_Dequeue>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b02      	cmp	r3, #2
 80006d2:	d1f7      	bne.n	80006c4 <MyRTOS_Update_ScheduleTable+0x10>

	/* 3- Update ready queue */
	while(i < Os_Control.NoOfCreatedTasks)
 80006d4:	e03d      	b.n	8000752 <MyRTOS_Update_ScheduleTable+0x9e>
	{
		ptask = Os_Control.OSTasks[i];
 80006d6:	4a25      	ldr	r2, [pc, #148]	; (800076c <MyRTOS_Update_ScheduleTable+0xb8>)
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006de:	60bb      	str	r3, [r7, #8]
		pnext_task = Os_Control.OSTasks[i+1];
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	3301      	adds	r3, #1
 80006e4:	4a21      	ldr	r2, [pc, #132]	; (800076c <MyRTOS_Update_ScheduleTable+0xb8>)
 80006e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006ea:	607b      	str	r3, [r7, #4]
		if(ptask->TaskState != Suspend)
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d02a      	beq.n	800074c <MyRTOS_Update_ScheduleTable+0x98>
		{
			// In case we reached the end of available tasks
			if(pnext_task->TaskState == Suspend)
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d108      	bne.n	8000712 <MyRTOS_Update_ScheduleTable+0x5e>
			{
				FIFO_Enqueue(&Ready_Queue, ptask);
 8000700:	68b9      	ldr	r1, [r7, #8]
 8000702:	4819      	ldr	r0, [pc, #100]	; (8000768 <MyRTOS_Update_ScheduleTable+0xb4>)
 8000704:	f7ff fde0 	bl	80002c8 <FIFO_Enqueue>
				ptask->TaskState = Ready;
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	2202      	movs	r2, #2
 800070c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
				break;
 8000710:	e026      	b.n	8000760 <MyRTOS_Update_ScheduleTable+0xac>
			}
			// If ptask priority > pnext_task (highest priority means lower value)
			if(ptask->Priority < pnext_task->Priority)
 8000712:	68bb      	ldr	r3, [r7, #8]
 8000714:	791a      	ldrb	r2, [r3, #4]
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	791b      	ldrb	r3, [r3, #4]
 800071a:	429a      	cmp	r2, r3
 800071c:	d208      	bcs.n	8000730 <MyRTOS_Update_ScheduleTable+0x7c>
			{
				FIFO_Enqueue(&Ready_Queue, ptask);
 800071e:	68b9      	ldr	r1, [r7, #8]
 8000720:	4811      	ldr	r0, [pc, #68]	; (8000768 <MyRTOS_Update_ScheduleTable+0xb4>)
 8000722:	f7ff fdd1 	bl	80002c8 <FIFO_Enqueue>
				ptask->TaskState = Ready;
 8000726:	68bb      	ldr	r3, [r7, #8]
 8000728:	2202      	movs	r2, #2
 800072a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
				break;
 800072e:	e017      	b.n	8000760 <MyRTOS_Update_ScheduleTable+0xac>
			}
			else if(ptask->Priority == pnext_task->Priority)
 8000730:	68bb      	ldr	r3, [r7, #8]
 8000732:	791a      	ldrb	r2, [r3, #4]
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	791b      	ldrb	r3, [r3, #4]
 8000738:	429a      	cmp	r2, r3
 800073a:	d110      	bne.n	800075e <MyRTOS_Update_ScheduleTable+0xaa>
			{
				FIFO_Enqueue(&Ready_Queue, ptask);
 800073c:	68b9      	ldr	r1, [r7, #8]
 800073e:	480a      	ldr	r0, [pc, #40]	; (8000768 <MyRTOS_Update_ScheduleTable+0xb4>)
 8000740:	f7ff fdc2 	bl	80002c8 <FIFO_Enqueue>
				ptask->TaskState = Ready;
 8000744:	68bb      	ldr	r3, [r7, #8]
 8000746:	2202      	movs	r2, #2
 8000748:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
				 */
				break;
			}
		}

		i++;
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	3301      	adds	r3, #1
 8000750:	60fb      	str	r3, [r7, #12]
	while(i < Os_Control.NoOfCreatedTasks)
 8000752:	4b06      	ldr	r3, [pc, #24]	; (800076c <MyRTOS_Update_ScheduleTable+0xb8>)
 8000754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000756:	68fa      	ldr	r2, [r7, #12]
 8000758:	429a      	cmp	r2, r3
 800075a:	d3bc      	bcc.n	80006d6 <MyRTOS_Update_ScheduleTable+0x22>
	}
}
 800075c:	e000      	b.n	8000760 <MyRTOS_Update_ScheduleTable+0xac>
				break;
 800075e:	bf00      	nop
}
 8000760:	bf00      	nop
 8000762:	3710      	adds	r7, #16
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	2000001c 	.word	0x2000001c
 800076c:	200000a4 	.word	0x200000a4

08000770 <MyRTOS_Decide_WhatNext>:

// Handler mode
static void MyRTOS_Decide_WhatNext()
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
	// If ready queue is empty and Os_Control.CurrentTask != suspend
	if(Ready_Queue.count == 0 && Os_Control.CurrentTask->TaskState != Suspend)
 8000774:	4b1e      	ldr	r3, [pc, #120]	; (80007f0 <MyRTOS_Decide_WhatNext+0x80>)
 8000776:	685b      	ldr	r3, [r3, #4]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d115      	bne.n	80007a8 <MyRTOS_Decide_WhatNext+0x38>
 800077c:	4b1d      	ldr	r3, [pc, #116]	; (80007f4 <MyRTOS_Decide_WhatNext+0x84>)
 800077e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000780:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000784:	2b00      	cmp	r3, #0
 8000786:	d00f      	beq.n	80007a8 <MyRTOS_Decide_WhatNext+0x38>
	{
		Os_Control.CurrentTask->TaskState = Running;
 8000788:	4b1a      	ldr	r3, [pc, #104]	; (80007f4 <MyRTOS_Decide_WhatNext+0x84>)
 800078a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800078c:	2203      	movs	r2, #3
 800078e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		// Add current task again(round robin)
		FIFO_Enqueue(&Ready_Queue, Os_Control.CurrentTask);
 8000792:	4b18      	ldr	r3, [pc, #96]	; (80007f4 <MyRTOS_Decide_WhatNext+0x84>)
 8000794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000796:	4619      	mov	r1, r3
 8000798:	4815      	ldr	r0, [pc, #84]	; (80007f0 <MyRTOS_Decide_WhatNext+0x80>)
 800079a:	f7ff fd95 	bl	80002c8 <FIFO_Enqueue>
		Os_Control.NextTask = Os_Control.CurrentTask;
 800079e:	4b15      	ldr	r3, [pc, #84]	; (80007f4 <MyRTOS_Decide_WhatNext+0x84>)
 80007a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80007a2:	4a14      	ldr	r2, [pc, #80]	; (80007f4 <MyRTOS_Decide_WhatNext+0x84>)
 80007a4:	63d3      	str	r3, [r2, #60]	; 0x3c
		{
			FIFO_Enqueue(&Ready_Queue, Os_Control.CurrentTask);
			Os_Control.CurrentTask->TaskState = Ready;
		}
	}
}
 80007a6:	e021      	b.n	80007ec <MyRTOS_Decide_WhatNext+0x7c>
		FIFO_Dequeue(&Ready_Queue, &Os_Control.NextTask);
 80007a8:	4913      	ldr	r1, [pc, #76]	; (80007f8 <MyRTOS_Decide_WhatNext+0x88>)
 80007aa:	4811      	ldr	r0, [pc, #68]	; (80007f0 <MyRTOS_Decide_WhatNext+0x80>)
 80007ac:	f7ff fdca 	bl	8000344 <FIFO_Dequeue>
		Os_Control.NextTask->TaskState = Running;
 80007b0:	4b10      	ldr	r3, [pc, #64]	; (80007f4 <MyRTOS_Decide_WhatNext+0x84>)
 80007b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80007b4:	2203      	movs	r2, #3
 80007b6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		if(Os_Control.CurrentTask->Priority == Os_Control.NextTask->Priority
 80007ba:	4b0e      	ldr	r3, [pc, #56]	; (80007f4 <MyRTOS_Decide_WhatNext+0x84>)
 80007bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80007be:	791a      	ldrb	r2, [r3, #4]
 80007c0:	4b0c      	ldr	r3, [pc, #48]	; (80007f4 <MyRTOS_Decide_WhatNext+0x84>)
 80007c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80007c4:	791b      	ldrb	r3, [r3, #4]
 80007c6:	429a      	cmp	r2, r3
 80007c8:	d110      	bne.n	80007ec <MyRTOS_Decide_WhatNext+0x7c>
							&& Os_Control.CurrentTask->TaskState != Suspend)
 80007ca:	4b0a      	ldr	r3, [pc, #40]	; (80007f4 <MyRTOS_Decide_WhatNext+0x84>)
 80007cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80007ce:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d00a      	beq.n	80007ec <MyRTOS_Decide_WhatNext+0x7c>
			FIFO_Enqueue(&Ready_Queue, Os_Control.CurrentTask);
 80007d6:	4b07      	ldr	r3, [pc, #28]	; (80007f4 <MyRTOS_Decide_WhatNext+0x84>)
 80007d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80007da:	4619      	mov	r1, r3
 80007dc:	4804      	ldr	r0, [pc, #16]	; (80007f0 <MyRTOS_Decide_WhatNext+0x80>)
 80007de:	f7ff fd73 	bl	80002c8 <FIFO_Enqueue>
			Os_Control.CurrentTask->TaskState = Ready;
 80007e2:	4b04      	ldr	r3, [pc, #16]	; (80007f4 <MyRTOS_Decide_WhatNext+0x84>)
 80007e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80007e6:	2202      	movs	r2, #2
 80007e8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80007ec:	bf00      	nop
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	2000001c 	.word	0x2000001c
 80007f4:	200000a4 	.word	0x200000a4
 80007f8:	200000e0 	.word	0x200000e0

080007fc <OS_SVC>:

// Handler mode
void OS_SVC(uint32_t* Stack_Frame)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
	// R0 is a pointer to OS_SVC_Set stack frame
	// R0, R1, R2, R3, R12, LR, Return Address (PC), xPSR
	uint8_t SVC_Number;

	SVC_Number = *((uint8_t*)(((uint8_t*)Stack_Frame[6]) - 2));
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	3318      	adds	r3, #24
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	3b02      	subs	r3, #2
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	73fb      	strb	r3, [r7, #15]

	switch(SVC_Number)
 8000810:	7bfb      	ldrb	r3, [r7, #15]
 8000812:	2b01      	cmp	r3, #1
 8000814:	db19      	blt.n	800084a <OS_SVC+0x4e>
 8000816:	2b02      	cmp	r3, #2
 8000818:	dd01      	ble.n	800081e <OS_SVC+0x22>
 800081a:	2b03      	cmp	r3, #3
					Trigger_OS_PendSV();
				}
			}
			break;
		case SVC_TaskWaitingTime: // Waiting Time
			break;
 800081c:	e015      	b.n	800084a <OS_SVC+0x4e>
			MyRTOS_Update_ScheduleTable();
 800081e:	f7ff ff49 	bl	80006b4 <MyRTOS_Update_ScheduleTable>
			if(Os_Control.OS_Mode == OS_Running)
 8000822:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <OS_SVC+0x58>)
 8000824:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000828:	2b01      	cmp	r3, #1
 800082a:	d10d      	bne.n	8000848 <OS_SVC+0x4c>
				if(strcmp((char*)Os_Control.CurrentTask->TaskName, "Idle_Task"))
 800082c:	4b09      	ldr	r3, [pc, #36]	; (8000854 <OS_SVC+0x58>)
 800082e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000830:	331c      	adds	r3, #28
 8000832:	4909      	ldr	r1, [pc, #36]	; (8000858 <OS_SVC+0x5c>)
 8000834:	4618      	mov	r0, r3
 8000836:	f7ff fc9b 	bl	8000170 <strcmp>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d003      	beq.n	8000848 <OS_SVC+0x4c>
					MyRTOS_Decide_WhatNext();
 8000840:	f7ff ff96 	bl	8000770 <MyRTOS_Decide_WhatNext>
					Trigger_OS_PendSV();
 8000844:	f7ff fd0a 	bl	800025c <Trigger_OS_PendSV>
			break;
 8000848:	bf00      	nop
	}
}
 800084a:	bf00      	nop
 800084c:	3710      	adds	r7, #16
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	200000a4 	.word	0x200000a4
 8000858:	08000e40 	.word	0x08000e40

0800085c <MyRTOS_OS_SVC_Set>:

// Tread mode
static void MyRTOS_OS_SVC_Set(SVC_ID ID)
{
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	4603      	mov	r3, r0
 8000864:	71fb      	strb	r3, [r7, #7]
	switch(ID)
 8000866:	79fb      	ldrb	r3, [r7, #7]
 8000868:	2b02      	cmp	r3, #2
 800086a:	d006      	beq.n	800087a <MyRTOS_OS_SVC_Set+0x1e>
 800086c:	2b03      	cmp	r3, #3
 800086e:	d006      	beq.n	800087e <MyRTOS_OS_SVC_Set+0x22>
 8000870:	2b01      	cmp	r3, #1
 8000872:	d000      	beq.n	8000876 <MyRTOS_OS_SVC_Set+0x1a>
			break;
		case SVC_TaskWaitingTime: // Waiting Time
			__asm volatile ("SVC #0x03");
			break;
	}
}
 8000874:	e005      	b.n	8000882 <MyRTOS_OS_SVC_Set+0x26>
			__asm volatile ("SVC #0x01");
 8000876:	df01      	svc	1
			break;
 8000878:	e003      	b.n	8000882 <MyRTOS_OS_SVC_Set+0x26>
			__asm volatile ("SVC #0x02");
 800087a:	df02      	svc	2
			break;
 800087c:	e001      	b.n	8000882 <MyRTOS_OS_SVC_Set+0x26>
			__asm volatile ("SVC #0x03");
 800087e:	df03      	svc	3
			break;
 8000880:	bf00      	nop
}
 8000882:	bf00      	nop
 8000884:	370c      	adds	r7, #12
 8000886:	46bd      	mov	sp, r7
 8000888:	bc80      	pop	{r7}
 800088a:	4770      	bx	lr

0800088c <PendSV_Handler>:
{
	/*
	 * Save context of current task
	 */
	// Get the current task PSP from CPU register as CPU pushes(xPSR,LR,...,R0)
	OS_GET_PSP(Os_Control.CurrentTask->Current_PSP);
 800088c:	4b5a      	ldr	r3, [pc, #360]	; (80009f8 <PendSV_Handler+0x16c>)
 800088e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000890:	f3ef 8009 	mrs	r0, PSP
 8000894:	4602      	mov	r2, r0
 8000896:	619a      	str	r2, [r3, #24]

	// Using this Current_PSP pointer to save R4:R11
	Os_Control.CurrentTask->Current_PSP--;
 8000898:	4b57      	ldr	r3, [pc, #348]	; (80009f8 <PendSV_Handler+0x16c>)
 800089a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800089c:	699a      	ldr	r2, [r3, #24]
 800089e:	3a04      	subs	r2, #4
 80008a0:	619a      	str	r2, [r3, #24]
	__asm volatile ("MOV %0,R4" : "=r" (*(Os_Control.CurrentTask->Current_PSP)));
 80008a2:	4b55      	ldr	r3, [pc, #340]	; (80009f8 <PendSV_Handler+0x16c>)
 80008a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008a6:	699b      	ldr	r3, [r3, #24]
 80008a8:	4622      	mov	r2, r4
 80008aa:	601a      	str	r2, [r3, #0]
	Os_Control.CurrentTask->Current_PSP--;
 80008ac:	4b52      	ldr	r3, [pc, #328]	; (80009f8 <PendSV_Handler+0x16c>)
 80008ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008b0:	699a      	ldr	r2, [r3, #24]
 80008b2:	3a04      	subs	r2, #4
 80008b4:	619a      	str	r2, [r3, #24]
	__asm volatile ("MOV %0,R5" : "=r" (*(Os_Control.CurrentTask->Current_PSP)));
 80008b6:	4b50      	ldr	r3, [pc, #320]	; (80009f8 <PendSV_Handler+0x16c>)
 80008b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008ba:	699b      	ldr	r3, [r3, #24]
 80008bc:	462a      	mov	r2, r5
 80008be:	601a      	str	r2, [r3, #0]
	Os_Control.CurrentTask->Current_PSP--;
 80008c0:	4b4d      	ldr	r3, [pc, #308]	; (80009f8 <PendSV_Handler+0x16c>)
 80008c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008c4:	699a      	ldr	r2, [r3, #24]
 80008c6:	3a04      	subs	r2, #4
 80008c8:	619a      	str	r2, [r3, #24]
	__asm volatile ("MOV %0,R6" : "=r" (*(Os_Control.CurrentTask->Current_PSP)));
 80008ca:	4b4b      	ldr	r3, [pc, #300]	; (80009f8 <PendSV_Handler+0x16c>)
 80008cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008ce:	699b      	ldr	r3, [r3, #24]
 80008d0:	4632      	mov	r2, r6
 80008d2:	601a      	str	r2, [r3, #0]
	Os_Control.CurrentTask->Current_PSP--;
 80008d4:	4b48      	ldr	r3, [pc, #288]	; (80009f8 <PendSV_Handler+0x16c>)
 80008d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008d8:	699a      	ldr	r2, [r3, #24]
 80008da:	3a04      	subs	r2, #4
 80008dc:	619a      	str	r2, [r3, #24]
	__asm volatile ("MOV %0,R7" : "=r" (*(Os_Control.CurrentTask->Current_PSP)));
 80008de:	4b46      	ldr	r3, [pc, #280]	; (80009f8 <PendSV_Handler+0x16c>)
 80008e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008e2:	699b      	ldr	r3, [r3, #24]
 80008e4:	463a      	mov	r2, r7
 80008e6:	601a      	str	r2, [r3, #0]
	Os_Control.CurrentTask->Current_PSP--;
 80008e8:	4b43      	ldr	r3, [pc, #268]	; (80009f8 <PendSV_Handler+0x16c>)
 80008ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008ec:	699a      	ldr	r2, [r3, #24]
 80008ee:	3a04      	subs	r2, #4
 80008f0:	619a      	str	r2, [r3, #24]
	__asm volatile ("MOV %0,R8" : "=r" (*(Os_Control.CurrentTask->Current_PSP)));
 80008f2:	4b41      	ldr	r3, [pc, #260]	; (80009f8 <PendSV_Handler+0x16c>)
 80008f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008f6:	699b      	ldr	r3, [r3, #24]
 80008f8:	4642      	mov	r2, r8
 80008fa:	601a      	str	r2, [r3, #0]
	Os_Control.CurrentTask->Current_PSP--;
 80008fc:	4b3e      	ldr	r3, [pc, #248]	; (80009f8 <PendSV_Handler+0x16c>)
 80008fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000900:	699a      	ldr	r2, [r3, #24]
 8000902:	3a04      	subs	r2, #4
 8000904:	619a      	str	r2, [r3, #24]
	__asm volatile ("MOV %0,R9" : "=r" (*(Os_Control.CurrentTask->Current_PSP)));
 8000906:	4b3c      	ldr	r3, [pc, #240]	; (80009f8 <PendSV_Handler+0x16c>)
 8000908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800090a:	699b      	ldr	r3, [r3, #24]
 800090c:	464a      	mov	r2, r9
 800090e:	601a      	str	r2, [r3, #0]
	Os_Control.CurrentTask->Current_PSP--;
 8000910:	4b39      	ldr	r3, [pc, #228]	; (80009f8 <PendSV_Handler+0x16c>)
 8000912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000914:	699a      	ldr	r2, [r3, #24]
 8000916:	3a04      	subs	r2, #4
 8000918:	619a      	str	r2, [r3, #24]
	__asm volatile ("MOV %0,R10" : "=r" (*(Os_Control.CurrentTask->Current_PSP)));
 800091a:	4b37      	ldr	r3, [pc, #220]	; (80009f8 <PendSV_Handler+0x16c>)
 800091c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800091e:	699b      	ldr	r3, [r3, #24]
 8000920:	4652      	mov	r2, sl
 8000922:	601a      	str	r2, [r3, #0]
	Os_Control.CurrentTask->Current_PSP--;
 8000924:	4b34      	ldr	r3, [pc, #208]	; (80009f8 <PendSV_Handler+0x16c>)
 8000926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000928:	699a      	ldr	r2, [r3, #24]
 800092a:	3a04      	subs	r2, #4
 800092c:	619a      	str	r2, [r3, #24]
	__asm volatile ("MOV %0,R11" : "=r" (*(Os_Control.CurrentTask->Current_PSP)));
 800092e:	4b32      	ldr	r3, [pc, #200]	; (80009f8 <PendSV_Handler+0x16c>)
 8000930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000932:	699b      	ldr	r3, [r3, #24]
 8000934:	465a      	mov	r2, fp
 8000936:	601a      	str	r2, [r3, #0]
	 */

	/*
	 * Restore context of next task
	 */
	Os_Control.CurrentTask = Os_Control.NextTask;
 8000938:	4b2f      	ldr	r3, [pc, #188]	; (80009f8 <PendSV_Handler+0x16c>)
 800093a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800093c:	4a2e      	ldr	r2, [pc, #184]	; (80009f8 <PendSV_Handler+0x16c>)
 800093e:	6393      	str	r3, [r2, #56]	; 0x38
	Os_Control.NextTask = NULL;
 8000940:	4b2d      	ldr	r3, [pc, #180]	; (80009f8 <PendSV_Handler+0x16c>)
 8000942:	2200      	movs	r2, #0
 8000944:	63da      	str	r2, [r3, #60]	; 0x3c

	__asm volatile ("MOV R11,%0" : : "r" (*(Os_Control.CurrentTask->Current_PSP)));
 8000946:	4b2c      	ldr	r3, [pc, #176]	; (80009f8 <PendSV_Handler+0x16c>)
 8000948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800094a:	699b      	ldr	r3, [r3, #24]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	469b      	mov	fp, r3
	Os_Control.CurrentTask->Current_PSP++;
 8000950:	4b29      	ldr	r3, [pc, #164]	; (80009f8 <PendSV_Handler+0x16c>)
 8000952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000954:	699a      	ldr	r2, [r3, #24]
 8000956:	3204      	adds	r2, #4
 8000958:	619a      	str	r2, [r3, #24]
	__asm volatile ("MOV R10,%0" : : "r" (*(Os_Control.CurrentTask->Current_PSP)));
 800095a:	4b27      	ldr	r3, [pc, #156]	; (80009f8 <PendSV_Handler+0x16c>)
 800095c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800095e:	699b      	ldr	r3, [r3, #24]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	469a      	mov	sl, r3
	Os_Control.CurrentTask->Current_PSP++;
 8000964:	4b24      	ldr	r3, [pc, #144]	; (80009f8 <PendSV_Handler+0x16c>)
 8000966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000968:	699a      	ldr	r2, [r3, #24]
 800096a:	3204      	adds	r2, #4
 800096c:	619a      	str	r2, [r3, #24]
	__asm volatile ("MOV R9,%0" : : "r" (*(Os_Control.CurrentTask->Current_PSP)));
 800096e:	4b22      	ldr	r3, [pc, #136]	; (80009f8 <PendSV_Handler+0x16c>)
 8000970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000972:	699b      	ldr	r3, [r3, #24]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4699      	mov	r9, r3
	Os_Control.CurrentTask->Current_PSP++;
 8000978:	4b1f      	ldr	r3, [pc, #124]	; (80009f8 <PendSV_Handler+0x16c>)
 800097a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800097c:	699a      	ldr	r2, [r3, #24]
 800097e:	3204      	adds	r2, #4
 8000980:	619a      	str	r2, [r3, #24]
	__asm volatile ("MOV R8,%0" : : "r" (*(Os_Control.CurrentTask->Current_PSP)));
 8000982:	4b1d      	ldr	r3, [pc, #116]	; (80009f8 <PendSV_Handler+0x16c>)
 8000984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000986:	699b      	ldr	r3, [r3, #24]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4698      	mov	r8, r3
	Os_Control.CurrentTask->Current_PSP++;
 800098c:	4b1a      	ldr	r3, [pc, #104]	; (80009f8 <PendSV_Handler+0x16c>)
 800098e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000990:	699a      	ldr	r2, [r3, #24]
 8000992:	3204      	adds	r2, #4
 8000994:	619a      	str	r2, [r3, #24]
	__asm volatile ("MOV R7,%0" : : "r" (*(Os_Control.CurrentTask->Current_PSP)));
 8000996:	4b18      	ldr	r3, [pc, #96]	; (80009f8 <PendSV_Handler+0x16c>)
 8000998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800099a:	699b      	ldr	r3, [r3, #24]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	461f      	mov	r7, r3
	Os_Control.CurrentTask->Current_PSP++;
 80009a0:	4b15      	ldr	r3, [pc, #84]	; (80009f8 <PendSV_Handler+0x16c>)
 80009a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009a4:	699a      	ldr	r2, [r3, #24]
 80009a6:	3204      	adds	r2, #4
 80009a8:	619a      	str	r2, [r3, #24]
	__asm volatile ("MOV R6,%0" : : "r" (*(Os_Control.CurrentTask->Current_PSP)));
 80009aa:	4b13      	ldr	r3, [pc, #76]	; (80009f8 <PendSV_Handler+0x16c>)
 80009ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009ae:	699b      	ldr	r3, [r3, #24]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	461e      	mov	r6, r3
	Os_Control.CurrentTask->Current_PSP++;
 80009b4:	4b10      	ldr	r3, [pc, #64]	; (80009f8 <PendSV_Handler+0x16c>)
 80009b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009b8:	699a      	ldr	r2, [r3, #24]
 80009ba:	3204      	adds	r2, #4
 80009bc:	619a      	str	r2, [r3, #24]
	__asm volatile ("MOV R5,%0" : : "r" (*(Os_Control.CurrentTask->Current_PSP)));
 80009be:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <PendSV_Handler+0x16c>)
 80009c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009c2:	699b      	ldr	r3, [r3, #24]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	461d      	mov	r5, r3
	Os_Control.CurrentTask->Current_PSP++;
 80009c8:	4b0b      	ldr	r3, [pc, #44]	; (80009f8 <PendSV_Handler+0x16c>)
 80009ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009cc:	699a      	ldr	r2, [r3, #24]
 80009ce:	3204      	adds	r2, #4
 80009d0:	619a      	str	r2, [r3, #24]
	__asm volatile ("MOV R4,%0" : : "r" (*(Os_Control.CurrentTask->Current_PSP)));
 80009d2:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <PendSV_Handler+0x16c>)
 80009d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009d6:	699b      	ldr	r3, [r3, #24]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	461c      	mov	r4, r3
	Os_Control.CurrentTask->Current_PSP++;
 80009dc:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <PendSV_Handler+0x16c>)
 80009de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009e0:	699a      	ldr	r2, [r3, #24]
 80009e2:	3204      	adds	r2, #4
 80009e4:	619a      	str	r2, [r3, #24]

	// Update PSP with the stack of the task to be run
	OS_SET_PSP(Os_Control.CurrentTask->Current_PSP);
 80009e6:	4b04      	ldr	r3, [pc, #16]	; (80009f8 <PendSV_Handler+0x16c>)
 80009e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009ea:	699b      	ldr	r3, [r3, #24]
 80009ec:	4618      	mov	r0, r3
 80009ee:	f380 8809 	msr	PSP, r0
	__asm volatile ("BX LR");
 80009f2:	4770      	bx	lr
}
 80009f4:	bf00      	nop
 80009f6:	bf00      	nop
 80009f8:	200000a4 	.word	0x200000a4

080009fc <SysTick_Handler>:

void SysTick_Handler()
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
	Systick_flag ^= 1;
 8000a00:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <SysTick_Handler+0x20>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	f083 0301 	eor.w	r3, r3, #1
 8000a0a:	b2da      	uxtb	r2, r3
 8000a0c:	4b03      	ldr	r3, [pc, #12]	; (8000a1c <SysTick_Handler+0x20>)
 8000a0e:	701a      	strb	r2, [r3, #0]

	// Decide what's next
	MyRTOS_Decide_WhatNext();
 8000a10:	f7ff feae 	bl	8000770 <MyRTOS_Decide_WhatNext>
	// trigger OS_PendSV (context switching / restore)
	Trigger_OS_PendSV();
 8000a14:	f7ff fc22 	bl	800025c <Trigger_OS_PendSV>
}
 8000a18:	bf00      	nop
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	200000a0 	.word	0x200000a0

08000a20 <EXTI0_IRQHandler>:
* ===============================================
* ISR Functions
* ===============================================
*/
void EXTI0_IRQHandler(void)  /* EXTI Line0 interrupt */
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
	//Cleared by writing a ‘1’ into the bit Pending register (EXTI_PR)
	EXTI->PR |= (1 << 0);
 8000a24:	4b05      	ldr	r3, [pc, #20]	; (8000a3c <EXTI0_IRQHandler+0x1c>)
 8000a26:	695b      	ldr	r3, [r3, #20]
 8000a28:	4a04      	ldr	r2, [pc, #16]	; (8000a3c <EXTI0_IRQHandler+0x1c>)
 8000a2a:	f043 0301 	orr.w	r3, r3, #1
 8000a2e:	6153      	str	r3, [r2, #20]

	//Call IRQ CallBack
	GP_IRQ_CallBack[0]();
 8000a30:	4b03      	ldr	r3, [pc, #12]	; (8000a40 <EXTI0_IRQHandler+0x20>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4798      	blx	r3
}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40010400 	.word	0x40010400
 8000a40:	200000e8 	.word	0x200000e8

08000a44 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)  /* EXTI Line1 interrupt */
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
	//Cleared by writing a ‘1’ into the bit Pending register (EXTI_PR)
	EXTI->PR |= (1 << 1);
 8000a48:	4b05      	ldr	r3, [pc, #20]	; (8000a60 <EXTI1_IRQHandler+0x1c>)
 8000a4a:	695b      	ldr	r3, [r3, #20]
 8000a4c:	4a04      	ldr	r2, [pc, #16]	; (8000a60 <EXTI1_IRQHandler+0x1c>)
 8000a4e:	f043 0302 	orr.w	r3, r3, #2
 8000a52:	6153      	str	r3, [r2, #20]

	//Call IRQ CallBack
	GP_IRQ_CallBack[1]();
 8000a54:	4b03      	ldr	r3, [pc, #12]	; (8000a64 <EXTI1_IRQHandler+0x20>)
 8000a56:	685b      	ldr	r3, [r3, #4]
 8000a58:	4798      	blx	r3
}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40010400 	.word	0x40010400
 8000a64:	200000e8 	.word	0x200000e8

08000a68 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)  /* EXTI Line2 interrupt */
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
	//Cleared by writing a ‘1’ into the bit Pending register (EXTI_PR)
	EXTI->PR |= (1 << 2);
 8000a6c:	4b05      	ldr	r3, [pc, #20]	; (8000a84 <EXTI2_IRQHandler+0x1c>)
 8000a6e:	695b      	ldr	r3, [r3, #20]
 8000a70:	4a04      	ldr	r2, [pc, #16]	; (8000a84 <EXTI2_IRQHandler+0x1c>)
 8000a72:	f043 0304 	orr.w	r3, r3, #4
 8000a76:	6153      	str	r3, [r2, #20]

	//Call IRQ CallBack
	GP_IRQ_CallBack[2]();
 8000a78:	4b03      	ldr	r3, [pc, #12]	; (8000a88 <EXTI2_IRQHandler+0x20>)
 8000a7a:	689b      	ldr	r3, [r3, #8]
 8000a7c:	4798      	blx	r3
}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40010400 	.word	0x40010400
 8000a88:	200000e8 	.word	0x200000e8

08000a8c <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)  /* EXTI Line3 interrupt  */
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
	//Cleared by writing a ‘1’ into the bit Pending register (EXTI_PR)
	EXTI->PR |= (1 << 3);
 8000a90:	4b05      	ldr	r3, [pc, #20]	; (8000aa8 <EXTI3_IRQHandler+0x1c>)
 8000a92:	695b      	ldr	r3, [r3, #20]
 8000a94:	4a04      	ldr	r2, [pc, #16]	; (8000aa8 <EXTI3_IRQHandler+0x1c>)
 8000a96:	f043 0308 	orr.w	r3, r3, #8
 8000a9a:	6153      	str	r3, [r2, #20]

	//Call IRQ CallBack
	GP_IRQ_CallBack[3]();
 8000a9c:	4b03      	ldr	r3, [pc, #12]	; (8000aac <EXTI3_IRQHandler+0x20>)
 8000a9e:	68db      	ldr	r3, [r3, #12]
 8000aa0:	4798      	blx	r3
}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40010400 	.word	0x40010400
 8000aac:	200000e8 	.word	0x200000e8

08000ab0 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)  /* EXTI Line4 interrupt  */
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
	//Cleared by writing a ‘1’ into the bit Pending register (EXTI_PR)
	EXTI->PR |= (1 << 4);
 8000ab4:	4b05      	ldr	r3, [pc, #20]	; (8000acc <EXTI4_IRQHandler+0x1c>)
 8000ab6:	695b      	ldr	r3, [r3, #20]
 8000ab8:	4a04      	ldr	r2, [pc, #16]	; (8000acc <EXTI4_IRQHandler+0x1c>)
 8000aba:	f043 0310 	orr.w	r3, r3, #16
 8000abe:	6153      	str	r3, [r2, #20]

	//Call IRQ CallBack
	GP_IRQ_CallBack[4]();
 8000ac0:	4b03      	ldr	r3, [pc, #12]	; (8000ad0 <EXTI4_IRQHandler+0x20>)
 8000ac2:	691b      	ldr	r3, [r3, #16]
 8000ac4:	4798      	blx	r3
}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40010400 	.word	0x40010400
 8000ad0:	200000e8 	.word	0x200000e8

08000ad4 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void) /* EXTI Line[9:5] interrupts */
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
	if(EXTI->PR & (1 << 5)) { EXTI->PR |= (1 << 5);	GP_IRQ_CallBack[5](); }
 8000ad8:	4b26      	ldr	r3, [pc, #152]	; (8000b74 <EXTI9_5_IRQHandler+0xa0>)
 8000ada:	695b      	ldr	r3, [r3, #20]
 8000adc:	f003 0320 	and.w	r3, r3, #32
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d008      	beq.n	8000af6 <EXTI9_5_IRQHandler+0x22>
 8000ae4:	4b23      	ldr	r3, [pc, #140]	; (8000b74 <EXTI9_5_IRQHandler+0xa0>)
 8000ae6:	695b      	ldr	r3, [r3, #20]
 8000ae8:	4a22      	ldr	r2, [pc, #136]	; (8000b74 <EXTI9_5_IRQHandler+0xa0>)
 8000aea:	f043 0320 	orr.w	r3, r3, #32
 8000aee:	6153      	str	r3, [r2, #20]
 8000af0:	4b21      	ldr	r3, [pc, #132]	; (8000b78 <EXTI9_5_IRQHandler+0xa4>)
 8000af2:	695b      	ldr	r3, [r3, #20]
 8000af4:	4798      	blx	r3
	if(EXTI->PR & (1 << 6)) { EXTI->PR |= (1 << 6);	GP_IRQ_CallBack[6](); }
 8000af6:	4b1f      	ldr	r3, [pc, #124]	; (8000b74 <EXTI9_5_IRQHandler+0xa0>)
 8000af8:	695b      	ldr	r3, [r3, #20]
 8000afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d008      	beq.n	8000b14 <EXTI9_5_IRQHandler+0x40>
 8000b02:	4b1c      	ldr	r3, [pc, #112]	; (8000b74 <EXTI9_5_IRQHandler+0xa0>)
 8000b04:	695b      	ldr	r3, [r3, #20]
 8000b06:	4a1b      	ldr	r2, [pc, #108]	; (8000b74 <EXTI9_5_IRQHandler+0xa0>)
 8000b08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b0c:	6153      	str	r3, [r2, #20]
 8000b0e:	4b1a      	ldr	r3, [pc, #104]	; (8000b78 <EXTI9_5_IRQHandler+0xa4>)
 8000b10:	699b      	ldr	r3, [r3, #24]
 8000b12:	4798      	blx	r3
	if(EXTI->PR & (1 << 7)) { EXTI->PR |= (1 << 7);	GP_IRQ_CallBack[7](); }
 8000b14:	4b17      	ldr	r3, [pc, #92]	; (8000b74 <EXTI9_5_IRQHandler+0xa0>)
 8000b16:	695b      	ldr	r3, [r3, #20]
 8000b18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d008      	beq.n	8000b32 <EXTI9_5_IRQHandler+0x5e>
 8000b20:	4b14      	ldr	r3, [pc, #80]	; (8000b74 <EXTI9_5_IRQHandler+0xa0>)
 8000b22:	695b      	ldr	r3, [r3, #20]
 8000b24:	4a13      	ldr	r2, [pc, #76]	; (8000b74 <EXTI9_5_IRQHandler+0xa0>)
 8000b26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b2a:	6153      	str	r3, [r2, #20]
 8000b2c:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <EXTI9_5_IRQHandler+0xa4>)
 8000b2e:	69db      	ldr	r3, [r3, #28]
 8000b30:	4798      	blx	r3
	if(EXTI->PR & (1 << 8)) { EXTI->PR |= (1 << 8);	GP_IRQ_CallBack[8](); }
 8000b32:	4b10      	ldr	r3, [pc, #64]	; (8000b74 <EXTI9_5_IRQHandler+0xa0>)
 8000b34:	695b      	ldr	r3, [r3, #20]
 8000b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d008      	beq.n	8000b50 <EXTI9_5_IRQHandler+0x7c>
 8000b3e:	4b0d      	ldr	r3, [pc, #52]	; (8000b74 <EXTI9_5_IRQHandler+0xa0>)
 8000b40:	695b      	ldr	r3, [r3, #20]
 8000b42:	4a0c      	ldr	r2, [pc, #48]	; (8000b74 <EXTI9_5_IRQHandler+0xa0>)
 8000b44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b48:	6153      	str	r3, [r2, #20]
 8000b4a:	4b0b      	ldr	r3, [pc, #44]	; (8000b78 <EXTI9_5_IRQHandler+0xa4>)
 8000b4c:	6a1b      	ldr	r3, [r3, #32]
 8000b4e:	4798      	blx	r3
	if(EXTI->PR & (1 << 9)) { EXTI->PR |= (1 << 9);	GP_IRQ_CallBack[9](); }
 8000b50:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <EXTI9_5_IRQHandler+0xa0>)
 8000b52:	695b      	ldr	r3, [r3, #20]
 8000b54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d008      	beq.n	8000b6e <EXTI9_5_IRQHandler+0x9a>
 8000b5c:	4b05      	ldr	r3, [pc, #20]	; (8000b74 <EXTI9_5_IRQHandler+0xa0>)
 8000b5e:	695b      	ldr	r3, [r3, #20]
 8000b60:	4a04      	ldr	r2, [pc, #16]	; (8000b74 <EXTI9_5_IRQHandler+0xa0>)
 8000b62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b66:	6153      	str	r3, [r2, #20]
 8000b68:	4b03      	ldr	r3, [pc, #12]	; (8000b78 <EXTI9_5_IRQHandler+0xa4>)
 8000b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b6c:	4798      	blx	r3
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40010400 	.word	0x40010400
 8000b78:	200000e8 	.word	0x200000e8

08000b7c <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void) /* EXTI Line[15:10] interrupts */
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
	if(EXTI->PR & (1 << 10)) { EXTI->PR |= (1 << 10);	GP_IRQ_CallBack[10](); }
 8000b80:	4b2d      	ldr	r3, [pc, #180]	; (8000c38 <EXTI15_10_IRQHandler+0xbc>)
 8000b82:	695b      	ldr	r3, [r3, #20]
 8000b84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d008      	beq.n	8000b9e <EXTI15_10_IRQHandler+0x22>
 8000b8c:	4b2a      	ldr	r3, [pc, #168]	; (8000c38 <EXTI15_10_IRQHandler+0xbc>)
 8000b8e:	695b      	ldr	r3, [r3, #20]
 8000b90:	4a29      	ldr	r2, [pc, #164]	; (8000c38 <EXTI15_10_IRQHandler+0xbc>)
 8000b92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b96:	6153      	str	r3, [r2, #20]
 8000b98:	4b28      	ldr	r3, [pc, #160]	; (8000c3c <EXTI15_10_IRQHandler+0xc0>)
 8000b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b9c:	4798      	blx	r3
	if(EXTI->PR & (1 << 11)) { EXTI->PR |= (1 << 11);	GP_IRQ_CallBack[11](); }
 8000b9e:	4b26      	ldr	r3, [pc, #152]	; (8000c38 <EXTI15_10_IRQHandler+0xbc>)
 8000ba0:	695b      	ldr	r3, [r3, #20]
 8000ba2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d008      	beq.n	8000bbc <EXTI15_10_IRQHandler+0x40>
 8000baa:	4b23      	ldr	r3, [pc, #140]	; (8000c38 <EXTI15_10_IRQHandler+0xbc>)
 8000bac:	695b      	ldr	r3, [r3, #20]
 8000bae:	4a22      	ldr	r2, [pc, #136]	; (8000c38 <EXTI15_10_IRQHandler+0xbc>)
 8000bb0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000bb4:	6153      	str	r3, [r2, #20]
 8000bb6:	4b21      	ldr	r3, [pc, #132]	; (8000c3c <EXTI15_10_IRQHandler+0xc0>)
 8000bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bba:	4798      	blx	r3
	if(EXTI->PR & (1 << 12)) { EXTI->PR |= (1 << 12);	GP_IRQ_CallBack[12](); }
 8000bbc:	4b1e      	ldr	r3, [pc, #120]	; (8000c38 <EXTI15_10_IRQHandler+0xbc>)
 8000bbe:	695b      	ldr	r3, [r3, #20]
 8000bc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d008      	beq.n	8000bda <EXTI15_10_IRQHandler+0x5e>
 8000bc8:	4b1b      	ldr	r3, [pc, #108]	; (8000c38 <EXTI15_10_IRQHandler+0xbc>)
 8000bca:	695b      	ldr	r3, [r3, #20]
 8000bcc:	4a1a      	ldr	r2, [pc, #104]	; (8000c38 <EXTI15_10_IRQHandler+0xbc>)
 8000bce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bd2:	6153      	str	r3, [r2, #20]
 8000bd4:	4b19      	ldr	r3, [pc, #100]	; (8000c3c <EXTI15_10_IRQHandler+0xc0>)
 8000bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd8:	4798      	blx	r3
	if(EXTI->PR & (1 << 13)) { EXTI->PR |= (1 << 13);	GP_IRQ_CallBack[13](); }
 8000bda:	4b17      	ldr	r3, [pc, #92]	; (8000c38 <EXTI15_10_IRQHandler+0xbc>)
 8000bdc:	695b      	ldr	r3, [r3, #20]
 8000bde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d008      	beq.n	8000bf8 <EXTI15_10_IRQHandler+0x7c>
 8000be6:	4b14      	ldr	r3, [pc, #80]	; (8000c38 <EXTI15_10_IRQHandler+0xbc>)
 8000be8:	695b      	ldr	r3, [r3, #20]
 8000bea:	4a13      	ldr	r2, [pc, #76]	; (8000c38 <EXTI15_10_IRQHandler+0xbc>)
 8000bec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000bf0:	6153      	str	r3, [r2, #20]
 8000bf2:	4b12      	ldr	r3, [pc, #72]	; (8000c3c <EXTI15_10_IRQHandler+0xc0>)
 8000bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bf6:	4798      	blx	r3
	if(EXTI->PR & (1 << 14)) { EXTI->PR |= (1 << 14);	GP_IRQ_CallBack[14](); }
 8000bf8:	4b0f      	ldr	r3, [pc, #60]	; (8000c38 <EXTI15_10_IRQHandler+0xbc>)
 8000bfa:	695b      	ldr	r3, [r3, #20]
 8000bfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d008      	beq.n	8000c16 <EXTI15_10_IRQHandler+0x9a>
 8000c04:	4b0c      	ldr	r3, [pc, #48]	; (8000c38 <EXTI15_10_IRQHandler+0xbc>)
 8000c06:	695b      	ldr	r3, [r3, #20]
 8000c08:	4a0b      	ldr	r2, [pc, #44]	; (8000c38 <EXTI15_10_IRQHandler+0xbc>)
 8000c0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c0e:	6153      	str	r3, [r2, #20]
 8000c10:	4b0a      	ldr	r3, [pc, #40]	; (8000c3c <EXTI15_10_IRQHandler+0xc0>)
 8000c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c14:	4798      	blx	r3
	if(EXTI->PR & (1 << 15)) { EXTI->PR |= (1 << 15);	GP_IRQ_CallBack[15](); }
 8000c16:	4b08      	ldr	r3, [pc, #32]	; (8000c38 <EXTI15_10_IRQHandler+0xbc>)
 8000c18:	695b      	ldr	r3, [r3, #20]
 8000c1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d008      	beq.n	8000c34 <EXTI15_10_IRQHandler+0xb8>
 8000c22:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <EXTI15_10_IRQHandler+0xbc>)
 8000c24:	695b      	ldr	r3, [r3, #20]
 8000c26:	4a04      	ldr	r2, [pc, #16]	; (8000c38 <EXTI15_10_IRQHandler+0xbc>)
 8000c28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c2c:	6153      	str	r3, [r2, #20]
 8000c2e:	4b03      	ldr	r3, [pc, #12]	; (8000c3c <EXTI15_10_IRQHandler+0xc0>)
 8000c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c32:	4798      	blx	r3
}
 8000c34:	bf00      	nop
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40010400 	.word	0x40010400
 8000c3c:	200000e8 	.word	0x200000e8

08000c40 <task1>:

Task_Ref Task1, Task2, Task3;
volatile static uint8_t task1_flag, task2_flag, task3_flag;

void task1()
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
	while(1)
	{
		// Task1 code
		task1_flag ^= 1;
 8000c44:	4b04      	ldr	r3, [pc, #16]	; (8000c58 <task1+0x18>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	b2db      	uxtb	r3, r3
 8000c4a:	f083 0301 	eor.w	r3, r3, #1
 8000c4e:	b2da      	uxtb	r2, r3
 8000c50:	4b01      	ldr	r3, [pc, #4]	; (8000c58 <task1+0x18>)
 8000c52:	701a      	strb	r2, [r3, #0]
 8000c54:	e7f6      	b.n	8000c44 <task1+0x4>
 8000c56:	bf00      	nop
 8000c58:	2000009c 	.word	0x2000009c

08000c5c <task2>:
	}
}

void task2()
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
	while(1)
	{
		// Task2 code
		task2_flag ^= 2;
 8000c60:	4b04      	ldr	r3, [pc, #16]	; (8000c74 <task2+0x18>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	f083 0302 	eor.w	r3, r3, #2
 8000c6a:	b2da      	uxtb	r2, r3
 8000c6c:	4b01      	ldr	r3, [pc, #4]	; (8000c74 <task2+0x18>)
 8000c6e:	701a      	strb	r2, [r3, #0]
 8000c70:	e7f6      	b.n	8000c60 <task2+0x4>
 8000c72:	bf00      	nop
 8000c74:	2000009d 	.word	0x2000009d

08000c78 <task3>:
	}
}

void task3()
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
	while(1)
	{
		// Task3 code
		task3_flag ^= 3;
 8000c7c:	4b04      	ldr	r3, [pc, #16]	; (8000c90 <task3+0x18>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	f083 0303 	eor.w	r3, r3, #3
 8000c86:	b2da      	uxtb	r2, r3
 8000c88:	4b01      	ldr	r3, [pc, #4]	; (8000c90 <task3+0x18>)
 8000c8a:	701a      	strb	r2, [r3, #0]
 8000c8c:	e7f6      	b.n	8000c7c <task3+0x4>
 8000c8e:	bf00      	nop
 8000c90:	2000009e 	.word	0x2000009e

08000c94 <main>:
	}
}

int main(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
	MyRTOS_errorID error_status = NoError;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	71fb      	strb	r3, [r7, #7]
	// Hardware_Init (Initialize Clock Tree , RestController)
	HW_Init();
 8000c9e:	f7ff fad3 	bl	8000248 <HW_Init>

	error_status = MyARTOS_Init();
 8000ca2:	f7ff fb8d 	bl	80003c0 <MyARTOS_Init>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	71fb      	strb	r3, [r7, #7]
	if(error_status != NoError)
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d000      	beq.n	8000cb2 <main+0x1e>
		while(1);
 8000cb0:	e7fe      	b.n	8000cb0 <main+0x1c>

	strcpy((char*)Task1.TaskName, "Task1");
 8000cb2:	4b2a      	ldr	r3, [pc, #168]	; (8000d5c <main+0xc8>)
 8000cb4:	4a2a      	ldr	r2, [pc, #168]	; (8000d60 <main+0xcc>)
 8000cb6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000cba:	6018      	str	r0, [r3, #0]
 8000cbc:	3304      	adds	r3, #4
 8000cbe:	8019      	strh	r1, [r3, #0]
	Task1.Stack_Size = 512;
 8000cc0:	4b28      	ldr	r3, [pc, #160]	; (8000d64 <main+0xd0>)
 8000cc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cc6:	601a      	str	r2, [r3, #0]
	Task1.p_TaskEntry = task1;
 8000cc8:	4b26      	ldr	r3, [pc, #152]	; (8000d64 <main+0xd0>)
 8000cca:	4a27      	ldr	r2, [pc, #156]	; (8000d68 <main+0xd4>)
 8000ccc:	609a      	str	r2, [r3, #8]
	Task1.Priority = 3;
 8000cce:	4b25      	ldr	r3, [pc, #148]	; (8000d64 <main+0xd0>)
 8000cd0:	2203      	movs	r2, #3
 8000cd2:	711a      	strb	r2, [r3, #4]

	strcpy((char*)Task2.TaskName, "Task2");
 8000cd4:	4b25      	ldr	r3, [pc, #148]	; (8000d6c <main+0xd8>)
 8000cd6:	4a26      	ldr	r2, [pc, #152]	; (8000d70 <main+0xdc>)
 8000cd8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000cdc:	6018      	str	r0, [r3, #0]
 8000cde:	3304      	adds	r3, #4
 8000ce0:	8019      	strh	r1, [r3, #0]
	Task2.Stack_Size = 512;
 8000ce2:	4b24      	ldr	r3, [pc, #144]	; (8000d74 <main+0xe0>)
 8000ce4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ce8:	601a      	str	r2, [r3, #0]
	Task2.p_TaskEntry = task2;
 8000cea:	4b22      	ldr	r3, [pc, #136]	; (8000d74 <main+0xe0>)
 8000cec:	4a22      	ldr	r2, [pc, #136]	; (8000d78 <main+0xe4>)
 8000cee:	609a      	str	r2, [r3, #8]
	Task2.Priority = 3;
 8000cf0:	4b20      	ldr	r3, [pc, #128]	; (8000d74 <main+0xe0>)
 8000cf2:	2203      	movs	r2, #3
 8000cf4:	711a      	strb	r2, [r3, #4]

	strcpy((char*)Task3.TaskName, "Task3");
 8000cf6:	4b21      	ldr	r3, [pc, #132]	; (8000d7c <main+0xe8>)
 8000cf8:	4a21      	ldr	r2, [pc, #132]	; (8000d80 <main+0xec>)
 8000cfa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000cfe:	6018      	str	r0, [r3, #0]
 8000d00:	3304      	adds	r3, #4
 8000d02:	8019      	strh	r1, [r3, #0]
	Task3.Stack_Size = 512;
 8000d04:	4b1f      	ldr	r3, [pc, #124]	; (8000d84 <main+0xf0>)
 8000d06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d0a:	601a      	str	r2, [r3, #0]
	Task3.p_TaskEntry = task3;
 8000d0c:	4b1d      	ldr	r3, [pc, #116]	; (8000d84 <main+0xf0>)
 8000d0e:	4a1e      	ldr	r2, [pc, #120]	; (8000d88 <main+0xf4>)
 8000d10:	609a      	str	r2, [r3, #8]
	Task3.Priority = 3;
 8000d12:	4b1c      	ldr	r3, [pc, #112]	; (8000d84 <main+0xf0>)
 8000d14:	2203      	movs	r2, #3
 8000d16:	711a      	strb	r2, [r3, #4]

	error_status = MyRTOS_CreateTask(&Task1);
 8000d18:	4812      	ldr	r0, [pc, #72]	; (8000d64 <main+0xd0>)
 8000d1a:	f7ff fb8f 	bl	800043c <MyRTOS_CreateTask>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	71fb      	strb	r3, [r7, #7]
	error_status = MyRTOS_CreateTask(&Task2);
 8000d22:	4814      	ldr	r0, [pc, #80]	; (8000d74 <main+0xe0>)
 8000d24:	f7ff fb8a 	bl	800043c <MyRTOS_CreateTask>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	71fb      	strb	r3, [r7, #7]
	error_status = MyRTOS_CreateTask(&Task3);
 8000d2c:	4815      	ldr	r0, [pc, #84]	; (8000d84 <main+0xf0>)
 8000d2e:	f7ff fb85 	bl	800043c <MyRTOS_CreateTask>
 8000d32:	4603      	mov	r3, r0
 8000d34:	71fb      	strb	r3, [r7, #7]

	error_status = MyRTOS_ActivateTask(&Task1);
 8000d36:	480b      	ldr	r0, [pc, #44]	; (8000d64 <main+0xd0>)
 8000d38:	f7ff fbba 	bl	80004b0 <MyRTOS_ActivateTask>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	71fb      	strb	r3, [r7, #7]
	error_status = MyRTOS_ActivateTask(&Task2);
 8000d40:	480c      	ldr	r0, [pc, #48]	; (8000d74 <main+0xe0>)
 8000d42:	f7ff fbb5 	bl	80004b0 <MyRTOS_ActivateTask>
 8000d46:	4603      	mov	r3, r0
 8000d48:	71fb      	strb	r3, [r7, #7]
	error_status = MyRTOS_ActivateTask(&Task3);
 8000d4a:	480e      	ldr	r0, [pc, #56]	; (8000d84 <main+0xf0>)
 8000d4c:	f7ff fbb0 	bl	80004b0 <MyRTOS_ActivateTask>
 8000d50:	4603      	mov	r3, r0
 8000d52:	71fb      	strb	r3, [r7, #7]

	MyRTOS_StartOS();
 8000d54:	f7ff fbbe 	bl	80004d4 <MyRTOS_StartOS>

	while(1);
 8000d58:	e7fe      	b.n	8000d58 <main+0xc4>
 8000d5a:	bf00      	nop
 8000d5c:	20000140 	.word	0x20000140
 8000d60:	08000e4c 	.word	0x08000e4c
 8000d64:	20000124 	.word	0x20000124
 8000d68:	08000c41 	.word	0x08000c41
 8000d6c:	200001c8 	.word	0x200001c8
 8000d70:	08000e54 	.word	0x08000e54
 8000d74:	200001ac 	.word	0x200001ac
 8000d78:	08000c5d 	.word	0x08000c5d
 8000d7c:	20000184 	.word	0x20000184
 8000d80:	08000e5c 	.word	0x08000e5c
 8000d84:	20000168 	.word	0x20000168
 8000d88:	08000c79 	.word	0x08000c79

08000d8c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d8c:	480d      	ldr	r0, [pc, #52]	; (8000dc4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d8e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000d90:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d94:	480c      	ldr	r0, [pc, #48]	; (8000dc8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d96:	490d      	ldr	r1, [pc, #52]	; (8000dcc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d98:	4a0d      	ldr	r2, [pc, #52]	; (8000dd0 <LoopForever+0xe>)
  movs r3, #0
 8000d9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d9c:	e002      	b.n	8000da4 <LoopCopyDataInit>

08000d9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000da2:	3304      	adds	r3, #4

08000da4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000da6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da8:	d3f9      	bcc.n	8000d9e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000daa:	4a0a      	ldr	r2, [pc, #40]	; (8000dd4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dac:	4c0a      	ldr	r4, [pc, #40]	; (8000dd8 <LoopForever+0x16>)
  movs r3, #0
 8000dae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000db0:	e001      	b.n	8000db6 <LoopFillZerobss>

08000db2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000db2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db4:	3204      	adds	r2, #4

08000db6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000db6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db8:	d3fb      	bcc.n	8000db2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000dba:	f000 f811 	bl	8000de0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dbe:	f7ff ff69 	bl	8000c94 <main>

08000dc2 <LoopForever>:

LoopForever:
    b LoopForever
 8000dc2:	e7fe      	b.n	8000dc2 <LoopForever>
  ldr   r0, =_estack
 8000dc4:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000dc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dcc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000dd0:	08000e6c 	.word	0x08000e6c
  ldr r2, =_sbss
 8000dd4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000dd8:	200001f0 	.word	0x200001f0

08000ddc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ddc:	e7fe      	b.n	8000ddc <ADC1_2_IRQHandler>
	...

08000de0 <__libc_init_array>:
 8000de0:	b570      	push	{r4, r5, r6, lr}
 8000de2:	2500      	movs	r5, #0
 8000de4:	4e0c      	ldr	r6, [pc, #48]	; (8000e18 <__libc_init_array+0x38>)
 8000de6:	4c0d      	ldr	r4, [pc, #52]	; (8000e1c <__libc_init_array+0x3c>)
 8000de8:	1ba4      	subs	r4, r4, r6
 8000dea:	10a4      	asrs	r4, r4, #2
 8000dec:	42a5      	cmp	r5, r4
 8000dee:	d109      	bne.n	8000e04 <__libc_init_array+0x24>
 8000df0:	f000 f81a 	bl	8000e28 <_init>
 8000df4:	2500      	movs	r5, #0
 8000df6:	4e0a      	ldr	r6, [pc, #40]	; (8000e20 <__libc_init_array+0x40>)
 8000df8:	4c0a      	ldr	r4, [pc, #40]	; (8000e24 <__libc_init_array+0x44>)
 8000dfa:	1ba4      	subs	r4, r4, r6
 8000dfc:	10a4      	asrs	r4, r4, #2
 8000dfe:	42a5      	cmp	r5, r4
 8000e00:	d105      	bne.n	8000e0e <__libc_init_array+0x2e>
 8000e02:	bd70      	pop	{r4, r5, r6, pc}
 8000e04:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e08:	4798      	blx	r3
 8000e0a:	3501      	adds	r5, #1
 8000e0c:	e7ee      	b.n	8000dec <__libc_init_array+0xc>
 8000e0e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e12:	4798      	blx	r3
 8000e14:	3501      	adds	r5, #1
 8000e16:	e7f2      	b.n	8000dfe <__libc_init_array+0x1e>
 8000e18:	08000e64 	.word	0x08000e64
 8000e1c:	08000e64 	.word	0x08000e64
 8000e20:	08000e64 	.word	0x08000e64
 8000e24:	08000e68 	.word	0x08000e68

08000e28 <_init>:
 8000e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e2a:	bf00      	nop
 8000e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e2e:	bc08      	pop	{r3}
 8000e30:	469e      	mov	lr, r3
 8000e32:	4770      	bx	lr

08000e34 <_fini>:
 8000e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e36:	bf00      	nop
 8000e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e3a:	bc08      	pop	{r3}
 8000e3c:	469e      	mov	lr, r3
 8000e3e:	4770      	bx	lr
