
Unit8_Lesson7_Lab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000cb8  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  08000de8  08000de8  00010de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000df0  08000df0  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08000df0  08000df0  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000df0  08000df0  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000df0  08000df0  00010df0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000df4  08000df4  00010df4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08000df8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000054  20000018  08000e10  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000006c  08000e10  0002006c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004287  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000009e6  00000000  00000000  000242c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000a8a  00000000  00000000  00024cae  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001b0  00000000  00000000  00025738  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000158  00000000  00000000  000258e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0000253e  00000000  00000000  00025a40  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000222e  00000000  00000000  00027f7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00008c0f  00000000  00000000  0002a1ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00032dbb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000558  00000000  00000000  00032e38  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000018 	.word	0x20000018
 800014c:	00000000 	.word	0x00000000
 8000150:	08000dd0 	.word	0x08000dd0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000001c 	.word	0x2000001c
 800016c:	08000dd0 	.word	0x08000dd0

08000170 <EEPROM_Init>:
 */

#include "I2C_Slave_EEPROM.h"

void EEPROM_Init(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b088      	sub	sp, #32
 8000174:	af00      	add	r7, sp, #0
	// SCL -------> PB6
	// SDA -------> PB7

	// I2C Controller act as a master
	I2C_Config_t I2C_cfg;
	I2C_cfg.Device_Mode = Device_Mode_I2C;
 8000176:	2300      	movs	r3, #0
 8000178:	713b      	strb	r3, [r7, #4]
	I2C_cfg.Stretch_Mode = I2C_STRETCH_MODE_ENABLE;
 800017a:	2300      	movs	r3, #0
 800017c:	733b      	strb	r3, [r7, #12]
	I2C_cfg.General_Call_Address_Detection = I2C_ENGC_ENABLE;
 800017e:	2340      	movs	r3, #64	; 0x40
 8000180:	763b      	strb	r3, [r7, #24]
	I2C_cfg.Clock_Speed = I2C_SCLK_SM_100K;
 8000182:	4b09      	ldr	r3, [pc, #36]	; (80001a8 <EEPROM_Init+0x38>)
 8000184:	60bb      	str	r3, [r7, #8]
	I2C_cfg.Ack_Control = I2C_ACK_ENABLE;
 8000186:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800018a:	82fb      	strh	r3, [r7, #22]
	I2C_cfg.p_Slave_Event_CallBack = NULL;
 800018c:	2300      	movs	r3, #0
 800018e:	61fb      	str	r3, [r7, #28]

	MCAL_I2C_Init(I2C1, &I2C_cfg);
 8000190:	1d3b      	adds	r3, r7, #4
 8000192:	4619      	mov	r1, r3
 8000194:	4805      	ldr	r0, [pc, #20]	; (80001ac <EEPROM_Init+0x3c>)
 8000196:	f000 f961 	bl	800045c <MCAL_I2C_Init>
	MCAL_I2C_GPIO_Set_Pins(I2C1);
 800019a:	4804      	ldr	r0, [pc, #16]	; (80001ac <EEPROM_Init+0x3c>)
 800019c:	f000 fa6e 	bl	800067c <MCAL_I2C_GPIO_Set_Pins>
}
 80001a0:	bf00      	nop
 80001a2:	3720      	adds	r7, #32
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bd80      	pop	{r7, pc}
 80001a8:	000186a0 	.word	0x000186a0
 80001ac:	40005400 	.word	0x40005400

080001b0 <EEPROM_Write_NBytes>:

void EEPROM_Write_NBytes(uint16_t memAddress, uint8_t *bytes, uint8_t dataLen)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b0c6      	sub	sp, #280	; 0x118
 80001b4:	af02      	add	r7, sp, #8
 80001b6:	463b      	mov	r3, r7
 80001b8:	6019      	str	r1, [r3, #0]
 80001ba:	4611      	mov	r1, r2
 80001bc:	1dbb      	adds	r3, r7, #6
 80001be:	4602      	mov	r2, r0
 80001c0:	801a      	strh	r2, [r3, #0]
 80001c2:	1d7b      	adds	r3, r7, #5
 80001c4:	460a      	mov	r2, r1
 80001c6:	701a      	strb	r2, [r3, #0]
	uint8_t i = 0;
 80001c8:	2300      	movs	r3, #0
 80001ca:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	uint8_t buffer[256];
	buffer[0] = (uint8_t)(memAddress >> 8);	//high address
 80001ce:	1dbb      	adds	r3, r7, #6
 80001d0:	881b      	ldrh	r3, [r3, #0]
 80001d2:	0a1b      	lsrs	r3, r3, #8
 80001d4:	b29b      	uxth	r3, r3
 80001d6:	b2da      	uxtb	r2, r3
 80001d8:	f107 030c 	add.w	r3, r7, #12
 80001dc:	701a      	strb	r2, [r3, #0]
	buffer[1] = (uint8_t)(memAddress);		//low address
 80001de:	1dbb      	adds	r3, r7, #6
 80001e0:	881b      	ldrh	r3, [r3, #0]
 80001e2:	b2da      	uxtb	r2, r3
 80001e4:	f107 030c 	add.w	r3, r7, #12
 80001e8:	705a      	strb	r2, [r3, #1]

	for(i = 2; i < (dataLen+2); i++)
 80001ea:	2302      	movs	r3, #2
 80001ec:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80001f0:	e010      	b.n	8000214 <EEPROM_Write_NBytes+0x64>
	{
		buffer[i]= bytes[i-2];
 80001f2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80001f6:	3b02      	subs	r3, #2
 80001f8:	463a      	mov	r2, r7
 80001fa:	6812      	ldr	r2, [r2, #0]
 80001fc:	441a      	add	r2, r3
 80001fe:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000202:	7811      	ldrb	r1, [r2, #0]
 8000204:	f107 020c 	add.w	r2, r7, #12
 8000208:	54d1      	strb	r1, [r2, r3]
	for(i = 2; i < (dataLen+2); i++)
 800020a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800020e:	3301      	adds	r3, #1
 8000210:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000214:	f897 210f 	ldrb.w	r2, [r7, #271]	; 0x10f
 8000218:	1d7b      	adds	r3, r7, #5
 800021a:	781b      	ldrb	r3, [r3, #0]
 800021c:	3302      	adds	r3, #2
 800021e:	429a      	cmp	r2, r3
 8000220:	dbe7      	blt.n	80001f2 <EEPROM_Write_NBytes+0x42>
	}

	MCAL_I2CMaster_Transmite(I2C1, EEPROM_ADDRESS, buffer, (dataLen+2), WITH_STOP, START);
 8000222:	1d7b      	adds	r3, r7, #5
 8000224:	781b      	ldrb	r3, [r3, #0]
 8000226:	3302      	adds	r3, #2
 8000228:	b2d9      	uxtb	r1, r3
 800022a:	f107 020c 	add.w	r2, r7, #12
 800022e:	2300      	movs	r3, #0
 8000230:	9301      	str	r3, [sp, #4]
 8000232:	2300      	movs	r3, #0
 8000234:	9300      	str	r3, [sp, #0]
 8000236:	460b      	mov	r3, r1
 8000238:	212a      	movs	r1, #42	; 0x2a
 800023a:	4804      	ldr	r0, [pc, #16]	; (800024c <EEPROM_Write_NBytes+0x9c>)
 800023c:	f000 fa68 	bl	8000710 <MCAL_I2CMaster_Transmite>
}
 8000240:	bf00      	nop
 8000242:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	40005400 	.word	0x40005400

08000250 <EEPROM_Read_NBytes>:

void EEPROM_Read_NBytes(uint16_t memAddress, uint8_t *bytes, uint8_t dataLen)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b086      	sub	sp, #24
 8000254:	af02      	add	r7, sp, #8
 8000256:	4603      	mov	r3, r0
 8000258:	6039      	str	r1, [r7, #0]
 800025a:	80fb      	strh	r3, [r7, #6]
 800025c:	4613      	mov	r3, r2
 800025e:	717b      	strb	r3, [r7, #5]
	uint8_t buffer[2];
	buffer[0] = (uint8_t)(memAddress >> 8);	//high address
 8000260:	88fb      	ldrh	r3, [r7, #6]
 8000262:	0a1b      	lsrs	r3, r3, #8
 8000264:	b29b      	uxth	r3, r3
 8000266:	b2db      	uxtb	r3, r3
 8000268:	733b      	strb	r3, [r7, #12]
	buffer[1] = (uint8_t)(memAddress);		//low address
 800026a:	88fb      	ldrh	r3, [r7, #6]
 800026c:	b2db      	uxtb	r3, r3
 800026e:	737b      	strb	r3, [r7, #13]

	MCAL_I2CMaster_Transmite(I2C1, EEPROM_ADDRESS, buffer, 2, WITHOUT_STOP, START);
 8000270:	f107 020c 	add.w	r2, r7, #12
 8000274:	2300      	movs	r3, #0
 8000276:	9301      	str	r3, [sp, #4]
 8000278:	2301      	movs	r3, #1
 800027a:	9300      	str	r3, [sp, #0]
 800027c:	2302      	movs	r3, #2
 800027e:	212a      	movs	r1, #42	; 0x2a
 8000280:	4808      	ldr	r0, [pc, #32]	; (80002a4 <EEPROM_Read_NBytes+0x54>)
 8000282:	f000 fa45 	bl	8000710 <MCAL_I2CMaster_Transmite>
	MCAL_I2CMaster_Receive(I2C1, EEPROM_ADDRESS, bytes, dataLen, WITH_STOP, REPETED_START);
 8000286:	797a      	ldrb	r2, [r7, #5]
 8000288:	2301      	movs	r3, #1
 800028a:	9301      	str	r3, [sp, #4]
 800028c:	2300      	movs	r3, #0
 800028e:	9300      	str	r3, [sp, #0]
 8000290:	4613      	mov	r3, r2
 8000292:	683a      	ldr	r2, [r7, #0]
 8000294:	212a      	movs	r1, #42	; 0x2a
 8000296:	4803      	ldr	r0, [pc, #12]	; (80002a4 <EEPROM_Read_NBytes+0x54>)
 8000298:	f000 fa9e 	bl	80007d8 <MCAL_I2CMaster_Receive>
}
 800029c:	bf00      	nop
 800029e:	3710      	adds	r7, #16
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	40005400 	.word	0x40005400

080002a8 <Get_CRLH_Position>:
* @param [in]	: PinNumber specifies the port bit. Set by @ref GPIO_PINS_define
* @retval		: Position of the first bit for specific pin
* Note			: None
*/
uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 80002a8:	b480      	push	{r7}
 80002aa:	b085      	sub	sp, #20
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	4603      	mov	r3, r0
 80002b0:	80fb      	strh	r3, [r7, #6]
	uint8_t position;
	switch(PinNumber)
 80002b2:	88fb      	ldrh	r3, [r7, #6]
 80002b4:	2b80      	cmp	r3, #128	; 0x80
 80002b6:	d049      	beq.n	800034c <Get_CRLH_Position+0xa4>
 80002b8:	2b80      	cmp	r3, #128	; 0x80
 80002ba:	dc11      	bgt.n	80002e0 <Get_CRLH_Position+0x38>
 80002bc:	2b08      	cmp	r3, #8
 80002be:	d039      	beq.n	8000334 <Get_CRLH_Position+0x8c>
 80002c0:	2b08      	cmp	r3, #8
 80002c2:	dc06      	bgt.n	80002d2 <Get_CRLH_Position+0x2a>
 80002c4:	2b02      	cmp	r3, #2
 80002c6:	d02f      	beq.n	8000328 <Get_CRLH_Position+0x80>
 80002c8:	2b04      	cmp	r3, #4
 80002ca:	d030      	beq.n	800032e <Get_CRLH_Position+0x86>
 80002cc:	2b01      	cmp	r3, #1
 80002ce:	d028      	beq.n	8000322 <Get_CRLH_Position+0x7a>
 80002d0:	e03f      	b.n	8000352 <Get_CRLH_Position+0xaa>
 80002d2:	2b20      	cmp	r3, #32
 80002d4:	d034      	beq.n	8000340 <Get_CRLH_Position+0x98>
 80002d6:	2b40      	cmp	r3, #64	; 0x40
 80002d8:	d035      	beq.n	8000346 <Get_CRLH_Position+0x9e>
 80002da:	2b10      	cmp	r3, #16
 80002dc:	d02d      	beq.n	800033a <Get_CRLH_Position+0x92>
 80002de:	e038      	b.n	8000352 <Get_CRLH_Position+0xaa>
 80002e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80002e4:	d026      	beq.n	8000334 <Get_CRLH_Position+0x8c>
 80002e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80002ea:	dc09      	bgt.n	8000300 <Get_CRLH_Position+0x58>
 80002ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80002f0:	d01a      	beq.n	8000328 <Get_CRLH_Position+0x80>
 80002f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80002f6:	d01a      	beq.n	800032e <Get_CRLH_Position+0x86>
 80002f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80002fc:	d011      	beq.n	8000322 <Get_CRLH_Position+0x7a>
 80002fe:	e028      	b.n	8000352 <Get_CRLH_Position+0xaa>
 8000300:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000304:	d01c      	beq.n	8000340 <Get_CRLH_Position+0x98>
 8000306:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800030a:	dc03      	bgt.n	8000314 <Get_CRLH_Position+0x6c>
 800030c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000310:	d013      	beq.n	800033a <Get_CRLH_Position+0x92>
 8000312:	e01e      	b.n	8000352 <Get_CRLH_Position+0xaa>
 8000314:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000318:	d015      	beq.n	8000346 <Get_CRLH_Position+0x9e>
 800031a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800031e:	d015      	beq.n	800034c <Get_CRLH_Position+0xa4>
 8000320:	e017      	b.n	8000352 <Get_CRLH_Position+0xaa>
	{
	case GPIO_PIN_0:
	case GPIO_PIN_8:
		position = 0;
 8000322:	2300      	movs	r3, #0
 8000324:	73fb      	strb	r3, [r7, #15]
		break;
 8000326:	e014      	b.n	8000352 <Get_CRLH_Position+0xaa>

	case GPIO_PIN_1:
	case GPIO_PIN_9:
		position = 4;
 8000328:	2304      	movs	r3, #4
 800032a:	73fb      	strb	r3, [r7, #15]
		break;
 800032c:	e011      	b.n	8000352 <Get_CRLH_Position+0xaa>

	case GPIO_PIN_2:
	case GPIO_PIN_10:
		position = 8;
 800032e:	2308      	movs	r3, #8
 8000330:	73fb      	strb	r3, [r7, #15]
		break;
 8000332:	e00e      	b.n	8000352 <Get_CRLH_Position+0xaa>

	case GPIO_PIN_3:
	case GPIO_PIN_11:
		position = 12;
 8000334:	230c      	movs	r3, #12
 8000336:	73fb      	strb	r3, [r7, #15]
		break;
 8000338:	e00b      	b.n	8000352 <Get_CRLH_Position+0xaa>

	case GPIO_PIN_4:
	case GPIO_PIN_12:
		position = 16;
 800033a:	2310      	movs	r3, #16
 800033c:	73fb      	strb	r3, [r7, #15]
		break;
 800033e:	e008      	b.n	8000352 <Get_CRLH_Position+0xaa>

	case GPIO_PIN_5:
	case GPIO_PIN_13:
		position = 20;
 8000340:	2314      	movs	r3, #20
 8000342:	73fb      	strb	r3, [r7, #15]
		break;
 8000344:	e005      	b.n	8000352 <Get_CRLH_Position+0xaa>

	case GPIO_PIN_6:
	case GPIO_PIN_14:
		position = 24;
 8000346:	2318      	movs	r3, #24
 8000348:	73fb      	strb	r3, [r7, #15]
		break;
 800034a:	e002      	b.n	8000352 <Get_CRLH_Position+0xaa>

	case GPIO_PIN_7:
	case GPIO_PIN_15:
		position = 28;
 800034c:	231c      	movs	r3, #28
 800034e:	73fb      	strb	r3, [r7, #15]
		break;
 8000350:	bf00      	nop
	}

	return position;
 8000352:	7bfb      	ldrb	r3, [r7, #15]
}
 8000354:	4618      	mov	r0, r3
 8000356:	3714      	adds	r7, #20
 8000358:	46bd      	mov	sp, r7
 800035a:	bc80      	pop	{r7}
 800035c:	4770      	bx	lr

0800035e <MCAL_GPIO_Init>:
* @retval		: None
* Note			: STM32F103C6 MCU has GPIO A:E modules
* 				  but LQFP48 has only GPIO A,B,part of C/D exported as external pins for MCU
*/
void MCAL_GPIO_Init	(GPIO_TypeDef *GPIOx, GPIO_PinConfig_t *PinConfig)
{
 800035e:	b590      	push	{r4, r7, lr}
 8000360:	b085      	sub	sp, #20
 8000362:	af00      	add	r7, sp, #0
 8000364:	6078      	str	r0, [r7, #4]
 8000366:	6039      	str	r1, [r7, #0]
	volatile uint32_t* Configregister = NULL;
 8000368:	2300      	movs	r3, #0
 800036a:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_Config = 0;
 800036c:	2300      	movs	r3, #0
 800036e:	73fb      	strb	r3, [r7, #15]
	//Port configuration register low (GPIOx_CRL) Configure pins 0:7
	//Port configuration register high (GPIOx_CRH) Configure pins 8:15
	Configregister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8)? &GPIOx->CRL : &GPIOx->CRH;
 8000370:	683b      	ldr	r3, [r7, #0]
 8000372:	881b      	ldrh	r3, [r3, #0]
 8000374:	2bff      	cmp	r3, #255	; 0xff
 8000376:	d801      	bhi.n	800037c <MCAL_GPIO_Init+0x1e>
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	e001      	b.n	8000380 <MCAL_GPIO_Init+0x22>
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	3304      	adds	r3, #4
 8000380:	60bb      	str	r3, [r7, #8]

	//Clear CNFy[1:0] MODEy[1:0]
	*Configregister &= ~(0xF << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8000382:	683b      	ldr	r3, [r7, #0]
 8000384:	881b      	ldrh	r3, [r3, #0]
 8000386:	4618      	mov	r0, r3
 8000388:	f7ff ff8e 	bl	80002a8 <Get_CRLH_Position>
 800038c:	4603      	mov	r3, r0
 800038e:	461a      	mov	r2, r3
 8000390:	230f      	movs	r3, #15
 8000392:	4093      	lsls	r3, r2
 8000394:	43da      	mvns	r2, r3
 8000396:	68bb      	ldr	r3, [r7, #8]
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	401a      	ands	r2, r3
 800039c:	68bb      	ldr	r3, [r7, #8]
 800039e:	601a      	str	r2, [r3, #0]

	// if pin is output
	if(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD || PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP ||
 80003a0:	683b      	ldr	r3, [r7, #0]
 80003a2:	789b      	ldrb	r3, [r3, #2]
 80003a4:	2b07      	cmp	r3, #7
 80003a6:	d00b      	beq.n	80003c0 <MCAL_GPIO_Init+0x62>
 80003a8:	683b      	ldr	r3, [r7, #0]
 80003aa:	789b      	ldrb	r3, [r3, #2]
 80003ac:	2b06      	cmp	r3, #6
 80003ae:	d007      	beq.n	80003c0 <MCAL_GPIO_Init+0x62>
	   PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD || PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP)
 80003b0:	683b      	ldr	r3, [r7, #0]
 80003b2:	789b      	ldrb	r3, [r3, #2]
	if(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD || PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP ||
 80003b4:	2b05      	cmp	r3, #5
 80003b6:	d003      	beq.n	80003c0 <MCAL_GPIO_Init+0x62>
	   PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD || PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP)
 80003b8:	683b      	ldr	r3, [r7, #0]
 80003ba:	789b      	ldrb	r3, [r3, #2]
 80003bc:	2b04      	cmp	r3, #4
 80003be:	d10e      	bne.n	80003de <MCAL_GPIO_Init+0x80>
	{
		PIN_Config = ( (((PinConfig->GPIO_MODE - 4) << 2) | (PinConfig->GPIO_Output_Speed)) & 0x0F );
 80003c0:	683b      	ldr	r3, [r7, #0]
 80003c2:	789b      	ldrb	r3, [r3, #2]
 80003c4:	3b04      	subs	r3, #4
 80003c6:	009b      	lsls	r3, r3, #2
 80003c8:	b25a      	sxtb	r2, r3
 80003ca:	683b      	ldr	r3, [r7, #0]
 80003cc:	78db      	ldrb	r3, [r3, #3]
 80003ce:	b25b      	sxtb	r3, r3
 80003d0:	4313      	orrs	r3, r2
 80003d2:	b25b      	sxtb	r3, r3
 80003d4:	b2db      	uxtb	r3, r3
 80003d6:	f003 030f 	and.w	r3, r3, #15
 80003da:	73fb      	strb	r3, [r7, #15]
 80003dc:	e02c      	b.n	8000438 <MCAL_GPIO_Init+0xda>
	}
	else
	{
		if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO || PinConfig->GPIO_MODE == GPIO_MODE_ANALOG)
 80003de:	683b      	ldr	r3, [r7, #0]
 80003e0:	789b      	ldrb	r3, [r3, #2]
 80003e2:	2b01      	cmp	r3, #1
 80003e4:	d003      	beq.n	80003ee <MCAL_GPIO_Init+0x90>
 80003e6:	683b      	ldr	r3, [r7, #0]
 80003e8:	789b      	ldrb	r3, [r3, #2]
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d107      	bne.n	80003fe <MCAL_GPIO_Init+0xa0>
		{
			PIN_Config = ( (PinConfig->GPIO_MODE << 2) & 0x0F );
 80003ee:	683b      	ldr	r3, [r7, #0]
 80003f0:	789b      	ldrb	r3, [r3, #2]
 80003f2:	009b      	lsls	r3, r3, #2
 80003f4:	b2db      	uxtb	r3, r3
 80003f6:	f003 030f 	and.w	r3, r3, #15
 80003fa:	73fb      	strb	r3, [r7, #15]
 80003fc:	e01c      	b.n	8000438 <MCAL_GPIO_Init+0xda>
		}
		else if(PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT) //Consider it as input floating
 80003fe:	683b      	ldr	r3, [r7, #0]
 8000400:	789b      	ldrb	r3, [r3, #2]
 8000402:	2b08      	cmp	r3, #8
 8000404:	d102      	bne.n	800040c <MCAL_GPIO_Init+0xae>
		{
			PIN_Config = ( (GPIO_MODE_INPUT_FLO << 2) & 0x0F );
 8000406:	2304      	movs	r3, #4
 8000408:	73fb      	strb	r3, [r7, #15]
 800040a:	e015      	b.n	8000438 <MCAL_GPIO_Init+0xda>
		}
		else //pull-up & pull-down
		{
			PIN_Config = ( (GPIO_MODE_INPUT_PU << 2) & 0x0F );
 800040c:	2308      	movs	r3, #8
 800040e:	73fb      	strb	r3, [r7, #15]
			if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 8000410:	683b      	ldr	r3, [r7, #0]
 8000412:	789b      	ldrb	r3, [r3, #2]
 8000414:	2b02      	cmp	r3, #2
 8000416:	d107      	bne.n	8000428 <MCAL_GPIO_Init+0xca>
			{
				//PxODR register = 1 Input pull-up : Table 20. Port bit configuration table
				GPIOx->ODR |= PinConfig->GPIO_PinNumber;
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	68db      	ldr	r3, [r3, #12]
 800041c:	683a      	ldr	r2, [r7, #0]
 800041e:	8812      	ldrh	r2, [r2, #0]
 8000420:	431a      	orrs	r2, r3
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	60da      	str	r2, [r3, #12]
 8000426:	e007      	b.n	8000438 <MCAL_GPIO_Init+0xda>
			}
			else
			{
				//PxODR register = 0 Input pull-down : Table 20. Port bit configuration table
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	68db      	ldr	r3, [r3, #12]
 800042c:	683a      	ldr	r2, [r7, #0]
 800042e:	8812      	ldrh	r2, [r2, #0]
 8000430:	43d2      	mvns	r2, r2
 8000432:	401a      	ands	r2, r3
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	60da      	str	r2, [r3, #12]
			}
		}
	}
	//Write on CRL or CRH
	*Configregister |= ( PIN_Config << Get_CRLH_Position(PinConfig->GPIO_PinNumber) );
 8000438:	7bfc      	ldrb	r4, [r7, #15]
 800043a:	683b      	ldr	r3, [r7, #0]
 800043c:	881b      	ldrh	r3, [r3, #0]
 800043e:	4618      	mov	r0, r3
 8000440:	f7ff ff32 	bl	80002a8 <Get_CRLH_Position>
 8000444:	4603      	mov	r3, r0
 8000446:	fa04 f203 	lsl.w	r2, r4, r3
 800044a:	68bb      	ldr	r3, [r7, #8]
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	431a      	orrs	r2, r3
 8000450:	68bb      	ldr	r3, [r7, #8]
 8000452:	601a      	str	r2, [r3, #0]
}
 8000454:	bf00      	nop
 8000456:	3714      	adds	r7, #20
 8000458:	46bd      	mov	sp, r7
 800045a:	bd90      	pop	{r4, r7, pc}

0800045c <MCAL_I2C_Init>:
 * @retval		: None
 * Note			:
 *
 */
void MCAL_I2C_Init(I2C_TypeDef *I2Cx, I2C_Config_t *I2CConfig)
{
 800045c:	b5b0      	push	{r4, r5, r7, lr}
 800045e:	b086      	sub	sp, #24
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
 8000464:	6039      	str	r1, [r7, #0]
	uint16_t tempreg = 0, freqrange = 0, result = 0;
 8000466:	2300      	movs	r3, #0
 8000468:	82fb      	strh	r3, [r7, #22]
 800046a:	2300      	movs	r3, #0
 800046c:	82bb      	strh	r3, [r7, #20]
 800046e:	2300      	movs	r3, #0
 8000470:	827b      	strh	r3, [r7, #18]
	uint32_t pclk1 = 8000000;
 8000472:	4b79      	ldr	r3, [pc, #484]	; (8000658 <MCAL_I2C_Init+0x1fc>)
 8000474:	60fb      	str	r3, [r7, #12]

	if(I2Cx == I2C1)
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	4a78      	ldr	r2, [pc, #480]	; (800065c <MCAL_I2C_Init+0x200>)
 800047a:	4293      	cmp	r3, r2
 800047c:	d110      	bne.n	80004a0 <MCAL_I2C_Init+0x44>
	{
		Global_I2C_Config[0] = *I2CConfig;
 800047e:	4a78      	ldr	r2, [pc, #480]	; (8000660 <MCAL_I2C_Init+0x204>)
 8000480:	683b      	ldr	r3, [r7, #0]
 8000482:	4614      	mov	r4, r2
 8000484:	461d      	mov	r5, r3
 8000486:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000488:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800048a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800048e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		RCC_I2C1_CLK_EN();
 8000492:	4b74      	ldr	r3, [pc, #464]	; (8000664 <MCAL_I2C_Init+0x208>)
 8000494:	69db      	ldr	r3, [r3, #28]
 8000496:	4a73      	ldr	r2, [pc, #460]	; (8000664 <MCAL_I2C_Init+0x208>)
 8000498:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800049c:	61d3      	str	r3, [r2, #28]
 800049e:	e014      	b.n	80004ca <MCAL_I2C_Init+0x6e>
	}
	else if(I2Cx == I2C2)
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	4a71      	ldr	r2, [pc, #452]	; (8000668 <MCAL_I2C_Init+0x20c>)
 80004a4:	4293      	cmp	r3, r2
 80004a6:	d110      	bne.n	80004ca <MCAL_I2C_Init+0x6e>
	{
		Global_I2C_Config[1] = *I2CConfig;
 80004a8:	4b6d      	ldr	r3, [pc, #436]	; (8000660 <MCAL_I2C_Init+0x204>)
 80004aa:	683a      	ldr	r2, [r7, #0]
 80004ac:	f103 041c 	add.w	r4, r3, #28
 80004b0:	4615      	mov	r5, r2
 80004b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004b6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80004ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		RCC_I2C2_CLK_EN();
 80004be:	4b69      	ldr	r3, [pc, #420]	; (8000664 <MCAL_I2C_Init+0x208>)
 80004c0:	69db      	ldr	r3, [r3, #28]
 80004c2:	4a68      	ldr	r2, [pc, #416]	; (8000664 <MCAL_I2C_Init+0x208>)
 80004c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004c8:	61d3      	str	r3, [r2, #28]
	}

	if(I2CConfig->Device_Mode == Device_Mode_I2C)
 80004ca:	683b      	ldr	r3, [r7, #0]
 80004cc:	781b      	ldrb	r3, [r3, #0]
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	f040 80bd 	bne.w	800064e <MCAL_I2C_Init+0x1f2>
	{
		/*---------------- Init Timing ----------------*/
		// Program the peripheral input clock in I2C_CR2.FREQ[5:0]
		// Get I2C_CR2 value
		tempreg = I2Cx->CR2;
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	685b      	ldr	r3, [r3, #4]
 80004d8:	82fb      	strh	r3, [r7, #22]
		// Clear FREQ[5:0] bits
		tempreg &= ~(0x3F << 0);
 80004da:	8afb      	ldrh	r3, [r7, #22]
 80004dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80004e0:	82fb      	strh	r3, [r7, #22]
		// Get pclk1 frequency value
		pclk1 = MCAL_RCC_GetPCLK1Freq();
 80004e2:	f000 fbc1 	bl	8000c68 <MCAL_RCC_GetPCLK1Freq>
 80004e6:	60f8      	str	r0, [r7, #12]
		freqrange = (uint16_t)(pclk1 / 1000000);
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	4a60      	ldr	r2, [pc, #384]	; (800066c <MCAL_I2C_Init+0x210>)
 80004ec:	fba2 2303 	umull	r2, r3, r2, r3
 80004f0:	0c9b      	lsrs	r3, r3, #18
 80004f2:	82bb      	strh	r3, [r7, #20]

		// Disable the selected I2C peripheral to configure time
		// Clear Bit 0 PE: Peripheral enable in CR1
		I2Cx->CR1 &= ~(1 << 0);
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	f023 0201 	bic.w	r2, r3, #1
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	601a      	str	r2, [r3, #0]

		// Set frequency bits depending on freqrange value
		tempreg |= freqrange;
 8000500:	8afa      	ldrh	r2, [r7, #22]
 8000502:	8abb      	ldrh	r3, [r7, #20]
 8000504:	4313      	orrs	r3, r2
 8000506:	82fb      	strh	r3, [r7, #22]
		I2Cx->CR2 = tempreg;
 8000508:	8afa      	ldrh	r2, [r7, #22]
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	605a      	str	r2, [r3, #4]

		if(I2CConfig->Clock_Speed == I2C_SCLK_SM_50K || I2CConfig->Clock_Speed == I2C_SCLK_SM_100K)
 800050e:	683b      	ldr	r3, [r7, #0]
 8000510:	685b      	ldr	r3, [r3, #4]
 8000512:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000516:	4293      	cmp	r3, r2
 8000518:	d004      	beq.n	8000524 <MCAL_I2C_Init+0xc8>
 800051a:	683b      	ldr	r3, [r7, #0]
 800051c:	685b      	ldr	r3, [r3, #4]
 800051e:	4a54      	ldr	r2, [pc, #336]	; (8000670 <MCAL_I2C_Init+0x214>)
 8000520:	4293      	cmp	r3, r2
 8000522:	d118      	bne.n	8000556 <MCAL_I2C_Init+0xfa>
			// Standard mode speed calculation
			/* Tclk/2 = CCR * Tpclk1
			 * CCR = Tclk/(2*Tpclk1)
			 * CCR = Fpclk1/(2*I2C_ClockFreq)
			 */
			result = (uint16_t)(pclk1 / (I2CConfig->Clock_Speed << 1));
 8000524:	683b      	ldr	r3, [r7, #0]
 8000526:	685b      	ldr	r3, [r3, #4]
 8000528:	005b      	lsls	r3, r3, #1
 800052a:	68fa      	ldr	r2, [r7, #12]
 800052c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000530:	827b      	strh	r3, [r7, #18]
			tempreg = 0;
 8000532:	2300      	movs	r3, #0
 8000534:	82fb      	strh	r3, [r7, #22]
			tempreg |= result;
 8000536:	8afa      	ldrh	r2, [r7, #22]
 8000538:	8a7b      	ldrh	r3, [r7, #18]
 800053a:	4313      	orrs	r3, r2
 800053c:	82fb      	strh	r3, [r7, #22]

			// Bit 15 F/S: I2C master mode selection
			// 0: Sm mode I2C , 1: Fm mode I2C
			tempreg &= ~(1 << 15);
 800053e:	8afb      	ldrh	r3, [r7, #22]
 8000540:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000544:	82fb      	strh	r3, [r7, #22]

			// Configure the clock control registers I2C_CCR
			I2Cx->CCR = tempreg;
 8000546:	8afa      	ldrh	r2, [r7, #22]
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	61da      	str	r2, [r3, #28]

			// For instance: in Sm mode, the maximum allowed SCL rise time is 1000 ns.
			// If, in the I2C_CR2 register, the value of FREQ[5:0] bits is equal to 0x08 and TPCLK1 = 125 ns
			// therefore the TRISE[5:0] bits must be programmed with 09h.
			I2Cx->TRISE = freqrange + 1;
 800054c:	8abb      	ldrh	r3, [r7, #20]
 800054e:	3301      	adds	r3, #1
 8000550:	461a      	mov	r2, r3
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	621a      	str	r2, [r3, #32]
			// Fast mode not supported
		}

		/*---------------- I2C CR1 Configuration ----------------*/
		// Get I2C_CR1 value
		tempreg = I2Cx->CR1;
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	82fb      	strh	r3, [r7, #22]
		tempreg |= (uint16_t)(I2CConfig->Ack_Control | I2CConfig->General_Call_Address_Detection |
 800055c:	683b      	ldr	r3, [r7, #0]
 800055e:	8a5a      	ldrh	r2, [r3, #18]
 8000560:	683b      	ldr	r3, [r7, #0]
 8000562:	7d1b      	ldrb	r3, [r3, #20]
 8000564:	b29b      	uxth	r3, r3
 8000566:	4313      	orrs	r3, r2
 8000568:	b29b      	uxth	r3, r3
 800056a:	b21a      	sxth	r2, r3
				I2CConfig->Device_Mode | I2CConfig->Stretch_Mode);
 800056c:	683b      	ldr	r3, [r7, #0]
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	b21b      	sxth	r3, r3
		tempreg |= (uint16_t)(I2CConfig->Ack_Control | I2CConfig->General_Call_Address_Detection |
 8000572:	4313      	orrs	r3, r2
 8000574:	b21a      	sxth	r2, r3
				I2CConfig->Device_Mode | I2CConfig->Stretch_Mode);
 8000576:	683b      	ldr	r3, [r7, #0]
 8000578:	7a1b      	ldrb	r3, [r3, #8]
 800057a:	b21b      	sxth	r3, r3
 800057c:	4313      	orrs	r3, r2
 800057e:	b21b      	sxth	r3, r3
		tempreg |= (uint16_t)(I2CConfig->Ack_Control | I2CConfig->General_Call_Address_Detection |
 8000580:	b29a      	uxth	r2, r3
 8000582:	8afb      	ldrh	r3, [r7, #22]
 8000584:	4313      	orrs	r3, r2
 8000586:	82fb      	strh	r3, [r7, #22]

		I2Cx->CR1 = tempreg;
 8000588:	8afa      	ldrh	r2, [r7, #22]
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	601a      	str	r2, [r3, #0]

		/*---------------- I2C OAR1,OAR2 Configuration ----------------*/
		tempreg = 0;
 800058e:	2300      	movs	r3, #0
 8000590:	82fb      	strh	r3, [r7, #22]
		tempreg |= I2CConfig->Slave_Address.I2C_Addressing_Slave_Mode;
 8000592:	683b      	ldr	r3, [r7, #0]
 8000594:	895a      	ldrh	r2, [r3, #10]
 8000596:	8afb      	ldrh	r3, [r7, #22]
 8000598:	4313      	orrs	r3, r2
 800059a:	82fb      	strh	r3, [r7, #22]
		tempreg |= (I2CConfig->Slave_Address.Primary_Slave_Address << 1);
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	89db      	ldrh	r3, [r3, #14]
 80005a0:	005b      	lsls	r3, r3, #1
 80005a2:	b21a      	sxth	r2, r3
 80005a4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80005a8:	4313      	orrs	r3, r2
 80005aa:	b21b      	sxth	r3, r3
 80005ac:	82fb      	strh	r3, [r7, #22]
		I2Cx->OAR1 = tempreg;
 80005ae:	8afa      	ldrh	r2, [r7, #22]
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	609a      	str	r2, [r3, #8]

		if(I2CConfig->Slave_Address.Dual_Address_Status == I2C_DUAL_ADDRESS_ENABLE)
 80005b4:	683b      	ldr	r3, [r7, #0]
 80005b6:	7b1b      	ldrb	r3, [r3, #12]
 80005b8:	2b01      	cmp	r3, #1
 80005ba:	d111      	bne.n	80005e0 <MCAL_I2C_Init+0x184>
		{
			tempreg = 0;
 80005bc:	2300      	movs	r3, #0
 80005be:	82fb      	strh	r3, [r7, #22]
			// Bit 0 ENDUAL: Dual addressing mode enable
			tempreg |= (1 << 0);
 80005c0:	8afb      	ldrh	r3, [r7, #22]
 80005c2:	f043 0301 	orr.w	r3, r3, #1
 80005c6:	82fb      	strh	r3, [r7, #22]
			tempreg |= (I2CConfig->Slave_Address.Secondary_Slave_Address << 1);
 80005c8:	683b      	ldr	r3, [r7, #0]
 80005ca:	8a1b      	ldrh	r3, [r3, #16]
 80005cc:	005b      	lsls	r3, r3, #1
 80005ce:	b21a      	sxth	r2, r3
 80005d0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80005d4:	4313      	orrs	r3, r2
 80005d6:	b21b      	sxth	r3, r3
 80005d8:	82fb      	strh	r3, [r7, #22]
			I2Cx->OAR2 = tempreg;
 80005da:	8afa      	ldrh	r2, [r7, #22]
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	60da      	str	r2, [r3, #12]
		}

		// Interrupt Mode (Slave Mode) -> Check callback function
		if(I2CConfig->p_Slave_Event_CallBack)
 80005e0:	683b      	ldr	r3, [r7, #0]
 80005e2:	699b      	ldr	r3, [r3, #24]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d026      	beq.n	8000636 <MCAL_I2C_Init+0x1da>
		{
			// Bit 8 ITERREN: Error interrupt enable
			// Bit 9 ITEVTEN: Event interrupt enable
			// Bit 10 ITBUFEN: Buffer interrupt enable
			I2Cx->CR2 |= (1 << 8) | (1 << 9) | (1 << 10);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	685b      	ldr	r3, [r3, #4]
 80005ec:	f443 62e0 	orr.w	r2, r3, #1792	; 0x700
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	605a      	str	r2, [r3, #4]

			if(I2Cx == I2C1)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	4a19      	ldr	r2, [pc, #100]	; (800065c <MCAL_I2C_Init+0x200>)
 80005f8:	4293      	cmp	r3, r2
 80005fa:	d10c      	bne.n	8000616 <MCAL_I2C_Init+0x1ba>
			{
				NVIC_IRQ31_I2C1_EV_Enable();
 80005fc:	4b1d      	ldr	r3, [pc, #116]	; (8000674 <MCAL_I2C_Init+0x218>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a1c      	ldr	r2, [pc, #112]	; (8000674 <MCAL_I2C_Init+0x218>)
 8000602:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000606:	6013      	str	r3, [r2, #0]
				NVIC_IRQ32_I2C1_ER_Enable();
 8000608:	4b1b      	ldr	r3, [pc, #108]	; (8000678 <MCAL_I2C_Init+0x21c>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a1a      	ldr	r2, [pc, #104]	; (8000678 <MCAL_I2C_Init+0x21c>)
 800060e:	f043 0301 	orr.w	r3, r3, #1
 8000612:	6013      	str	r3, [r2, #0]
 8000614:	e00f      	b.n	8000636 <MCAL_I2C_Init+0x1da>
			}
			else if(I2Cx == I2C2)
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	4a13      	ldr	r2, [pc, #76]	; (8000668 <MCAL_I2C_Init+0x20c>)
 800061a:	4293      	cmp	r3, r2
 800061c:	d10b      	bne.n	8000636 <MCAL_I2C_Init+0x1da>
			{
				NVIC_IRQ33_I2C2_EV_Enable();
 800061e:	4b16      	ldr	r3, [pc, #88]	; (8000678 <MCAL_I2C_Init+0x21c>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4a15      	ldr	r2, [pc, #84]	; (8000678 <MCAL_I2C_Init+0x21c>)
 8000624:	f043 0302 	orr.w	r3, r3, #2
 8000628:	6013      	str	r3, [r2, #0]
				NVIC_IRQ34_I2C2_ER_Enable();
 800062a:	4b13      	ldr	r3, [pc, #76]	; (8000678 <MCAL_I2C_Init+0x21c>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	4a12      	ldr	r2, [pc, #72]	; (8000678 <MCAL_I2C_Init+0x21c>)
 8000630:	f043 0304 	orr.w	r3, r3, #4
 8000634:	6013      	str	r3, [r2, #0]
			}
		}

		// Clear status registers
		I2Cx->SR1 = 0;
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	2200      	movs	r2, #0
 800063a:	615a      	str	r2, [r3, #20]
		I2Cx->SR2 = 0;
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	2200      	movs	r2, #0
 8000640:	619a      	str	r2, [r3, #24]

		// Enable the selected I2C peripheral
		// Set Bit 0 PE: Peripheral enable in CR1
		I2Cx->CR1 |= (1 << 0);
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f043 0201 	orr.w	r2, r3, #1
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	601a      	str	r2, [r3, #0]
	}
	else if(I2CConfig->Device_Mode == Device_Mode_SMBus)
	{
		//		SMBus not supported
	}
}
 800064e:	bf00      	nop
 8000650:	3718      	adds	r7, #24
 8000652:	46bd      	mov	sp, r7
 8000654:	bdb0      	pop	{r4, r5, r7, pc}
 8000656:	bf00      	nop
 8000658:	007a1200 	.word	0x007a1200
 800065c:	40005400 	.word	0x40005400
 8000660:	20000034 	.word	0x20000034
 8000664:	40021000 	.word	0x40021000
 8000668:	40005800 	.word	0x40005800
 800066c:	431bde83 	.word	0x431bde83
 8000670:	000186a0 	.word	0x000186a0
 8000674:	e000e100 	.word	0xe000e100
 8000678:	e000e104 	.word	0xe000e104

0800067c <MCAL_I2C_GPIO_Set_Pins>:
 * @param[in] 	: I2Cx where x can be (1..3 depending on device used)
 * @retval 		: none
 * Note			: Should enable the corresponding ALT & GPIO in RCC clock Also called after MCAL_I2C_Init()
 */
void MCAL_I2C_GPIO_Set_Pins(I2C_TypeDef *I2Cx)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t PinCfg;
	if(I2Cx == I2C1)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	4a1f      	ldr	r2, [pc, #124]	; (8000704 <MCAL_I2C_GPIO_Set_Pins+0x88>)
 8000688:	4293      	cmp	r3, r2
 800068a:	d118      	bne.n	80006be <MCAL_I2C_GPIO_Set_Pins+0x42>
	{
		// PB6: I2C1 SCL Alternate function output Open-drain
		// PB7: I2C1 SDA Alternate function output Open-drain
		PinCfg.GPIO_PinNumber = GPIO_PIN_6;
 800068c:	2340      	movs	r3, #64	; 0x40
 800068e:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_OD;
 8000690:	2307      	movs	r3, #7
 8000692:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000694:	2301      	movs	r3, #1
 8000696:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000698:	f107 030c 	add.w	r3, r7, #12
 800069c:	4619      	mov	r1, r3
 800069e:	481a      	ldr	r0, [pc, #104]	; (8000708 <MCAL_I2C_GPIO_Set_Pins+0x8c>)
 80006a0:	f7ff fe5d 	bl	800035e <MCAL_GPIO_Init>

		PinCfg.GPIO_PinNumber = GPIO_PIN_7;
 80006a4:	2380      	movs	r3, #128	; 0x80
 80006a6:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_OD;
 80006a8:	2307      	movs	r3, #7
 80006aa:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80006ac:	2301      	movs	r3, #1
 80006ae:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 80006b0:	f107 030c 	add.w	r3, r7, #12
 80006b4:	4619      	mov	r1, r3
 80006b6:	4814      	ldr	r0, [pc, #80]	; (8000708 <MCAL_I2C_GPIO_Set_Pins+0x8c>)
 80006b8:	f7ff fe51 	bl	800035e <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber = GPIO_PIN_11;
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_OD;
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
		MCAL_GPIO_Init(GPIOB, &PinCfg);
	}
}
 80006bc:	e01d      	b.n	80006fa <MCAL_I2C_GPIO_Set_Pins+0x7e>
	else if(I2Cx == I2C2)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	4a12      	ldr	r2, [pc, #72]	; (800070c <MCAL_I2C_GPIO_Set_Pins+0x90>)
 80006c2:	4293      	cmp	r3, r2
 80006c4:	d119      	bne.n	80006fa <MCAL_I2C_GPIO_Set_Pins+0x7e>
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 80006c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006ca:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_OD;
 80006cc:	2307      	movs	r3, #7
 80006ce:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80006d0:	2301      	movs	r3, #1
 80006d2:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 80006d4:	f107 030c 	add.w	r3, r7, #12
 80006d8:	4619      	mov	r1, r3
 80006da:	480b      	ldr	r0, [pc, #44]	; (8000708 <MCAL_I2C_GPIO_Set_Pins+0x8c>)
 80006dc:	f7ff fe3f 	bl	800035e <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber = GPIO_PIN_11;
 80006e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80006e4:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_OD;
 80006e6:	2307      	movs	r3, #7
 80006e8:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80006ea:	2301      	movs	r3, #1
 80006ec:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 80006ee:	f107 030c 	add.w	r3, r7, #12
 80006f2:	4619      	mov	r1, r3
 80006f4:	4804      	ldr	r0, [pc, #16]	; (8000708 <MCAL_I2C_GPIO_Set_Pins+0x8c>)
 80006f6:	f7ff fe32 	bl	800035e <MCAL_GPIO_Init>
}
 80006fa:	bf00      	nop
 80006fc:	3710      	adds	r7, #16
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40005400 	.word	0x40005400
 8000708:	40010c00 	.word	0x40010c00
 800070c:	40005800 	.word	0x40005800

08000710 <MCAL_I2CMaster_Transmite>:

/*=======================================================*/
void MCAL_I2CMaster_Transmite(I2C_TypeDef *I2Cx, uint16_t devAddr, uint8_t* data,
		uint8_t dataLen, Stop_Condition stop, Repeted_Start start)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b086      	sub	sp, #24
 8000714:	af00      	add	r7, sp, #0
 8000716:	60f8      	str	r0, [r7, #12]
 8000718:	607a      	str	r2, [r7, #4]
 800071a:	461a      	mov	r2, r3
 800071c:	460b      	mov	r3, r1
 800071e:	817b      	strh	r3, [r7, #10]
 8000720:	4613      	mov	r3, r2
 8000722:	727b      	strb	r3, [r7, #9]
	uint8_t i;

	// 1.Set start bit in CR1 to generate start condition
	I2C_GenerateStart(I2Cx, ENABLE, start);
 8000724:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000728:	461a      	mov	r2, r3
 800072a:	2101      	movs	r1, #1
 800072c:	68f8      	ldr	r0, [r7, #12]
 800072e:	f000 f8cd 	bl	80008cc <I2C_GenerateStart>

	// 2.Wait for EV5
	// EV5: SB=1, cleared by reading SR1 register followed by writing DR register with Address.
	while(!(I2C_GetFlagStatus(I2Cx, EV5)));
 8000732:	bf00      	nop
 8000734:	2101      	movs	r1, #1
 8000736:	68f8      	ldr	r0, [r7, #12]
 8000738:	f000 f8f0 	bl	800091c <I2C_GetFlagStatus>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d0f8      	beq.n	8000734 <MCAL_I2CMaster_Transmite+0x24>

	// 3.Send address with write mode
	I2C_SendAddress(I2Cx, devAddr, I2C_DIRECTION_WRITE);
 8000742:	897b      	ldrh	r3, [r7, #10]
 8000744:	2200      	movs	r2, #0
 8000746:	4619      	mov	r1, r3
 8000748:	68f8      	ldr	r0, [r7, #12]
 800074a:	f000 f95d 	bl	8000a08 <I2C_SendAddress>

	// 4.Wait for EV6
	// EV6: ADDR=1, cleared by reading SR1 register followed by reading SR2.
	while(!(I2C_GetFlagStatus(I2Cx, EV6)));
 800074e:	bf00      	nop
 8000750:	2102      	movs	r1, #2
 8000752:	68f8      	ldr	r0, [r7, #12]
 8000754:	f000 f8e2 	bl	800091c <I2C_GetFlagStatus>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d0f8      	beq.n	8000750 <MCAL_I2CMaster_Transmite+0x40>

	//5.TRA, BUSY, MSL, TXE flags
	while(!(I2C_GetFlagStatus(I2Cx, MASTER_BYTE_TRANSMITTING)));
 800075e:	bf00      	nop
 8000760:	491c      	ldr	r1, [pc, #112]	; (80007d4 <MCAL_I2CMaster_Transmite+0xc4>)
 8000762:	68f8      	ldr	r0, [r7, #12]
 8000764:	f000 f8da 	bl	800091c <I2C_GetFlagStatus>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d0f8      	beq.n	8000760 <MCAL_I2CMaster_Transmite+0x50>

	// 6.Send Data
	for(i = 0; i < dataLen; i++)
 800076e:	2300      	movs	r3, #0
 8000770:	75fb      	strb	r3, [r7, #23]
 8000772:	e019      	b.n	80007a8 <MCAL_I2CMaster_Transmite+0x98>
	{
		// 6.EV8_1: TxE=1, shift register empty, data register empty, write Data1 in DR.
		while(!(I2C_GetFlagStatus(I2Cx, EV8_1)));
 8000774:	bf00      	nop
 8000776:	2105      	movs	r1, #5
 8000778:	68f8      	ldr	r0, [r7, #12]
 800077a:	f000 f8cf 	bl	800091c <I2C_GetFlagStatus>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d0f8      	beq.n	8000776 <MCAL_I2CMaster_Transmite+0x66>
		I2Cx->DR = data[i];
 8000784:	7dfb      	ldrb	r3, [r7, #23]
 8000786:	687a      	ldr	r2, [r7, #4]
 8000788:	4413      	add	r3, r2
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	461a      	mov	r2, r3
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	611a      	str	r2, [r3, #16]
		// Wait EV8
		// EV8: TxE=1, shift register not empty, data register empty, cleared by writing DR register
		while(!(I2C_GetFlagStatus(I2Cx, EV8)));
 8000792:	bf00      	nop
 8000794:	2104      	movs	r1, #4
 8000796:	68f8      	ldr	r0, [r7, #12]
 8000798:	f000 f8c0 	bl	800091c <I2C_GetFlagStatus>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d0f8      	beq.n	8000794 <MCAL_I2CMaster_Transmite+0x84>
	for(i = 0; i < dataLen; i++)
 80007a2:	7dfb      	ldrb	r3, [r7, #23]
 80007a4:	3301      	adds	r3, #1
 80007a6:	75fb      	strb	r3, [r7, #23]
 80007a8:	7dfa      	ldrb	r2, [r7, #23]
 80007aa:	7a7b      	ldrb	r3, [r7, #9]
 80007ac:	429a      	cmp	r2, r3
 80007ae:	d3e1      	bcc.n	8000774 <MCAL_I2CMaster_Transmite+0x64>
	}

	if(stop == WITH_STOP)
 80007b0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d104      	bne.n	80007c2 <MCAL_I2CMaster_Transmite+0xb2>
	{
		//7. Send stop condition
		I2C_GenerateStop(I2Cx , ENABLE);
 80007b8:	2101      	movs	r1, #1
 80007ba:	68f8      	ldr	r0, [r7, #12]
 80007bc:	f000 f95a 	bl	8000a74 <I2C_GenerateStop>
	}
	else
	{
		I2C_GenerateStop(I2Cx, DISABLE);
	}
}
 80007c0:	e003      	b.n	80007ca <MCAL_I2CMaster_Transmite+0xba>
		I2C_GenerateStop(I2Cx, DISABLE);
 80007c2:	2100      	movs	r1, #0
 80007c4:	68f8      	ldr	r0, [r7, #12]
 80007c6:	f000 f955 	bl	8000a74 <I2C_GenerateStop>
}
 80007ca:	bf00      	nop
 80007cc:	3718      	adds	r7, #24
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	00070080 	.word	0x00070080

080007d8 <MCAL_I2CMaster_Receive>:

/*=======================================================*/
void MCAL_I2CMaster_Receive(I2C_TypeDef *I2Cx, uint16_t devAddr, uint8_t* data,
		uint8_t dataLen, Stop_Condition stop, Repeted_Start start)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b086      	sub	sp, #24
 80007dc:	af00      	add	r7, sp, #0
 80007de:	60f8      	str	r0, [r7, #12]
 80007e0:	607a      	str	r2, [r7, #4]
 80007e2:	461a      	mov	r2, r3
 80007e4:	460b      	mov	r3, r1
 80007e6:	817b      	strh	r3, [r7, #10]
 80007e8:	4613      	mov	r3, r2
 80007ea:	727b      	strb	r3, [r7, #9]
	uint8_t i;
	uint8_t index = (I2Cx == I2C1 ? 0 : 1);
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	4a35      	ldr	r2, [pc, #212]	; (80008c4 <MCAL_I2CMaster_Receive+0xec>)
 80007f0:	4293      	cmp	r3, r2
 80007f2:	bf14      	ite	ne
 80007f4:	2301      	movne	r3, #1
 80007f6:	2300      	moveq	r3, #0
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	75bb      	strb	r3, [r7, #22]

	// 1.Set start bit in CR1 to generate start condition
	I2C_GenerateStart(I2Cx, ENABLE, start);
 80007fc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000800:	461a      	mov	r2, r3
 8000802:	2101      	movs	r1, #1
 8000804:	68f8      	ldr	r0, [r7, #12]
 8000806:	f000 f861 	bl	80008cc <I2C_GenerateStart>

	// 2.Wait for EV5
	// EV5: SB=1, cleared by reading SR1 register followed by writing DR register with Address.
	while(!(I2C_GetFlagStatus(I2Cx, EV5)));
 800080a:	bf00      	nop
 800080c:	2101      	movs	r1, #1
 800080e:	68f8      	ldr	r0, [r7, #12]
 8000810:	f000 f884 	bl	800091c <I2C_GetFlagStatus>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d0f8      	beq.n	800080c <MCAL_I2CMaster_Receive+0x34>

	// 3.Send address with read mode
	I2C_SendAddress(I2Cx, devAddr, I2C_DIRECTION_READ);
 800081a:	897b      	ldrh	r3, [r7, #10]
 800081c:	2201      	movs	r2, #1
 800081e:	4619      	mov	r1, r3
 8000820:	68f8      	ldr	r0, [r7, #12]
 8000822:	f000 f8f1 	bl	8000a08 <I2C_SendAddress>

	// 4.Wait for EV6
	// EV6: ADDR=1, cleared by reading SR1 register followed by reading SR2.
	while(!(I2C_GetFlagStatus(I2Cx, EV6)));
 8000826:	bf00      	nop
 8000828:	2102      	movs	r1, #2
 800082a:	68f8      	ldr	r0, [r7, #12]
 800082c:	f000 f876 	bl	800091c <I2C_GetFlagStatus>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d0f8      	beq.n	8000828 <MCAL_I2CMaster_Receive+0x50>

	// Enable acking
	I2C_AcknowledgeConfig(I2Cx, ENABLE);
 8000836:	2101      	movs	r1, #1
 8000838:	68f8      	ldr	r0, [r7, #12]
 800083a:	f000 f936 	bl	8000aaa <I2C_AcknowledgeConfig>

	if(dataLen)
 800083e:	7a7b      	ldrb	r3, [r7, #9]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d01d      	beq.n	8000880 <MCAL_I2CMaster_Receive+0xa8>
	{
		// 5.Read data until length becomes zero
		for(i = 0; i < (dataLen-1); i++)
 8000844:	2300      	movs	r3, #0
 8000846:	75fb      	strb	r3, [r7, #23]
 8000848:	e011      	b.n	800086e <MCAL_I2CMaster_Receive+0x96>
		{
			// Wait until RXNE becomes 1
			while(!(I2C_GetFlagStatus(I2Cx, EV7)));
 800084a:	bf00      	nop
 800084c:	2103      	movs	r1, #3
 800084e:	68f8      	ldr	r0, [r7, #12]
 8000850:	f000 f864 	bl	800091c <I2C_GetFlagStatus>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d0f8      	beq.n	800084c <MCAL_I2CMaster_Receive+0x74>
			// Read data from data register into data buffer
			*(data+i) = I2Cx->DR;
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	6919      	ldr	r1, [r3, #16]
 800085e:	7dfb      	ldrb	r3, [r7, #23]
 8000860:	687a      	ldr	r2, [r7, #4]
 8000862:	4413      	add	r3, r2
 8000864:	b2ca      	uxtb	r2, r1
 8000866:	701a      	strb	r2, [r3, #0]
		for(i = 0; i < (dataLen-1); i++)
 8000868:	7dfb      	ldrb	r3, [r7, #23]
 800086a:	3301      	adds	r3, #1
 800086c:	75fb      	strb	r3, [r7, #23]
 800086e:	7dfa      	ldrb	r2, [r7, #23]
 8000870:	7a7b      	ldrb	r3, [r7, #9]
 8000872:	3b01      	subs	r3, #1
 8000874:	429a      	cmp	r2, r3
 8000876:	dbe8      	blt.n	800084a <MCAL_I2CMaster_Receive+0x72>
		}

		// 6.Send not ack
		I2C_AcknowledgeConfig(I2Cx, DISABLE); // Not to receive
 8000878:	2100      	movs	r1, #0
 800087a:	68f8      	ldr	r0, [r7, #12]
 800087c:	f000 f915 	bl	8000aaa <I2C_AcknowledgeConfig>
	}

	if(stop == WITH_STOP)
 8000880:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d104      	bne.n	8000892 <MCAL_I2CMaster_Receive+0xba>
	{
		//7. Send stop condition
		I2C_GenerateStop(I2Cx , ENABLE);
 8000888:	2101      	movs	r1, #1
 800088a:	68f8      	ldr	r0, [r7, #12]
 800088c:	f000 f8f2 	bl	8000a74 <I2C_GenerateStop>
 8000890:	e003      	b.n	800089a <MCAL_I2CMaster_Receive+0xc2>
	}
	else
	{
		I2C_GenerateStop(I2Cx, DISABLE);
 8000892:	2100      	movs	r1, #0
 8000894:	68f8      	ldr	r0, [r7, #12]
 8000896:	f000 f8ed 	bl	8000a74 <I2C_GenerateStop>
	}

	// Re-enable acking
	if(Global_I2C_Config[index].Ack_Control == I2C_ACK_ENABLE)
 800089a:	7dba      	ldrb	r2, [r7, #22]
 800089c:	490a      	ldr	r1, [pc, #40]	; (80008c8 <MCAL_I2CMaster_Receive+0xf0>)
 800089e:	4613      	mov	r3, r2
 80008a0:	00db      	lsls	r3, r3, #3
 80008a2:	1a9b      	subs	r3, r3, r2
 80008a4:	009b      	lsls	r3, r3, #2
 80008a6:	440b      	add	r3, r1
 80008a8:	3312      	adds	r3, #18
 80008aa:	881b      	ldrh	r3, [r3, #0]
 80008ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80008b0:	d103      	bne.n	80008ba <MCAL_I2CMaster_Receive+0xe2>
	{
		I2C_AcknowledgeConfig(I2Cx, ENABLE);
 80008b2:	2101      	movs	r1, #1
 80008b4:	68f8      	ldr	r0, [r7, #12]
 80008b6:	f000 f8f8 	bl	8000aaa <I2C_AcknowledgeConfig>
	}
}
 80008ba:	bf00      	nop
 80008bc:	3718      	adds	r7, #24
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40005400 	.word	0x40005400
 80008c8:	20000034 	.word	0x20000034

080008cc <I2C_GenerateStart>:
 * =======================================================================================
 * 							Generic APIs Definitions
 * =======================================================================================
 */
static void I2C_GenerateStart(I2C_TypeDef *I2Cx, FunctionalState NewState, Repeted_Start start)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
 80008d4:	460b      	mov	r3, r1
 80008d6:	70fb      	strb	r3, [r7, #3]
 80008d8:	4613      	mov	r3, r2
 80008da:	70bb      	strb	r3, [r7, #2]
	if(start == START)
 80008dc:	78bb      	ldrb	r3, [r7, #2]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d107      	bne.n	80008f2 <I2C_GenerateStart+0x26>
	{
		// Check if bus is idle
		while(I2C_GetFlagStatus(I2Cx, I2C_FLAG_BUSY));
 80008e2:	bf00      	nop
 80008e4:	2100      	movs	r1, #0
 80008e6:	6878      	ldr	r0, [r7, #4]
 80008e8:	f000 f818 	bl	800091c <I2C_GetFlagStatus>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d1f8      	bne.n	80008e4 <I2C_GenerateStart+0x18>
	}

	if(NewState == ENABLE)
 80008f2:	78fb      	ldrb	r3, [r7, #3]
 80008f4:	2b01      	cmp	r3, #1
 80008f6:	d106      	bne.n	8000906 <I2C_GenerateStart+0x3a>
		// 0: No Start generation
		// 1: Repeated start generation
		// In Slave mode:
		// 0: No Start generation
		// 1: Start generation when the bus is free
		I2Cx->CR1 |= (1 << 8);
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	601a      	str	r2, [r3, #0]
	else
	{
		// Disable start condition generation
		I2Cx->CR1 &= ~(1 << 8);
	}
}
 8000904:	e005      	b.n	8000912 <I2C_GenerateStart+0x46>
		I2Cx->CR1 &= ~(1 << 8);
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	601a      	str	r2, [r3, #0]
}
 8000912:	bf00      	nop
 8000914:	3708      	adds	r7, #8
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
	...

0800091c <I2C_GetFlagStatus>:

static FlagStatus I2C_GetFlagStatus(I2C_TypeDef *I2Cx, Status flag)
{
 800091c:	b480      	push	{r7}
 800091e:	b089      	sub	sp, #36	; 0x24
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
 8000924:	6039      	str	r1, [r7, #0]
	volatile uint32_t dummyRead;
	FlagStatus bitStatus = RESET;
 8000926:	2300      	movs	r3, #0
 8000928:	77fb      	strb	r3, [r7, #31]
	uint32_t flag1 = 0, flag2 = 0;
 800092a:	2300      	movs	r3, #0
 800092c:	61bb      	str	r3, [r7, #24]
 800092e:	2300      	movs	r3, #0
 8000930:	617b      	str	r3, [r7, #20]
	uint32_t lastEvent = 0;
 8000932:	2300      	movs	r3, #0
 8000934:	613b      	str	r3, [r7, #16]

	switch(flag)
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	2b03      	cmp	r3, #3
 800093a:	d02a      	beq.n	8000992 <I2C_GetFlagStatus+0x76>
 800093c:	2b03      	cmp	r3, #3
 800093e:	d804      	bhi.n	800094a <I2C_GetFlagStatus+0x2e>
 8000940:	2b01      	cmp	r3, #1
 8000942:	d011      	beq.n	8000968 <I2C_GetFlagStatus+0x4c>
 8000944:	2b01      	cmp	r3, #1
 8000946:	d818      	bhi.n	800097a <I2C_GetFlagStatus+0x5e>
 8000948:	e005      	b.n	8000956 <I2C_GetFlagStatus+0x3a>
 800094a:	2b05      	cmp	r3, #5
 800094c:	d92a      	bls.n	80009a4 <I2C_GetFlagStatus+0x88>
 800094e:	4a2d      	ldr	r2, [pc, #180]	; (8000a04 <I2C_GetFlagStatus+0xe8>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d030      	beq.n	80009b6 <I2C_GetFlagStatus+0x9a>
 8000954:	e050      	b.n	80009f8 <I2C_GetFlagStatus+0xdc>
			// 1: Communication ongoing on the bus
			// – Set by hardware on detection of SDA or SCL low
			// – cleared by hardware on detection of a Stop condition.
			// It indicates a communication in progress on the bus. This information is still updated when
			// the interface is disabled (PE=0)
			if((I2Cx->SR2 & (1<<1)))
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	699b      	ldr	r3, [r3, #24]
 800095a:	f003 0302 	and.w	r3, r3, #2
 800095e:	2b00      	cmp	r3, #0
 8000960:	d041      	beq.n	80009e6 <I2C_GetFlagStatus+0xca>
			{
				bitStatus = SET;
 8000962:	2301      	movs	r3, #1
 8000964:	77fb      	strb	r3, [r7, #31]
			}
			break;
 8000966:	e03e      	b.n	80009e6 <I2C_GetFlagStatus+0xca>
			// 0: No Start condition
			// 1: Start condition generated.
			// – Set when a Start condition generated.
			// – Cleared by software by reading the SR1 register followed by writing the DR register, or by
			// hardware when PE=0
			if((I2Cx->SR1 & (1<<0)))
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	695b      	ldr	r3, [r3, #20]
 800096c:	f003 0301 	and.w	r3, r3, #1
 8000970:	2b00      	cmp	r3, #0
 8000972:	d03a      	beq.n	80009ea <I2C_GetFlagStatus+0xce>
			{
				bitStatus = SET;
 8000974:	2301      	movs	r3, #1
 8000976:	77fb      	strb	r3, [r7, #31]
			}
			break;
 8000978:	e037      	b.n	80009ea <I2C_GetFlagStatus+0xce>
			// 0: Address mismatched or not received.
			// 1: Received address matched
			// Address sent (Master)
			// 0: No end of address transmission
			// 1: End of address transmission
			if((I2Cx->SR1 & (1<<1)))
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	695b      	ldr	r3, [r3, #20]
 800097e:	f003 0302 	and.w	r3, r3, #2
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <I2C_GetFlagStatus+0x6e>
			{
				bitStatus = SET;
 8000986:	2301      	movs	r3, #1
 8000988:	77fb      	strb	r3, [r7, #31]
			}
			// This bit is cleared by software reading SR1 register followed reading SR2, or by hardware
			// when PE=0.
			dummyRead = I2Cx->SR2;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	699b      	ldr	r3, [r3, #24]
 800098e:	60fb      	str	r3, [r7, #12]
			break;
 8000990:	e032      	b.n	80009f8 <I2C_GetFlagStatus+0xdc>
			// 0: Data register empty
			// 1: Data register not empty
			// – Set when data register is not empty in receiver mode. RxNE is not set during address phase.
			// – Cleared by software reading or writing the DR register or by hardware when PE=0.
			// RxNE is not set in case of ARLO event.
			if((I2Cx->SR1 & (1<<6)))
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	695b      	ldr	r3, [r3, #20]
 8000996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800099a:	2b00      	cmp	r3, #0
 800099c:	d027      	beq.n	80009ee <I2C_GetFlagStatus+0xd2>
			{
				bitStatus = SET;
 800099e:	2301      	movs	r3, #1
 80009a0:	77fb      	strb	r3, [r7, #31]
			}
			break;
 80009a2:	e024      	b.n	80009ee <I2C_GetFlagStatus+0xd2>
			// 0: Data register not empty
			// 1: Data register empty
			// – Set when DR is empty in transmission. TxE is not set during address phase.
			// – Cleared by software writing to the DR register or by hardware after a start or a stop condition
			// or when PE=0.
			if((I2Cx->SR1 & (1<<7)))
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	695b      	ldr	r3, [r3, #20]
 80009a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d020      	beq.n	80009f2 <I2C_GetFlagStatus+0xd6>
			{
				//Data register empty
				bitStatus = SET;
 80009b0:	2301      	movs	r3, #1
 80009b2:	77fb      	strb	r3, [r7, #31]
			}
			break;
 80009b4:	e01d      	b.n	80009f2 <I2C_GetFlagStatus+0xd6>

		case MASTER_BYTE_TRANSMITTING:
			// Read I2Cx status registers
			flag1 = I2Cx->SR1;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	695b      	ldr	r3, [r3, #20]
 80009ba:	61bb      	str	r3, [r7, #24]
			flag2 = I2Cx->SR2;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	699b      	ldr	r3, [r3, #24]
 80009c0:	617b      	str	r3, [r7, #20]
			flag2 <<= 16;
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	041b      	lsls	r3, r3, #16
 80009c6:	617b      	str	r3, [r7, #20]

			// Get lastEvent value from I2C status register
			lastEvent = (flag1 | flag2) & ((uint32_t)0x00FFFFFF);
 80009c8:	69ba      	ldr	r2, [r7, #24]
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	4313      	orrs	r3, r2
 80009ce:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80009d2:	613b      	str	r3, [r7, #16]
			// Check whether the last event contains the I2C_EVENT
			if((lastEvent & flag) == flag)
 80009d4:	693a      	ldr	r2, [r7, #16]
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	4013      	ands	r3, r2
 80009da:	683a      	ldr	r2, [r7, #0]
 80009dc:	429a      	cmp	r2, r3
 80009de:	d10a      	bne.n	80009f6 <I2C_GetFlagStatus+0xda>
			{
				// last event is equal to I2C_EVENT
				bitStatus = SET;
 80009e0:	2301      	movs	r3, #1
 80009e2:	77fb      	strb	r3, [r7, #31]
			}
			break;
 80009e4:	e007      	b.n	80009f6 <I2C_GetFlagStatus+0xda>
			break;
 80009e6:	bf00      	nop
 80009e8:	e006      	b.n	80009f8 <I2C_GetFlagStatus+0xdc>
			break;
 80009ea:	bf00      	nop
 80009ec:	e004      	b.n	80009f8 <I2C_GetFlagStatus+0xdc>
			break;
 80009ee:	bf00      	nop
 80009f0:	e002      	b.n	80009f8 <I2C_GetFlagStatus+0xdc>
			break;
 80009f2:	bf00      	nop
 80009f4:	e000      	b.n	80009f8 <I2C_GetFlagStatus+0xdc>
			break;
 80009f6:	bf00      	nop
	}

	return bitStatus;
 80009f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	3724      	adds	r7, #36	; 0x24
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bc80      	pop	{r7}
 8000a02:	4770      	bx	lr
 8000a04:	00070080 	.word	0x00070080

08000a08 <I2C_SendAddress>:

static void I2C_SendAddress(I2C_TypeDef *I2Cx, uint16_t Address, I2C_Direction direction)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b085      	sub	sp, #20
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
 8000a10:	460b      	mov	r3, r1
 8000a12:	807b      	strh	r3, [r7, #2]
 8000a14:	4613      	mov	r3, r2
 8000a16:	707b      	strb	r3, [r7, #1]
	uint8_t index = (I2Cx == I2C1 ? 0:1);
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	4a14      	ldr	r2, [pc, #80]	; (8000a6c <I2C_SendAddress+0x64>)
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	bf14      	ite	ne
 8000a20:	2301      	movne	r3, #1
 8000a22:	2300      	moveq	r3, #0
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	73fb      	strb	r3, [r7, #15]
	if(Global_I2C_Config[index].Slave_Address.I2C_Addressing_Slave_Mode == I2C_ADDRESSING_SLAVE_MODE_7BITS)
 8000a28:	7bfa      	ldrb	r2, [r7, #15]
 8000a2a:	4911      	ldr	r1, [pc, #68]	; (8000a70 <I2C_SendAddress+0x68>)
 8000a2c:	4613      	mov	r3, r2
 8000a2e:	00db      	lsls	r3, r3, #3
 8000a30:	1a9b      	subs	r3, r3, r2
 8000a32:	009b      	lsls	r3, r3, #2
 8000a34:	440b      	add	r3, r1
 8000a36:	330a      	adds	r3, #10
 8000a38:	881b      	ldrh	r3, [r3, #0]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d111      	bne.n	8000a62 <I2C_SendAddress+0x5a>
	{
		Address <<= 1;
 8000a3e:	887b      	ldrh	r3, [r7, #2]
 8000a40:	005b      	lsls	r3, r3, #1
 8000a42:	807b      	strh	r3, [r7, #2]
		if(direction == I2C_DIRECTION_WRITE)
 8000a44:	787b      	ldrb	r3, [r7, #1]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d104      	bne.n	8000a54 <I2C_SendAddress+0x4c>
		{
			// Reset address bit0 for write
			Address &= ~(1<<0);
 8000a4a:	887b      	ldrh	r3, [r7, #2]
 8000a4c:	f023 0301 	bic.w	r3, r3, #1
 8000a50:	807b      	strh	r3, [r7, #2]
 8000a52:	e003      	b.n	8000a5c <I2C_SendAddress+0x54>
		}
		else
		{
			// Set address bit0 for read
			Address |= (1<<0);
 8000a54:	887b      	ldrh	r3, [r7, #2]
 8000a56:	f043 0301 	orr.w	r3, r3, #1
 8000a5a:	807b      	strh	r3, [r7, #2]
		}

		// Send the address on SDA
		I2Cx->DR = Address;
 8000a5c:	887a      	ldrh	r2, [r7, #2]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	611a      	str	r2, [r3, #16]
	}
	else
	{
		// 10-BITS addressing not supported
	}
}
 8000a62:	bf00      	nop
 8000a64:	3714      	adds	r7, #20
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bc80      	pop	{r7}
 8000a6a:	4770      	bx	lr
 8000a6c:	40005400 	.word	0x40005400
 8000a70:	20000034 	.word	0x20000034

08000a74 <I2C_GenerateStop>:

static void I2C_GenerateStop(I2C_TypeDef *I2Cx, FunctionalState NewState)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
 8000a7c:	460b      	mov	r3, r1
 8000a7e:	70fb      	strb	r3, [r7, #3]
	if(NewState == ENABLE)
 8000a80:	78fb      	ldrb	r3, [r7, #3]
 8000a82:	2b01      	cmp	r3, #1
 8000a84:	d106      	bne.n	8000a94 <I2C_GenerateStop+0x20>
		// The bit is set and cleared by software, cleared by hardware when a Stop condition is
		// detected, set by hardware when a timeout error is detected.
		// In Master Mode:
		// 0: No Stop generation.
		// 1: Stop generation after the current byte transfer or after the current Start condition is sent
		I2Cx->CR1 |= (1 << 9);
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	601a      	str	r2, [r3, #0]
	else
	{
		// Disable stop condition generation
		I2Cx->CR1 &= ~(1 << 9);
	}
}
 8000a92:	e005      	b.n	8000aa0 <I2C_GenerateStop+0x2c>
		I2Cx->CR1 &= ~(1 << 9);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	601a      	str	r2, [r3, #0]
}
 8000aa0:	bf00      	nop
 8000aa2:	370c      	adds	r7, #12
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bc80      	pop	{r7}
 8000aa8:	4770      	bx	lr

08000aaa <I2C_AcknowledgeConfig>:

static void I2C_AcknowledgeConfig(I2C_TypeDef *I2Cx, FunctionalState NewState)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	b083      	sub	sp, #12
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	6078      	str	r0, [r7, #4]
 8000ab2:	460b      	mov	r3, r1
 8000ab4:	70fb      	strb	r3, [r7, #3]
	if(NewState == ENABLE)
 8000ab6:	78fb      	ldrb	r3, [r7, #3]
 8000ab8:	2b01      	cmp	r3, #1
 8000aba:	d106      	bne.n	8000aca <I2C_AcknowledgeConfig+0x20>
	{
		// Bit 10 ACK: Acknowledge enable
		// This bit is set and cleared by software and cleared by hardware when PE=0.
		// 0: No acknowledge returned
		// 1: Acknowledge returned after a byte is received (matched address or data)
		I2Cx->CR1 |= (1 << 10);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		I2Cx->CR1 &= ~(1 << 10);
	}
}
 8000ac8:	e005      	b.n	8000ad6 <I2C_AcknowledgeConfig+0x2c>
		I2Cx->CR1 &= ~(1 << 10);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	601a      	str	r2, [r3, #0]
}
 8000ad6:	bf00      	nop
 8000ad8:	370c      	adds	r7, #12
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bc80      	pop	{r7}
 8000ade:	4770      	bx	lr

08000ae0 <I2C1_EV_IRQHandler>:
 * ===================================
 *                ISR
 * ===================================
 */
void I2C1_EV_IRQHandler(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b086      	sub	sp, #24
 8000ae4:	af00      	add	r7, sp, #0
	volatile uint32_t dummyRead;
	I2C_TypeDef *I2Cx = I2C1;
 8000ae6:	4b3d      	ldr	r3, [pc, #244]	; (8000bdc <I2C1_EV_IRQHandler+0xfc>)
 8000ae8:	617b      	str	r3, [r7, #20]

	// Interrupt handling for both master and slave modes of a device
	uint32_t temp1, temp2, temp3;

	temp1 = I2Cx->CR2 & (1<<9);  // ITEVTEN
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	685b      	ldr	r3, [r3, #4]
 8000aee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000af2:	613b      	str	r3, [r7, #16]
	temp2 = I2Cx->CR2 & (1<<10); // ITBUFEN
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000afc:	60fb      	str	r3, [r7, #12]
	temp3 = I2Cx->SR1 & (1<<4);  // STOPF
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	695b      	ldr	r3, [r3, #20]
 8000b02:	f003 0310 	and.w	r3, r3, #16
 8000b06:	60bb      	str	r3, [r7, #8]

	// Handle stop condition event (applicable only in slave mode)
	if(temp1 && temp3)
 8000b08:	693b      	ldr	r3, [r7, #16]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d00a      	beq.n	8000b24 <I2C1_EV_IRQHandler+0x44>
 8000b0e:	68bb      	ldr	r3, [r7, #8]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d007      	beq.n	8000b24 <I2C1_EV_IRQHandler+0x44>
	{
		// STOPF Cleared by software reading the SR1 register followed by a write in the CR1 register,
		// i have already read SR1 in temp3
		// then next statement i write to CR1
		I2C1->CR1 |= 0x0000;
 8000b14:	4b31      	ldr	r3, [pc, #196]	; (8000bdc <I2C1_EV_IRQHandler+0xfc>)
 8000b16:	4a31      	ldr	r2, [pc, #196]	; (8000bdc <I2C1_EV_IRQHandler+0xfc>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	6013      	str	r3, [r2, #0]
		Global_I2C_Config[0].p_Slave_Event_CallBack(I2C_EV_STOP);
 8000b1c:	4b30      	ldr	r3, [pc, #192]	; (8000be0 <I2C1_EV_IRQHandler+0x100>)
 8000b1e:	699b      	ldr	r3, [r3, #24]
 8000b20:	2000      	movs	r0, #0
 8000b22:	4798      	blx	r3
	}
	//----------------------------------------------------------
	// Handle received address matched.
	temp3 = I2C1->SR1 & (1<<1); //ADDR
 8000b24:	4b2d      	ldr	r3, [pc, #180]	; (8000bdc <I2C1_EV_IRQHandler+0xfc>)
 8000b26:	695b      	ldr	r3, [r3, #20]
 8000b28:	f003 0302 	and.w	r3, r3, #2
 8000b2c:	60bb      	str	r3, [r7, #8]
	if(temp1 && temp3)
 8000b2e:	693b      	ldr	r3, [r7, #16]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d012      	beq.n	8000b5a <I2C1_EV_IRQHandler+0x7a>
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d00f      	beq.n	8000b5a <I2C1_EV_IRQHandler+0x7a>
	{
		// clear ADDR flag
		// In slave mode, it is recommended to perform the complete clearing sequence (READ
		// SR1 then READ SR2) after ADDR is set.
		dummyRead = I2C1->SR1;
 8000b3a:	4b28      	ldr	r3, [pc, #160]	; (8000bdc <I2C1_EV_IRQHandler+0xfc>)
 8000b3c:	695b      	ldr	r3, [r3, #20]
 8000b3e:	607b      	str	r3, [r7, #4]
		dummyRead = I2C1->SR2;
 8000b40:	4b26      	ldr	r3, [pc, #152]	; (8000bdc <I2C1_EV_IRQHandler+0xfc>)
 8000b42:	699b      	ldr	r3, [r3, #24]
 8000b44:	607b      	str	r3, [r7, #4]
		// Check master mode or slave mode
		if( I2C1->SR2 & (1<<0) )
 8000b46:	4b25      	ldr	r3, [pc, #148]	; (8000bdc <I2C1_EV_IRQHandler+0xfc>)
 8000b48:	699b      	ldr	r3, [r3, #24]
 8000b4a:	f003 0301 	and.w	r3, r3, #1
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d103      	bne.n	8000b5a <I2C1_EV_IRQHandler+0x7a>
			// Master mode(using polling mechanism not interrupt)
		}
		else
		{
			// Slave mode
			Global_I2C_Config[0].p_Slave_Event_CallBack(I2C_EV_ADDR_MATCH);
 8000b52:	4b23      	ldr	r3, [pc, #140]	; (8000be0 <I2C1_EV_IRQHandler+0x100>)
 8000b54:	699b      	ldr	r3, [r3, #24]
 8000b56:	2002      	movs	r0, #2
 8000b58:	4798      	blx	r3
		}
	}
	//----------------------------------------------------------
	// Handle TxE: Data register empty (master request data from slave)-->slave_transmitter
	temp3 = (I2C1->SR1 & (1<<7)); //TXE
 8000b5a:	4b20      	ldr	r3, [pc, #128]	; (8000bdc <I2C1_EV_IRQHandler+0xfc>)
 8000b5c:	695b      	ldr	r3, [r3, #20]
 8000b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b62:	60bb      	str	r3, [r7, #8]
	if(temp1 && temp2 && temp3)	//in case TXE=1, ITEVTEN=1, ITBUFEN=1
 8000b64:	693b      	ldr	r3, [r7, #16]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d015      	beq.n	8000b96 <I2C1_EV_IRQHandler+0xb6>
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d012      	beq.n	8000b96 <I2C1_EV_IRQHandler+0xb6>
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d00f      	beq.n	8000b96 <I2C1_EV_IRQHandler+0xb6>
	{
		// Check master mode or slave mode
		if(I2C1->SR2 & (1<<0))
 8000b76:	4b19      	ldr	r3, [pc, #100]	; (8000bdc <I2C1_EV_IRQHandler+0xfc>)
 8000b78:	699b      	ldr	r3, [r3, #24]
 8000b7a:	f003 0301 	and.w	r3, r3, #1
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d109      	bne.n	8000b96 <I2C1_EV_IRQHandler+0xb6>
		}
		else
		{
			// Slave mode
			// Check if slave in transmit mode
			if(I2C1->SR2 & (1<<2)) //TRA: Transmitter/receiver: 1: Data bytes transmitted
 8000b82:	4b16      	ldr	r3, [pc, #88]	; (8000bdc <I2C1_EV_IRQHandler+0xfc>)
 8000b84:	699b      	ldr	r3, [r3, #24]
 8000b86:	f003 0304 	and.w	r3, r3, #4
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d003      	beq.n	8000b96 <I2C1_EV_IRQHandler+0xb6>
			{
				Global_I2C_Config[0].p_Slave_Event_CallBack(I2C_EV_DATA_REQ);
 8000b8e:	4b14      	ldr	r3, [pc, #80]	; (8000be0 <I2C1_EV_IRQHandler+0x100>)
 8000b90:	699b      	ldr	r3, [r3, #24]
 8000b92:	2003      	movs	r0, #3
 8000b94:	4798      	blx	r3
			}
		}
	}
	//----------------------------------------------------------
	// Handle RxNE: Data register not empty (slave receive data)-->slave_Receiver
	temp3 = I2C1->SR1 & (1<<6);	//RXNE
 8000b96:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <I2C1_EV_IRQHandler+0xfc>)
 8000b98:	695b      	ldr	r3, [r3, #20]
 8000b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b9e:	60bb      	str	r3, [r7, #8]
	if(temp1 && temp2 && temp3)	//in case RXNE=1, ITEVTEN=1, ITBUFEN=1
 8000ba0:	693b      	ldr	r3, [r7, #16]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d015      	beq.n	8000bd2 <I2C1_EV_IRQHandler+0xf2>
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d012      	beq.n	8000bd2 <I2C1_EV_IRQHandler+0xf2>
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d00f      	beq.n	8000bd2 <I2C1_EV_IRQHandler+0xf2>
	{
		// Check master mode or slave mode
		if(I2C1->SR2 & (1<<0))
 8000bb2:	4b0a      	ldr	r3, [pc, #40]	; (8000bdc <I2C1_EV_IRQHandler+0xfc>)
 8000bb4:	699b      	ldr	r3, [r3, #24]
 8000bb6:	f003 0301 	and.w	r3, r3, #1
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d109      	bne.n	8000bd2 <I2C1_EV_IRQHandler+0xf2>
			// Master mode(using polling mechanism not interrupt)
		}
		else
		{
			// Slave mode
			if(!(I2C1->SR2 & (1<<2))) // Check receive mode TRA: Transmitter/receiver: 0: Data bytes received
 8000bbe:	4b07      	ldr	r3, [pc, #28]	; (8000bdc <I2C1_EV_IRQHandler+0xfc>)
 8000bc0:	699b      	ldr	r3, [r3, #24]
 8000bc2:	f003 0304 	and.w	r3, r3, #4
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d103      	bne.n	8000bd2 <I2C1_EV_IRQHandler+0xf2>
			{
				Global_I2C_Config[0].p_Slave_Event_CallBack(I2C_EV_DATA_REC);
 8000bca:	4b05      	ldr	r3, [pc, #20]	; (8000be0 <I2C1_EV_IRQHandler+0x100>)
 8000bcc:	699b      	ldr	r3, [r3, #24]
 8000bce:	2004      	movs	r0, #4
 8000bd0:	4798      	blx	r3
			}
		}
	}
}
 8000bd2:	bf00      	nop
 8000bd4:	3718      	adds	r7, #24
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40005400 	.word	0x40005400
 8000be0:	20000034 	.word	0x20000034

08000be4 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0

}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bc80      	pop	{r7}
 8000bee:	4770      	bx	lr

08000bf0 <I2C2_EV_IRQHandler>:


void I2C2_EV_IRQHandler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0

}
 8000bf4:	bf00      	nop
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bc80      	pop	{r7}
 8000bfa:	4770      	bx	lr

08000bfc <I2C2_ER_IRQHandler>:

void I2C2_ER_IRQHandler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0

}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bc80      	pop	{r7}
 8000c06:	4770      	bx	lr

08000c08 <MCAL_RCC_Getsys_CLKFreq>:
* APIs Functions Definitions
* ===============================================
*/

uint32_t MCAL_RCC_Getsys_CLKFreq(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
//	Set and cleared by hardware to indicate which clock source is used as system clock.
//	00: HSI oscillator used as system clock
//	01: HSE oscillator used as system clock
//	10: PLL used as system clock
//	11: not applicable
	switch((RCC->CFGR >> 2) & 0b11)
 8000c0c:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <MCAL_RCC_Getsys_CLKFreq+0x2c>)
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	089b      	lsrs	r3, r3, #2
 8000c12:	f003 0303 	and.w	r3, r3, #3
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d002      	beq.n	8000c20 <MCAL_RCC_Getsys_CLKFreq+0x18>
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d002      	beq.n	8000c24 <MCAL_RCC_Getsys_CLKFreq+0x1c>
 8000c1e:	e003      	b.n	8000c28 <MCAL_RCC_Getsys_CLKFreq+0x20>
	{
	case 0:
		return HSI_RC_CLOCK;
 8000c20:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <MCAL_RCC_Getsys_CLKFreq+0x30>)
 8000c22:	e002      	b.n	8000c2a <MCAL_RCC_Getsys_CLKFreq+0x22>
		break;
	case 1:
		return HSE_CLOCK;
 8000c24:	4b05      	ldr	r3, [pc, #20]	; (8000c3c <MCAL_RCC_Getsys_CLKFreq+0x34>)
 8000c26:	e000      	b.n	8000c2a <MCAL_RCC_Getsys_CLKFreq+0x22>
//TODO
//	case 2:
//		return PLL_clock;
//		break;
	}
	return 0;
 8000c28:	2300      	movs	r3, #0
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bc80      	pop	{r7}
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	40021000 	.word	0x40021000
 8000c38:	007a1200 	.word	0x007a1200
 8000c3c:	00f42400 	.word	0x00f42400

08000c40 <MCAL_RCC_GetHCLKFreq>:

uint32_t MCAL_RCC_GetHCLKFreq(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
	return ((MCAL_RCC_Getsys_CLKFreq() >> AHBPresc_Table[(RCC->CFGR >> 4) & 0xF]));
 8000c44:	f7ff ffe0 	bl	8000c08 <MCAL_RCC_Getsys_CLKFreq>
 8000c48:	4601      	mov	r1, r0
 8000c4a:	4b05      	ldr	r3, [pc, #20]	; (8000c60 <MCAL_RCC_GetHCLKFreq+0x20>)
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	091b      	lsrs	r3, r3, #4
 8000c50:	f003 030f 	and.w	r3, r3, #15
 8000c54:	4a03      	ldr	r2, [pc, #12]	; (8000c64 <MCAL_RCC_GetHCLKFreq+0x24>)
 8000c56:	5cd3      	ldrb	r3, [r2, r3]
 8000c58:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	40021000 	.word	0x40021000
 8000c64:	20000000 	.word	0x20000000

08000c68 <MCAL_RCC_GetPCLK1Freq>:

uint32_t MCAL_RCC_GetPCLK1Freq(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
	return ((MCAL_RCC_GetHCLKFreq() >> APBPresc_Table[(RCC->CFGR >> 8) & 0b111]));
 8000c6c:	f7ff ffe8 	bl	8000c40 <MCAL_RCC_GetHCLKFreq>
 8000c70:	4601      	mov	r1, r0
 8000c72:	4b05      	ldr	r3, [pc, #20]	; (8000c88 <MCAL_RCC_GetPCLK1Freq+0x20>)
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	0a1b      	lsrs	r3, r3, #8
 8000c78:	f003 0307 	and.w	r3, r3, #7
 8000c7c:	4a03      	ldr	r2, [pc, #12]	; (8000c8c <MCAL_RCC_GetPCLK1Freq+0x24>)
 8000c7e:	5cd3      	ldrb	r3, [r2, r3]
 8000c80:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	40021000 	.word	0x40021000
 8000c8c:	20000010 	.word	0x20000010

08000c90 <Clock_Init>:

#include "STM32F103x6.h"
#include "I2C_Slave_EEPROM.h"

void Clock_Init(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
	// IO port B clock enable
	RCC_GPIOB_CLK_EN();
 8000c94:	4b07      	ldr	r3, [pc, #28]	; (8000cb4 <Clock_Init+0x24>)
 8000c96:	699b      	ldr	r3, [r3, #24]
 8000c98:	4a06      	ldr	r2, [pc, #24]	; (8000cb4 <Clock_Init+0x24>)
 8000c9a:	f043 0308 	orr.w	r3, r3, #8
 8000c9e:	6193      	str	r3, [r2, #24]
	// AFIO clock enable
	RCC_AFIO_CLK_EN();
 8000ca0:	4b04      	ldr	r3, [pc, #16]	; (8000cb4 <Clock_Init+0x24>)
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	4a03      	ldr	r2, [pc, #12]	; (8000cb4 <Clock_Init+0x24>)
 8000ca6:	f043 0301 	orr.w	r3, r3, #1
 8000caa:	6193      	str	r3, [r2, #24]
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bc80      	pop	{r7}
 8000cb2:	4770      	bx	lr
 8000cb4:	40021000 	.word	0x40021000

08000cb8 <main>:

int main(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
	Clock_Init();
 8000cbe:	f7ff ffe7 	bl	8000c90 <Clock_Init>
	EEPROM_Init();
 8000cc2:	f7ff fa55 	bl	8000170 <EEPROM_Init>

	//Test Case 1
	uint8_t ch1[] = {0x01,0x02,0x03,0x04,0x05,0x06,0x07};
 8000cc6:	4a1a      	ldr	r2, [pc, #104]	; (8000d30 <main+0x78>)
 8000cc8:	f107 0308 	add.w	r3, r7, #8
 8000ccc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000cd0:	6018      	str	r0, [r3, #0]
 8000cd2:	3304      	adds	r3, #4
 8000cd4:	8019      	strh	r1, [r3, #0]
 8000cd6:	3302      	adds	r3, #2
 8000cd8:	0c0a      	lsrs	r2, r1, #16
 8000cda:	701a      	strb	r2, [r3, #0]
	uint8_t ch2[7] = {0};
 8000cdc:	463b      	mov	r3, r7
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	f8c3 2003 	str.w	r2, [r3, #3]
	EEPROM_Write_NBytes(0xAF, ch1, 7);
 8000ce6:	f107 0308 	add.w	r3, r7, #8
 8000cea:	2207      	movs	r2, #7
 8000cec:	4619      	mov	r1, r3
 8000cee:	20af      	movs	r0, #175	; 0xaf
 8000cf0:	f7ff fa5e 	bl	80001b0 <EEPROM_Write_NBytes>
	EEPROM_Read_NBytes(0xAF, ch2, 7);
 8000cf4:	463b      	mov	r3, r7
 8000cf6:	2207      	movs	r2, #7
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	20af      	movs	r0, #175	; 0xaf
 8000cfc:	f7ff faa8 	bl	8000250 <EEPROM_Read_NBytes>

	//Test Case 2
	ch1[0] = 0xA;
 8000d00:	230a      	movs	r3, #10
 8000d02:	723b      	strb	r3, [r7, #8]
	ch1[1] = 0xB;
 8000d04:	230b      	movs	r3, #11
 8000d06:	727b      	strb	r3, [r7, #9]
	ch1[2] = 0xC;
 8000d08:	230c      	movs	r3, #12
 8000d0a:	72bb      	strb	r3, [r7, #10]
	ch1[3] = 0xD;
 8000d0c:	230d      	movs	r3, #13
 8000d0e:	72fb      	strb	r3, [r7, #11]
	EEPROM_Write_NBytes(0xFFF, ch1, 4);
 8000d10:	f107 0308 	add.w	r3, r7, #8
 8000d14:	2204      	movs	r2, #4
 8000d16:	4619      	mov	r1, r3
 8000d18:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000d1c:	f7ff fa48 	bl	80001b0 <EEPROM_Write_NBytes>
	EEPROM_Read_NBytes(0xFFF, ch2, 4);
 8000d20:	463b      	mov	r3, r7
 8000d22:	2204      	movs	r2, #4
 8000d24:	4619      	mov	r1, r3
 8000d26:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000d2a:	f7ff fa91 	bl	8000250 <EEPROM_Read_NBytes>

	while(1);
 8000d2e:	e7fe      	b.n	8000d2e <main+0x76>
 8000d30:	08000de8 	.word	0x08000de8

08000d34 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d34:	480d      	ldr	r0, [pc, #52]	; (8000d6c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d36:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000d38:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d3c:	480c      	ldr	r0, [pc, #48]	; (8000d70 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d3e:	490d      	ldr	r1, [pc, #52]	; (8000d74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d40:	4a0d      	ldr	r2, [pc, #52]	; (8000d78 <LoopForever+0xe>)
  movs r3, #0
 8000d42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d44:	e002      	b.n	8000d4c <LoopCopyDataInit>

08000d46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d4a:	3304      	adds	r3, #4

08000d4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d50:	d3f9      	bcc.n	8000d46 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d52:	4a0a      	ldr	r2, [pc, #40]	; (8000d7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d54:	4c0a      	ldr	r4, [pc, #40]	; (8000d80 <LoopForever+0x16>)
  movs r3, #0
 8000d56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d58:	e001      	b.n	8000d5e <LoopFillZerobss>

08000d5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d5c:	3204      	adds	r2, #4

08000d5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d60:	d3fb      	bcc.n	8000d5a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d62:	f000 f811 	bl	8000d88 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d66:	f7ff ffa7 	bl	8000cb8 <main>

08000d6a <LoopForever>:

LoopForever:
    b LoopForever
 8000d6a:	e7fe      	b.n	8000d6a <LoopForever>
  ldr   r0, =_estack
 8000d6c:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000d70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d74:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000d78:	08000df8 	.word	0x08000df8
  ldr r2, =_sbss
 8000d7c:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000d80:	2000006c 	.word	0x2000006c

08000d84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d84:	e7fe      	b.n	8000d84 <ADC1_2_IRQHandler>
	...

08000d88 <__libc_init_array>:
 8000d88:	b570      	push	{r4, r5, r6, lr}
 8000d8a:	2500      	movs	r5, #0
 8000d8c:	4e0c      	ldr	r6, [pc, #48]	; (8000dc0 <__libc_init_array+0x38>)
 8000d8e:	4c0d      	ldr	r4, [pc, #52]	; (8000dc4 <__libc_init_array+0x3c>)
 8000d90:	1ba4      	subs	r4, r4, r6
 8000d92:	10a4      	asrs	r4, r4, #2
 8000d94:	42a5      	cmp	r5, r4
 8000d96:	d109      	bne.n	8000dac <__libc_init_array+0x24>
 8000d98:	f000 f81a 	bl	8000dd0 <_init>
 8000d9c:	2500      	movs	r5, #0
 8000d9e:	4e0a      	ldr	r6, [pc, #40]	; (8000dc8 <__libc_init_array+0x40>)
 8000da0:	4c0a      	ldr	r4, [pc, #40]	; (8000dcc <__libc_init_array+0x44>)
 8000da2:	1ba4      	subs	r4, r4, r6
 8000da4:	10a4      	asrs	r4, r4, #2
 8000da6:	42a5      	cmp	r5, r4
 8000da8:	d105      	bne.n	8000db6 <__libc_init_array+0x2e>
 8000daa:	bd70      	pop	{r4, r5, r6, pc}
 8000dac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000db0:	4798      	blx	r3
 8000db2:	3501      	adds	r5, #1
 8000db4:	e7ee      	b.n	8000d94 <__libc_init_array+0xc>
 8000db6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000dba:	4798      	blx	r3
 8000dbc:	3501      	adds	r5, #1
 8000dbe:	e7f2      	b.n	8000da6 <__libc_init_array+0x1e>
 8000dc0:	08000df0 	.word	0x08000df0
 8000dc4:	08000df0 	.word	0x08000df0
 8000dc8:	08000df0 	.word	0x08000df0
 8000dcc:	08000df4 	.word	0x08000df4

08000dd0 <_init>:
 8000dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dd2:	bf00      	nop
 8000dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dd6:	bc08      	pop	{r3}
 8000dd8:	469e      	mov	lr, r3
 8000dda:	4770      	bx	lr

08000ddc <_fini>:
 8000ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dde:	bf00      	nop
 8000de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000de2:	bc08      	pop	{r3}
 8000de4:	469e      	mov	lr, r3
 8000de6:	4770      	bx	lr
