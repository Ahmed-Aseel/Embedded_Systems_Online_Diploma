
Unit7_Lesson4_Lab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c70  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08000da0  08000da0  00010da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000dc4  08000dc4  00010dcc  2**0
                  CONTENTS
  4 .ARM          00000000  08000dc4  08000dc4  00010dcc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000dc4  08000dcc  00010dcc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000dc4  08000dc4  00010dc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000dc8  08000dc8  00010dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010dcc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  20000000  08000dcc  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000060  08000dcc  00020060  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010dcc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003448  00000000  00000000  00010df5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000862  00000000  00000000  0001423d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000a39  00000000  00000000  00014a9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001a8  00000000  00000000  000154d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000160  00000000  00000000  00015680  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00002b6f  00000000  00000000  000157e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00001d88  00000000  00000000  0001834f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000a5de  00000000  00000000  0001a0d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000246b5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000558  00000000  00000000  00024730  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000d88 	.word	0x08000d88

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000d88 	.word	0x08000d88

08000170 <delay_ms>:
#include "LCD.h"

static GPIO_PinConfig_t *PinCfg = NULL;

static void delay_ms(uint8_t time_ms)
{
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]
	uint8_t i,j;
	for(i = 0; i < time_ms; i++)
 800017a:	2300      	movs	r3, #0
 800017c:	73fb      	strb	r3, [r7, #15]
 800017e:	e00b      	b.n	8000198 <delay_ms+0x28>
		for(j = 0; j < 255; j++);
 8000180:	2300      	movs	r3, #0
 8000182:	73bb      	strb	r3, [r7, #14]
 8000184:	e002      	b.n	800018c <delay_ms+0x1c>
 8000186:	7bbb      	ldrb	r3, [r7, #14]
 8000188:	3301      	adds	r3, #1
 800018a:	73bb      	strb	r3, [r7, #14]
 800018c:	7bbb      	ldrb	r3, [r7, #14]
 800018e:	2bff      	cmp	r3, #255	; 0xff
 8000190:	d1f9      	bne.n	8000186 <delay_ms+0x16>
	for(i = 0; i < time_ms; i++)
 8000192:	7bfb      	ldrb	r3, [r7, #15]
 8000194:	3301      	adds	r3, #1
 8000196:	73fb      	strb	r3, [r7, #15]
 8000198:	7bfa      	ldrb	r2, [r7, #15]
 800019a:	79fb      	ldrb	r3, [r7, #7]
 800019c:	429a      	cmp	r2, r3
 800019e:	d3ef      	bcc.n	8000180 <delay_ms+0x10>
}
 80001a0:	bf00      	nop
 80001a2:	3714      	adds	r7, #20
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bc80      	pop	{r7}
 80001a8:	4770      	bx	lr
	...

080001ac <LCD_Init>:

void LCD_Init()
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b082      	sub	sp, #8
 80001b0:	af00      	add	r7, sp, #0
	uint8_t i;
	delay_ms(20);
 80001b2:	2014      	movs	r0, #20
 80001b4:	f7ff ffdc 	bl	8000170 <delay_ms>

	// Pin8 Port A: 00 General purpose output push-pull
	// Pin8 Port A: 01 Output mode, max speed 10 MHz.
	PinCfg->GPIO_PinNumber = RS;
 80001b8:	4b3e      	ldr	r3, [pc, #248]	; (80002b4 <LCD_Init+0x108>)
 80001ba:	681b      	ldr	r3, [r3, #0]
 80001bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80001c0:	801a      	strh	r2, [r3, #0]
	PinCfg->GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001c2:	4b3c      	ldr	r3, [pc, #240]	; (80002b4 <LCD_Init+0x108>)
 80001c4:	681b      	ldr	r3, [r3, #0]
 80001c6:	2204      	movs	r2, #4
 80001c8:	709a      	strb	r2, [r3, #2]
	PinCfg->GPIO_Output_Speed = GPIO_SPEED_10M;
 80001ca:	4b3a      	ldr	r3, [pc, #232]	; (80002b4 <LCD_Init+0x108>)
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	2201      	movs	r2, #1
 80001d0:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOA, PinCfg);
 80001d2:	4b38      	ldr	r3, [pc, #224]	; (80002b4 <LCD_Init+0x108>)
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	4619      	mov	r1, r3
 80001d8:	4837      	ldr	r0, [pc, #220]	; (80002b8 <LCD_Init+0x10c>)
 80001da:	f000 fc6e 	bl	8000aba <MCAL_GPIO_Init>

	// Pin9 Port A: 00 General purpose output push-pull
	// Pin* Port A: 01 Output mode, max speed 10 MHz.
	PinCfg->GPIO_PinNumber = RW;
 80001de:	4b35      	ldr	r3, [pc, #212]	; (80002b4 <LCD_Init+0x108>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80001e6:	801a      	strh	r2, [r3, #0]
	PinCfg->GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001e8:	4b32      	ldr	r3, [pc, #200]	; (80002b4 <LCD_Init+0x108>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	2204      	movs	r2, #4
 80001ee:	709a      	strb	r2, [r3, #2]
	PinCfg->GPIO_Output_Speed = GPIO_SPEED_10M;
 80001f0:	4b30      	ldr	r3, [pc, #192]	; (80002b4 <LCD_Init+0x108>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	2201      	movs	r2, #1
 80001f6:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOA, PinCfg);
 80001f8:	4b2e      	ldr	r3, [pc, #184]	; (80002b4 <LCD_Init+0x108>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	4619      	mov	r1, r3
 80001fe:	482e      	ldr	r0, [pc, #184]	; (80002b8 <LCD_Init+0x10c>)
 8000200:	f000 fc5b 	bl	8000aba <MCAL_GPIO_Init>

	// Pin10 Port A: 00 General purpose output push-pull
	// Pin10 Port A: 01 Output mode, max speed 10 MHz.
	PinCfg->GPIO_PinNumber = EN;
 8000204:	4b2b      	ldr	r3, [pc, #172]	; (80002b4 <LCD_Init+0x108>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800020c:	801a      	strh	r2, [r3, #0]
	PinCfg->GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800020e:	4b29      	ldr	r3, [pc, #164]	; (80002b4 <LCD_Init+0x108>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	2204      	movs	r2, #4
 8000214:	709a      	strb	r2, [r3, #2]
	PinCfg->GPIO_Output_Speed = GPIO_SPEED_10M;
 8000216:	4b27      	ldr	r3, [pc, #156]	; (80002b4 <LCD_Init+0x108>)
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	2201      	movs	r2, #1
 800021c:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOA, PinCfg);
 800021e:	4b25      	ldr	r3, [pc, #148]	; (80002b4 <LCD_Init+0x108>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	4619      	mov	r1, r3
 8000224:	4824      	ldr	r0, [pc, #144]	; (80002b8 <LCD_Init+0x10c>)
 8000226:	f000 fc48 	bl	8000aba <MCAL_GPIO_Init>

	// RESET RS, RW, EN
	MCAL_GPIO_WritePin(LCD_CONTROL_PORT, RS, GPIO_PIN_RESET);
 800022a:	2200      	movs	r2, #0
 800022c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000230:	4821      	ldr	r0, [pc, #132]	; (80002b8 <LCD_Init+0x10c>)
 8000232:	f000 fccf 	bl	8000bd4 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CONTROL_PORT, RW, GPIO_PIN_RESET);
 8000236:	2200      	movs	r2, #0
 8000238:	f44f 7100 	mov.w	r1, #512	; 0x200
 800023c:	481e      	ldr	r0, [pc, #120]	; (80002b8 <LCD_Init+0x10c>)
 800023e:	f000 fcc9 	bl	8000bd4 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CONTROL_PORT, EN, GPIO_PIN_RESET);
 8000242:	2200      	movs	r2, #0
 8000244:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000248:	481b      	ldr	r0, [pc, #108]	; (80002b8 <LCD_Init+0x10c>)
 800024a:	f000 fcc3 	bl	8000bd4 <MCAL_GPIO_WritePin>

	// SET PINS 0:7 AS OUTPUT For LCD Data
	for(i = 0; i < 8; i++)
 800024e:	2300      	movs	r3, #0
 8000250:	71fb      	strb	r3, [r7, #7]
 8000252:	e017      	b.n	8000284 <LCD_Init+0xd8>
	{
		// Pin(i) LCD_DATA_PORT: 00 General purpose output push-pull
		// Pin(i) LCD_DATA_PORT: 01 Output mode, max speed 10 MHz.
		PinCfg->GPIO_PinNumber = (uint16_t)(1<<i);
 8000254:	79fb      	ldrb	r3, [r7, #7]
 8000256:	2201      	movs	r2, #1
 8000258:	409a      	lsls	r2, r3
 800025a:	4b16      	ldr	r3, [pc, #88]	; (80002b4 <LCD_Init+0x108>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	b292      	uxth	r2, r2
 8000260:	801a      	strh	r2, [r3, #0]
		PinCfg->GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000262:	4b14      	ldr	r3, [pc, #80]	; (80002b4 <LCD_Init+0x108>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	2204      	movs	r2, #4
 8000268:	709a      	strb	r2, [r3, #2]
		PinCfg->GPIO_Output_Speed = GPIO_SPEED_10M;
 800026a:	4b12      	ldr	r3, [pc, #72]	; (80002b4 <LCD_Init+0x108>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	2201      	movs	r2, #1
 8000270:	70da      	strb	r2, [r3, #3]
		MCAL_GPIO_Init(LCD_DATA_PORT, PinCfg);
 8000272:	4b10      	ldr	r3, [pc, #64]	; (80002b4 <LCD_Init+0x108>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	4619      	mov	r1, r3
 8000278:	480f      	ldr	r0, [pc, #60]	; (80002b8 <LCD_Init+0x10c>)
 800027a:	f000 fc1e 	bl	8000aba <MCAL_GPIO_Init>
	for(i = 0; i < 8; i++)
 800027e:	79fb      	ldrb	r3, [r7, #7]
 8000280:	3301      	adds	r3, #1
 8000282:	71fb      	strb	r3, [r7, #7]
 8000284:	79fb      	ldrb	r3, [r7, #7]
 8000286:	2b07      	cmp	r3, #7
 8000288:	d9e4      	bls.n	8000254 <LCD_Init+0xa8>
	}

	delay_ms(15);
 800028a:	200f      	movs	r0, #15
 800028c:	f7ff ff70 	bl	8000170 <delay_ms>
	LCD_Clear_Screen();
 8000290:	f000 f89a 	bl	80003c8 <LCD_Clear_Screen>

	#ifdef EIGHT_BIT_MODE
	LCD_Write_Command(LCD_FUNCTION_8BIT_2LINES);
 8000294:	2038      	movs	r0, #56	; 0x38
 8000296:	f000 f811 	bl	80002bc <LCD_Write_Command>
	#ifdef FOUR_BIT_MODE
	LCD_Write_Command(0x02);
	LCD_Write_Command(LCD_FUNCTION_4BIT_2LINES);
	#endif

	LCD_Write_Command(LCD_ENTRY_MODE);
 800029a:	2006      	movs	r0, #6
 800029c:	f000 f80e 	bl	80002bc <LCD_Write_Command>
	LCD_Write_Command(LCD_BEGIN_AT_FIRST_ROW);
 80002a0:	2080      	movs	r0, #128	; 0x80
 80002a2:	f000 f80b 	bl	80002bc <LCD_Write_Command>
	LCD_Write_Command(LCD_DISP_ON_CURSOR_BLINK);
 80002a6:	200f      	movs	r0, #15
 80002a8:	f000 f808 	bl	80002bc <LCD_Write_Command>
}
 80002ac:	bf00      	nop
 80002ae:	3708      	adds	r7, #8
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bd80      	pop	{r7, pc}
 80002b4:	2000001c 	.word	0x2000001c
 80002b8:	40010800 	.word	0x40010800

080002bc <LCD_Write_Command>:

void LCD_Write_Command(uint8_t command)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b082      	sub	sp, #8
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	4603      	mov	r3, r0
 80002c4:	71fb      	strb	r3, [r7, #7]
	#ifdef EIGHT_BIT_MODE
		MCAL_GPIO_WritePort(LCD_DATA_PORT, command);
 80002c6:	79fb      	ldrb	r3, [r7, #7]
 80002c8:	b29b      	uxth	r3, r3
 80002ca:	4619      	mov	r1, r3
 80002cc:	480b      	ldr	r0, [pc, #44]	; (80002fc <LCD_Write_Command+0x40>)
 80002ce:	f000 fc73 	bl	8000bb8 <MCAL_GPIO_WritePort>
		MCAL_GPIO_WritePin(LCD_CONTROL_PORT, RS, GPIO_PIN_RESET);
 80002d2:	2200      	movs	r2, #0
 80002d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002d8:	4808      	ldr	r0, [pc, #32]	; (80002fc <LCD_Write_Command+0x40>)
 80002da:	f000 fc7b 	bl	8000bd4 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(LCD_CONTROL_PORT, RW, GPIO_PIN_RESET);
 80002de:	2200      	movs	r2, #0
 80002e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002e4:	4805      	ldr	r0, [pc, #20]	; (80002fc <LCD_Write_Command+0x40>)
 80002e6:	f000 fc75 	bl	8000bd4 <MCAL_GPIO_WritePin>
		delay_ms(1);
 80002ea:	2001      	movs	r0, #1
 80002ec:	f7ff ff40 	bl	8000170 <delay_ms>
		LCD_Kick();
 80002f0:	f000 f854 	bl	800039c <LCD_Kick>
		LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (command << DATA_SHIFT);
		MCAL_GPIO_WritePin(LCD_CONTROL_PORT, RS, GPIO_PIN_RESET);
		MCAL_GPIO_WritePin(LCD_CONTROL_PORT, RW, GPIO_PIN_RESET);
		LCD_Kick();
	#endif
}
 80002f4:	bf00      	nop
 80002f6:	3708      	adds	r7, #8
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	40010800 	.word	0x40010800

08000300 <LCD_Write_Char>:

void LCD_Write_Char(uint8_t character)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b082      	sub	sp, #8
 8000304:	af00      	add	r7, sp, #0
 8000306:	4603      	mov	r3, r0
 8000308:	71fb      	strb	r3, [r7, #7]
	#ifdef EIGHT_BIT_MODE
		MCAL_GPIO_WritePort(LCD_DATA_PORT, character);
 800030a:	79fb      	ldrb	r3, [r7, #7]
 800030c:	b29b      	uxth	r3, r3
 800030e:	4619      	mov	r1, r3
 8000310:	480b      	ldr	r0, [pc, #44]	; (8000340 <LCD_Write_Char+0x40>)
 8000312:	f000 fc51 	bl	8000bb8 <MCAL_GPIO_WritePort>
		MCAL_GPIO_WritePin(LCD_CONTROL_PORT, RS, GPIO_PIN_SET);
 8000316:	2201      	movs	r2, #1
 8000318:	f44f 7180 	mov.w	r1, #256	; 0x100
 800031c:	4808      	ldr	r0, [pc, #32]	; (8000340 <LCD_Write_Char+0x40>)
 800031e:	f000 fc59 	bl	8000bd4 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(LCD_CONTROL_PORT, RW, GPIO_PIN_RESET);
 8000322:	2200      	movs	r2, #0
 8000324:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000328:	4805      	ldr	r0, [pc, #20]	; (8000340 <LCD_Write_Char+0x40>)
 800032a:	f000 fc53 	bl	8000bd4 <MCAL_GPIO_WritePin>
		delay_ms(1);
 800032e:	2001      	movs	r0, #1
 8000330:	f7ff ff1e 	bl	8000170 <delay_ms>
		LCD_Kick();
 8000334:	f000 f832 	bl	800039c <LCD_Kick>
		LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (character << DATA_SHIFT);
		MCAL_GPIO_WritePin(LCD_CONTROL_PORT, RS, GPIO_PIN_SET);
		MCAL_GPIO_WritePin(LCD_CONTROL_PORT, RW, GPIO_PIN_RESET);
		LCD_Kick ();
	#endif
}
 8000338:	bf00      	nop
 800033a:	3708      	adds	r7, #8
 800033c:	46bd      	mov	sp, r7
 800033e:	bd80      	pop	{r7, pc}
 8000340:	40010800 	.word	0x40010800

08000344 <LCD_Write_String>:

void LCD_Write_String(uint8_t* string)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b084      	sub	sp, #16
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
	uint8_t count = 0;
 800034c:	2300      	movs	r3, #0
 800034e:	73fb      	strb	r3, [r7, #15]
	while (*string)
 8000350:	e01c      	b.n	800038c <LCD_Write_String+0x48>
	{
		count++;
 8000352:	7bfb      	ldrb	r3, [r7, #15]
 8000354:	3301      	adds	r3, #1
 8000356:	73fb      	strb	r3, [r7, #15]
		LCD_Write_Char(*string++);
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	1c5a      	adds	r2, r3, #1
 800035c:	607a      	str	r2, [r7, #4]
 800035e:	781b      	ldrb	r3, [r3, #0]
 8000360:	4618      	mov	r0, r3
 8000362:	f7ff ffcd 	bl	8000300 <LCD_Write_Char>
		if (count == 16)
 8000366:	7bfb      	ldrb	r3, [r7, #15]
 8000368:	2b10      	cmp	r3, #16
 800036a:	d104      	bne.n	8000376 <LCD_Write_String+0x32>
		{
			LCD_GOTO_XY(2,0);
 800036c:	2100      	movs	r1, #0
 800036e:	2002      	movs	r0, #2
 8000370:	f000 f831 	bl	80003d6 <LCD_GOTO_XY>
 8000374:	e00a      	b.n	800038c <LCD_Write_String+0x48>
		}
		else if (count == 32)
 8000376:	7bfb      	ldrb	r3, [r7, #15]
 8000378:	2b20      	cmp	r3, #32
 800037a:	d107      	bne.n	800038c <LCD_Write_String+0x48>
		{
			LCD_Clear_Screen();
 800037c:	f000 f824 	bl	80003c8 <LCD_Clear_Screen>
			LCD_GOTO_XY(1,0);
 8000380:	2100      	movs	r1, #0
 8000382:	2001      	movs	r0, #1
 8000384:	f000 f827 	bl	80003d6 <LCD_GOTO_XY>
			count = 0;
 8000388:	2300      	movs	r3, #0
 800038a:	73fb      	strb	r3, [r7, #15]
	while (*string)
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	781b      	ldrb	r3, [r3, #0]
 8000390:	2b00      	cmp	r3, #0
 8000392:	d1de      	bne.n	8000352 <LCD_Write_String+0xe>
		}
	}
}
 8000394:	bf00      	nop
 8000396:	3710      	adds	r7, #16
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}

0800039c <LCD_Kick>:

	sprintf((char*)str, "%s%d.%4d", tmpSign, tmpInt1, tmpInt2);
	LCD_Write_String(str);
}

void LCD_Kick(){
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
	MCAL_GPIO_WritePin(LCD_CONTROL_PORT, EN, GPIO_PIN_SET);
 80003a0:	2201      	movs	r2, #1
 80003a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003a6:	4807      	ldr	r0, [pc, #28]	; (80003c4 <LCD_Kick+0x28>)
 80003a8:	f000 fc14 	bl	8000bd4 <MCAL_GPIO_WritePin>
	delay_ms(10);
 80003ac:	200a      	movs	r0, #10
 80003ae:	f7ff fedf 	bl	8000170 <delay_ms>
	MCAL_GPIO_WritePin(LCD_CONTROL_PORT, EN, GPIO_PIN_RESET);
 80003b2:	2200      	movs	r2, #0
 80003b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003b8:	4802      	ldr	r0, [pc, #8]	; (80003c4 <LCD_Kick+0x28>)
 80003ba:	f000 fc0b 	bl	8000bd4 <MCAL_GPIO_WritePin>
}
 80003be:	bf00      	nop
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	bf00      	nop
 80003c4:	40010800 	.word	0x40010800

080003c8 <LCD_Clear_Screen>:

void LCD_Clear_Screen()
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0
	LCD_Write_Command(LCD_CLEAR_SCREEN);
 80003cc:	2001      	movs	r0, #1
 80003ce:	f7ff ff75 	bl	80002bc <LCD_Write_Command>
}
 80003d2:	bf00      	nop
 80003d4:	bd80      	pop	{r7, pc}

080003d6 <LCD_GOTO_XY>:

void LCD_GOTO_XY(uint8_t line, uint8_t position)
{
 80003d6:	b580      	push	{r7, lr}
 80003d8:	b082      	sub	sp, #8
 80003da:	af00      	add	r7, sp, #0
 80003dc:	4603      	mov	r3, r0
 80003de:	460a      	mov	r2, r1
 80003e0:	71fb      	strb	r3, [r7, #7]
 80003e2:	4613      	mov	r3, r2
 80003e4:	71bb      	strb	r3, [r7, #6]
	if (line == 1)
 80003e6:	79fb      	ldrb	r3, [r7, #7]
 80003e8:	2b01      	cmp	r3, #1
 80003ea:	d108      	bne.n	80003fe <LCD_GOTO_XY+0x28>
	{
		if (position < 16 && position >= 0)
 80003ec:	79bb      	ldrb	r3, [r7, #6]
 80003ee:	2b0f      	cmp	r3, #15
 80003f0:	d805      	bhi.n	80003fe <LCD_GOTO_XY+0x28>
		{
			LCD_Write_Command(LCD_BEGIN_AT_FIRST_ROW + position);
 80003f2:	79bb      	ldrb	r3, [r7, #6]
 80003f4:	3b80      	subs	r3, #128	; 0x80
 80003f6:	b2db      	uxtb	r3, r3
 80003f8:	4618      	mov	r0, r3
 80003fa:	f7ff ff5f 	bl	80002bc <LCD_Write_Command>
		}
	}
	if (line == 2)
 80003fe:	79fb      	ldrb	r3, [r7, #7]
 8000400:	2b02      	cmp	r3, #2
 8000402:	d108      	bne.n	8000416 <LCD_GOTO_XY+0x40>
	{
		if (position < 16 && position >= 0)
 8000404:	79bb      	ldrb	r3, [r7, #6]
 8000406:	2b0f      	cmp	r3, #15
 8000408:	d805      	bhi.n	8000416 <LCD_GOTO_XY+0x40>
		{
			LCD_Write_Command(LCD_BEGIN_AT_SECOND_ROW + position);
 800040a:	79bb      	ldrb	r3, [r7, #6]
 800040c:	3b40      	subs	r3, #64	; 0x40
 800040e:	b2db      	uxtb	r3, r3
 8000410:	4618      	mov	r0, r3
 8000412:	f7ff ff53 	bl	80002bc <LCD_Write_Command>
		}
	}
}
 8000416:	bf00      	nop
 8000418:	3708      	adds	r7, #8
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
	...

08000420 <NVIC_Enable>:
* Generic Functions
* ===============================================
*/

static void NVIC_Enable(uint8_t IRQ_Number)
{
 8000420:	b480      	push	{r7}
 8000422:	b083      	sub	sp, #12
 8000424:	af00      	add	r7, sp, #0
 8000426:	4603      	mov	r3, r0
 8000428:	71fb      	strb	r3, [r7, #7]
	switch(IRQ_Number)
 800042a:	79fb      	ldrb	r3, [r7, #7]
 800042c:	2b0f      	cmp	r3, #15
 800042e:	d854      	bhi.n	80004da <NVIC_Enable+0xba>
 8000430:	a201      	add	r2, pc, #4	; (adr r2, 8000438 <NVIC_Enable+0x18>)
 8000432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000436:	bf00      	nop
 8000438:	08000479 	.word	0x08000479
 800043c:	08000487 	.word	0x08000487
 8000440:	08000495 	.word	0x08000495
 8000444:	080004a3 	.word	0x080004a3
 8000448:	080004b1 	.word	0x080004b1
 800044c:	080004bf 	.word	0x080004bf
 8000450:	080004bf 	.word	0x080004bf
 8000454:	080004bf 	.word	0x080004bf
 8000458:	080004bf 	.word	0x080004bf
 800045c:	080004bf 	.word	0x080004bf
 8000460:	080004cd 	.word	0x080004cd
 8000464:	080004cd 	.word	0x080004cd
 8000468:	080004cd 	.word	0x080004cd
 800046c:	080004cd 	.word	0x080004cd
 8000470:	080004cd 	.word	0x080004cd
 8000474:	080004cd 	.word	0x080004cd
	{
	case 0:
		NVIC_IEQ6_EXTI0_Enable();
 8000478:	4b1a      	ldr	r3, [pc, #104]	; (80004e4 <NVIC_Enable+0xc4>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	4a19      	ldr	r2, [pc, #100]	; (80004e4 <NVIC_Enable+0xc4>)
 800047e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000482:	6013      	str	r3, [r2, #0]
		break;
 8000484:	e029      	b.n	80004da <NVIC_Enable+0xba>
	case 1:
		NVIC_IEQ7_EXTI1_Enable();
 8000486:	4b17      	ldr	r3, [pc, #92]	; (80004e4 <NVIC_Enable+0xc4>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	4a16      	ldr	r2, [pc, #88]	; (80004e4 <NVIC_Enable+0xc4>)
 800048c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000490:	6013      	str	r3, [r2, #0]
		break;
 8000492:	e022      	b.n	80004da <NVIC_Enable+0xba>
	case 2:
		NVIC_IEQ8_EXTI2_Enable();
 8000494:	4b13      	ldr	r3, [pc, #76]	; (80004e4 <NVIC_Enable+0xc4>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	4a12      	ldr	r2, [pc, #72]	; (80004e4 <NVIC_Enable+0xc4>)
 800049a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800049e:	6013      	str	r3, [r2, #0]
		break;
 80004a0:	e01b      	b.n	80004da <NVIC_Enable+0xba>
	case 3:
		NVIC_IEQ9_EXTI3_Enable();
 80004a2:	4b10      	ldr	r3, [pc, #64]	; (80004e4 <NVIC_Enable+0xc4>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	4a0f      	ldr	r2, [pc, #60]	; (80004e4 <NVIC_Enable+0xc4>)
 80004a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004ac:	6013      	str	r3, [r2, #0]
		break;
 80004ae:	e014      	b.n	80004da <NVIC_Enable+0xba>
	case 4:
		NVIC_IEQ10_EXTI4_Enable();
 80004b0:	4b0c      	ldr	r3, [pc, #48]	; (80004e4 <NVIC_Enable+0xc4>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	4a0b      	ldr	r2, [pc, #44]	; (80004e4 <NVIC_Enable+0xc4>)
 80004b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004ba:	6013      	str	r3, [r2, #0]
		break;
 80004bc:	e00d      	b.n	80004da <NVIC_Enable+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IEQ23_EXTI9_5_Enable();
 80004be:	4b09      	ldr	r3, [pc, #36]	; (80004e4 <NVIC_Enable+0xc4>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	4a08      	ldr	r2, [pc, #32]	; (80004e4 <NVIC_Enable+0xc4>)
 80004c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80004c8:	6013      	str	r3, [r2, #0]
		break;
 80004ca:	e006      	b.n	80004da <NVIC_Enable+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IEQ40_EXTI15_10_Enable();
 80004cc:	4b06      	ldr	r3, [pc, #24]	; (80004e8 <NVIC_Enable+0xc8>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a05      	ldr	r2, [pc, #20]	; (80004e8 <NVIC_Enable+0xc8>)
 80004d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004d6:	6013      	str	r3, [r2, #0]
		break;
 80004d8:	bf00      	nop
	}
}
 80004da:	bf00      	nop
 80004dc:	370c      	adds	r7, #12
 80004de:	46bd      	mov	sp, r7
 80004e0:	bc80      	pop	{r7}
 80004e2:	4770      	bx	lr
 80004e4:	e000e100 	.word	0xe000e100
 80004e8:	e000e104 	.word	0xe000e104

080004ec <NVIC_Disable>:

static void NVIC_Disable(uint8_t IRQ_Number)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b083      	sub	sp, #12
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	4603      	mov	r3, r0
 80004f4:	71fb      	strb	r3, [r7, #7]
	switch(IRQ_Number)
 80004f6:	79fb      	ldrb	r3, [r7, #7]
 80004f8:	2b0f      	cmp	r3, #15
 80004fa:	d854      	bhi.n	80005a6 <NVIC_Disable+0xba>
 80004fc:	a201      	add	r2, pc, #4	; (adr r2, 8000504 <NVIC_Disable+0x18>)
 80004fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000502:	bf00      	nop
 8000504:	08000545 	.word	0x08000545
 8000508:	08000553 	.word	0x08000553
 800050c:	08000561 	.word	0x08000561
 8000510:	0800056f 	.word	0x0800056f
 8000514:	0800057d 	.word	0x0800057d
 8000518:	0800058b 	.word	0x0800058b
 800051c:	0800058b 	.word	0x0800058b
 8000520:	0800058b 	.word	0x0800058b
 8000524:	0800058b 	.word	0x0800058b
 8000528:	0800058b 	.word	0x0800058b
 800052c:	08000599 	.word	0x08000599
 8000530:	08000599 	.word	0x08000599
 8000534:	08000599 	.word	0x08000599
 8000538:	08000599 	.word	0x08000599
 800053c:	08000599 	.word	0x08000599
 8000540:	08000599 	.word	0x08000599
	{
	case 0:
		NVIC_IEQ6_EXTI0_Disable();
 8000544:	4b1a      	ldr	r3, [pc, #104]	; (80005b0 <NVIC_Disable+0xc4>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a19      	ldr	r2, [pc, #100]	; (80005b0 <NVIC_Disable+0xc4>)
 800054a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800054e:	6013      	str	r3, [r2, #0]
		break;
 8000550:	e029      	b.n	80005a6 <NVIC_Disable+0xba>
	case 1:
		NVIC_IEQ7_EXTI1_Disable();
 8000552:	4b17      	ldr	r3, [pc, #92]	; (80005b0 <NVIC_Disable+0xc4>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4a16      	ldr	r2, [pc, #88]	; (80005b0 <NVIC_Disable+0xc4>)
 8000558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800055c:	6013      	str	r3, [r2, #0]
		break;
 800055e:	e022      	b.n	80005a6 <NVIC_Disable+0xba>
	case 2:
		NVIC_IEQ8_EXTI2_Disable();
 8000560:	4b13      	ldr	r3, [pc, #76]	; (80005b0 <NVIC_Disable+0xc4>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a12      	ldr	r2, [pc, #72]	; (80005b0 <NVIC_Disable+0xc4>)
 8000566:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800056a:	6013      	str	r3, [r2, #0]
		break;
 800056c:	e01b      	b.n	80005a6 <NVIC_Disable+0xba>
	case 3:
		NVIC_IEQ9_EXTI3_Disable();
 800056e:	4b10      	ldr	r3, [pc, #64]	; (80005b0 <NVIC_Disable+0xc4>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	4a0f      	ldr	r2, [pc, #60]	; (80005b0 <NVIC_Disable+0xc4>)
 8000574:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000578:	6013      	str	r3, [r2, #0]
		break;
 800057a:	e014      	b.n	80005a6 <NVIC_Disable+0xba>
	case 4:
		NVIC_IEQ10_EXTI4_Disable();
 800057c:	4b0c      	ldr	r3, [pc, #48]	; (80005b0 <NVIC_Disable+0xc4>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a0b      	ldr	r2, [pc, #44]	; (80005b0 <NVIC_Disable+0xc4>)
 8000582:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000586:	6013      	str	r3, [r2, #0]
		break;
 8000588:	e00d      	b.n	80005a6 <NVIC_Disable+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IEQ23_EXTI9_5_Disable();
 800058a:	4b09      	ldr	r3, [pc, #36]	; (80005b0 <NVIC_Disable+0xc4>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	4a08      	ldr	r2, [pc, #32]	; (80005b0 <NVIC_Disable+0xc4>)
 8000590:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000594:	6013      	str	r3, [r2, #0]
		break;
 8000596:	e006      	b.n	80005a6 <NVIC_Disable+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IEQ40_EXTI15_10_Disable();
 8000598:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <NVIC_Disable+0xc8>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a05      	ldr	r2, [pc, #20]	; (80005b4 <NVIC_Disable+0xc8>)
 800059e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005a2:	6013      	str	r3, [r2, #0]
		break;
 80005a4:	bf00      	nop
	}

}
 80005a6:	bf00      	nop
 80005a8:	370c      	adds	r7, #12
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bc80      	pop	{r7}
 80005ae:	4770      	bx	lr
 80005b0:	e000e180 	.word	0xe000e180
 80005b4:	e000e184 	.word	0xe000e184

080005b8 <Update_EXTI>:
* @param [in]	: EXTI_Config Set by @ref EXTI_define, @ref EXTI_Trigger_define & @ref EXTI_IRQ_define
* @retval		: None
* Note			: None
*/
static void Update_EXTI(EXTI_PinConfig_t *EXTI_Config)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
	//1- Configure GPIO to be AF input -> Floating input
	GPIO_PinConfig_t PinConfig;

	//Update GPIO Pin to be Floating input
	PinConfig.GPIO_PinNumber = EXTI_Config->EXTI_Pin.GPIO_Pin;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	891b      	ldrh	r3, [r3, #8]
 80005c4:	813b      	strh	r3, [r7, #8]
	PinConfig.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 80005c6:	2301      	movs	r3, #1
 80005c8:	72bb      	strb	r3, [r7, #10]
	MCAL_GPIO_Init(EXTI_Config->EXTI_Pin.GPIO_Port, &PinConfig);
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	685b      	ldr	r3, [r3, #4]
 80005ce:	f107 0208 	add.w	r2, r7, #8
 80005d2:	4611      	mov	r1, r2
 80005d4:	4618      	mov	r0, r3
 80005d6:	f000 fa70 	bl	8000aba <MCAL_GPIO_Init>

	//2- Update AFIO to route between EXTI line with Port A | B | C | D
	uint8_t AFIO_EXTICR_index = EXTI_Config->EXTI_Pin.ETI_InputLineNumber / 4;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	881b      	ldrh	r3, [r3, #0]
 80005de:	089b      	lsrs	r3, r3, #2
 80005e0:	b29b      	uxth	r3, r3
 80005e2:	73fb      	strb	r3, [r7, #15]
	uint8_t AFIO_EXTICR_position = (EXTI_Config->EXTI_Pin.ETI_InputLineNumber % 4) * 4;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	881b      	ldrh	r3, [r3, #0]
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	f003 0303 	and.w	r3, r3, #3
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	009b      	lsls	r3, r3, #2
 80005f2:	73bb      	strb	r3, [r7, #14]

	//Clear the 4 bits
	AFIO->EXTICR[AFIO_EXTICR_index] &= ~(0xF << AFIO_EXTICR_position);
 80005f4:	4a62      	ldr	r2, [pc, #392]	; (8000780 <Update_EXTI+0x1c8>)
 80005f6:	7bfb      	ldrb	r3, [r7, #15]
 80005f8:	3302      	adds	r3, #2
 80005fa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005fe:	7bbb      	ldrb	r3, [r7, #14]
 8000600:	210f      	movs	r1, #15
 8000602:	fa01 f303 	lsl.w	r3, r1, r3
 8000606:	43db      	mvns	r3, r3
 8000608:	4618      	mov	r0, r3
 800060a:	495d      	ldr	r1, [pc, #372]	; (8000780 <Update_EXTI+0x1c8>)
 800060c:	7bfb      	ldrb	r3, [r7, #15]
 800060e:	4002      	ands	r2, r0
 8000610:	3302      	adds	r3, #2
 8000612:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	AFIO->EXTICR[AFIO_EXTICR_index] |= (AFIO_GPIO_EXTI_Mapping(EXTI_Config->EXTI_Pin.GPIO_Port) << AFIO_EXTICR_position);
 8000616:	4a5a      	ldr	r2, [pc, #360]	; (8000780 <Update_EXTI+0x1c8>)
 8000618:	7bfb      	ldrb	r3, [r7, #15]
 800061a:	3302      	adds	r3, #2
 800061c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	685b      	ldr	r3, [r3, #4]
 8000624:	4957      	ldr	r1, [pc, #348]	; (8000784 <Update_EXTI+0x1cc>)
 8000626:	428b      	cmp	r3, r1
 8000628:	d016      	beq.n	8000658 <Update_EXTI+0xa0>
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	685b      	ldr	r3, [r3, #4]
 800062e:	4956      	ldr	r1, [pc, #344]	; (8000788 <Update_EXTI+0x1d0>)
 8000630:	428b      	cmp	r3, r1
 8000632:	d00f      	beq.n	8000654 <Update_EXTI+0x9c>
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	685b      	ldr	r3, [r3, #4]
 8000638:	4954      	ldr	r1, [pc, #336]	; (800078c <Update_EXTI+0x1d4>)
 800063a:	428b      	cmp	r3, r1
 800063c:	d008      	beq.n	8000650 <Update_EXTI+0x98>
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	685b      	ldr	r3, [r3, #4]
 8000642:	4953      	ldr	r1, [pc, #332]	; (8000790 <Update_EXTI+0x1d8>)
 8000644:	428b      	cmp	r3, r1
 8000646:	d101      	bne.n	800064c <Update_EXTI+0x94>
 8000648:	2303      	movs	r3, #3
 800064a:	e006      	b.n	800065a <Update_EXTI+0xa2>
 800064c:	2300      	movs	r3, #0
 800064e:	e004      	b.n	800065a <Update_EXTI+0xa2>
 8000650:	2302      	movs	r3, #2
 8000652:	e002      	b.n	800065a <Update_EXTI+0xa2>
 8000654:	2301      	movs	r3, #1
 8000656:	e000      	b.n	800065a <Update_EXTI+0xa2>
 8000658:	2300      	movs	r3, #0
 800065a:	7bb9      	ldrb	r1, [r7, #14]
 800065c:	408b      	lsls	r3, r1
 800065e:	4618      	mov	r0, r3
 8000660:	4947      	ldr	r1, [pc, #284]	; (8000780 <Update_EXTI+0x1c8>)
 8000662:	7bfb      	ldrb	r3, [r7, #15]
 8000664:	4302      	orrs	r2, r0
 8000666:	3302      	adds	r3, #2
 8000668:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	//3- Update Rising/Falling edge
	EXTI->RTSR &= ~(1 << EXTI_Config->EXTI_Pin.ETI_InputLineNumber);
 800066c:	4b49      	ldr	r3, [pc, #292]	; (8000794 <Update_EXTI+0x1dc>)
 800066e:	689b      	ldr	r3, [r3, #8]
 8000670:	687a      	ldr	r2, [r7, #4]
 8000672:	8812      	ldrh	r2, [r2, #0]
 8000674:	4611      	mov	r1, r2
 8000676:	2201      	movs	r2, #1
 8000678:	408a      	lsls	r2, r1
 800067a:	43d2      	mvns	r2, r2
 800067c:	4611      	mov	r1, r2
 800067e:	4a45      	ldr	r2, [pc, #276]	; (8000794 <Update_EXTI+0x1dc>)
 8000680:	400b      	ands	r3, r1
 8000682:	6093      	str	r3, [r2, #8]
	EXTI->FTSR &= ~(1 << EXTI_Config->EXTI_Pin.ETI_InputLineNumber);
 8000684:	4b43      	ldr	r3, [pc, #268]	; (8000794 <Update_EXTI+0x1dc>)
 8000686:	68db      	ldr	r3, [r3, #12]
 8000688:	687a      	ldr	r2, [r7, #4]
 800068a:	8812      	ldrh	r2, [r2, #0]
 800068c:	4611      	mov	r1, r2
 800068e:	2201      	movs	r2, #1
 8000690:	408a      	lsls	r2, r1
 8000692:	43d2      	mvns	r2, r2
 8000694:	4611      	mov	r1, r2
 8000696:	4a3f      	ldr	r2, [pc, #252]	; (8000794 <Update_EXTI+0x1dc>)
 8000698:	400b      	ands	r3, r1
 800069a:	60d3      	str	r3, [r2, #12]

	if(EXTI_Config->Trigger_Case == EXTI_TRIGGER_RISING)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	7b1b      	ldrb	r3, [r3, #12]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d10b      	bne.n	80006bc <Update_EXTI+0x104>
	{
		EXTI->RTSR |= (1 << EXTI_Config->EXTI_Pin.ETI_InputLineNumber);
 80006a4:	4b3b      	ldr	r3, [pc, #236]	; (8000794 <Update_EXTI+0x1dc>)
 80006a6:	689b      	ldr	r3, [r3, #8]
 80006a8:	687a      	ldr	r2, [r7, #4]
 80006aa:	8812      	ldrh	r2, [r2, #0]
 80006ac:	4611      	mov	r1, r2
 80006ae:	2201      	movs	r2, #1
 80006b0:	408a      	lsls	r2, r1
 80006b2:	4611      	mov	r1, r2
 80006b4:	4a37      	ldr	r2, [pc, #220]	; (8000794 <Update_EXTI+0x1dc>)
 80006b6:	430b      	orrs	r3, r1
 80006b8:	6093      	str	r3, [r2, #8]
 80006ba:	e029      	b.n	8000710 <Update_EXTI+0x158>
	}
	else if(EXTI_Config->Trigger_Case == EXTI_TRIGGER_FALLING)
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	7b1b      	ldrb	r3, [r3, #12]
 80006c0:	2b01      	cmp	r3, #1
 80006c2:	d10b      	bne.n	80006dc <Update_EXTI+0x124>
	{
		EXTI->FTSR |= (1 << EXTI_Config->EXTI_Pin.ETI_InputLineNumber);
 80006c4:	4b33      	ldr	r3, [pc, #204]	; (8000794 <Update_EXTI+0x1dc>)
 80006c6:	68db      	ldr	r3, [r3, #12]
 80006c8:	687a      	ldr	r2, [r7, #4]
 80006ca:	8812      	ldrh	r2, [r2, #0]
 80006cc:	4611      	mov	r1, r2
 80006ce:	2201      	movs	r2, #1
 80006d0:	408a      	lsls	r2, r1
 80006d2:	4611      	mov	r1, r2
 80006d4:	4a2f      	ldr	r2, [pc, #188]	; (8000794 <Update_EXTI+0x1dc>)
 80006d6:	430b      	orrs	r3, r1
 80006d8:	60d3      	str	r3, [r2, #12]
 80006da:	e019      	b.n	8000710 <Update_EXTI+0x158>
	}
	else if(EXTI_Config->Trigger_Case == EXTI_TRIGGER_RISING_FALLING)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	7b1b      	ldrb	r3, [r3, #12]
 80006e0:	2b02      	cmp	r3, #2
 80006e2:	d115      	bne.n	8000710 <Update_EXTI+0x158>
	{
		EXTI->RTSR |= (1 << EXTI_Config->EXTI_Pin.ETI_InputLineNumber);
 80006e4:	4b2b      	ldr	r3, [pc, #172]	; (8000794 <Update_EXTI+0x1dc>)
 80006e6:	689b      	ldr	r3, [r3, #8]
 80006e8:	687a      	ldr	r2, [r7, #4]
 80006ea:	8812      	ldrh	r2, [r2, #0]
 80006ec:	4611      	mov	r1, r2
 80006ee:	2201      	movs	r2, #1
 80006f0:	408a      	lsls	r2, r1
 80006f2:	4611      	mov	r1, r2
 80006f4:	4a27      	ldr	r2, [pc, #156]	; (8000794 <Update_EXTI+0x1dc>)
 80006f6:	430b      	orrs	r3, r1
 80006f8:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (1 << EXTI_Config->EXTI_Pin.ETI_InputLineNumber);
 80006fa:	4b26      	ldr	r3, [pc, #152]	; (8000794 <Update_EXTI+0x1dc>)
 80006fc:	68db      	ldr	r3, [r3, #12]
 80006fe:	687a      	ldr	r2, [r7, #4]
 8000700:	8812      	ldrh	r2, [r2, #0]
 8000702:	4611      	mov	r1, r2
 8000704:	2201      	movs	r2, #1
 8000706:	408a      	lsls	r2, r1
 8000708:	4611      	mov	r1, r2
 800070a:	4a22      	ldr	r2, [pc, #136]	; (8000794 <Update_EXTI+0x1dc>)
 800070c:	430b      	orrs	r3, r1
 800070e:	60d3      	str	r3, [r2, #12]
	}

	//4- Update IRQ Handling CallBack
	GP_IRQ_CallBack[EXTI_Config->EXTI_Pin.ETI_InputLineNumber] = EXTI_Config->P_IRQ_CallBack;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	881b      	ldrh	r3, [r3, #0]
 8000714:	4619      	mov	r1, r3
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	691b      	ldr	r3, [r3, #16]
 800071a:	4a1f      	ldr	r2, [pc, #124]	; (8000798 <Update_EXTI+0x1e0>)
 800071c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	//5- Enable/Disable IRQ EXTI & NVIC
	if(EXTI_Config->IRQ_EN == EXTI_IRQ_ENABLE)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	7b5b      	ldrb	r3, [r3, #13]
 8000724:	2b01      	cmp	r3, #1
 8000726:	d111      	bne.n	800074c <Update_EXTI+0x194>
	{
		EXTI->IMR |= (1 << EXTI_Config->EXTI_Pin.ETI_InputLineNumber);
 8000728:	4b1a      	ldr	r3, [pc, #104]	; (8000794 <Update_EXTI+0x1dc>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	687a      	ldr	r2, [r7, #4]
 800072e:	8812      	ldrh	r2, [r2, #0]
 8000730:	4611      	mov	r1, r2
 8000732:	2201      	movs	r2, #1
 8000734:	408a      	lsls	r2, r1
 8000736:	4611      	mov	r1, r2
 8000738:	4a16      	ldr	r2, [pc, #88]	; (8000794 <Update_EXTI+0x1dc>)
 800073a:	430b      	orrs	r3, r1
 800073c:	6013      	str	r3, [r2, #0]
		NVIC_Enable(EXTI_Config->EXTI_Pin.ETI_InputLineNumber);
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	881b      	ldrh	r3, [r3, #0]
 8000742:	b2db      	uxtb	r3, r3
 8000744:	4618      	mov	r0, r3
 8000746:	f7ff fe6b 	bl	8000420 <NVIC_Enable>
	else if(EXTI_Config->IRQ_EN == EXTI_IRQ_DISABLE)
	{
		EXTI->IMR &= ~(1 << EXTI_Config->EXTI_Pin.ETI_InputLineNumber);
		NVIC_Disable(EXTI_Config->EXTI_Pin.ETI_InputLineNumber);
	}
}
 800074a:	e015      	b.n	8000778 <Update_EXTI+0x1c0>
	else if(EXTI_Config->IRQ_EN == EXTI_IRQ_DISABLE)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	7b5b      	ldrb	r3, [r3, #13]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d111      	bne.n	8000778 <Update_EXTI+0x1c0>
		EXTI->IMR &= ~(1 << EXTI_Config->EXTI_Pin.ETI_InputLineNumber);
 8000754:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <Update_EXTI+0x1dc>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	687a      	ldr	r2, [r7, #4]
 800075a:	8812      	ldrh	r2, [r2, #0]
 800075c:	4611      	mov	r1, r2
 800075e:	2201      	movs	r2, #1
 8000760:	408a      	lsls	r2, r1
 8000762:	43d2      	mvns	r2, r2
 8000764:	4611      	mov	r1, r2
 8000766:	4a0b      	ldr	r2, [pc, #44]	; (8000794 <Update_EXTI+0x1dc>)
 8000768:	400b      	ands	r3, r1
 800076a:	6013      	str	r3, [r2, #0]
		NVIC_Disable(EXTI_Config->EXTI_Pin.ETI_InputLineNumber);
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	881b      	ldrh	r3, [r3, #0]
 8000770:	b2db      	uxtb	r3, r3
 8000772:	4618      	mov	r0, r3
 8000774:	f7ff feba 	bl	80004ec <NVIC_Disable>
}
 8000778:	bf00      	nop
 800077a:	3710      	adds	r7, #16
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	40010000 	.word	0x40010000
 8000784:	40010800 	.word	0x40010800
 8000788:	40010c00 	.word	0x40010c00
 800078c:	40011000 	.word	0x40011000
 8000790:	40011400 	.word	0x40011400
 8000794:	40010400 	.word	0x40010400
 8000798:	20000020 	.word	0x20000020

0800079c <MCAL_EXTI_GPIO_Init>:
* Note			: STM32F103C6 MCU has GPIO A:E modules
* 				  but LQFP48 has only GPIO A,B,part of C/D exported as external pins for MCU
* 				  also mandatory to enable RCC Clock for AFIO & the corresponding GPIO
*/
void MCAL_EXTI_GPIO_Init(EXTI_PinConfig_t *EXTI_Config)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
	Update_EXTI(EXTI_Config);
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f7ff ff07 	bl	80005b8 <Update_EXTI>
}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
	...

080007b4 <EXTI0_IRQHandler>:
* ===============================================
* ISR Functions
* ===============================================
*/
void EXTI0_IRQHandler(void)  /* EXTI Line0 interrupt */
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
	//Cleared by writing a ‘1’ into the bit Pending register (EXTI_PR)
	EXTI->PR |= (1 << 0);
 80007b8:	4b05      	ldr	r3, [pc, #20]	; (80007d0 <EXTI0_IRQHandler+0x1c>)
 80007ba:	695b      	ldr	r3, [r3, #20]
 80007bc:	4a04      	ldr	r2, [pc, #16]	; (80007d0 <EXTI0_IRQHandler+0x1c>)
 80007be:	f043 0301 	orr.w	r3, r3, #1
 80007c2:	6153      	str	r3, [r2, #20]

	//Call IRQ CallBack
	GP_IRQ_CallBack[0]();
 80007c4:	4b03      	ldr	r3, [pc, #12]	; (80007d4 <EXTI0_IRQHandler+0x20>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4798      	blx	r3
}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40010400 	.word	0x40010400
 80007d4:	20000020 	.word	0x20000020

080007d8 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)  /* EXTI Line1 interrupt */
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
	//Cleared by writing a ‘1’ into the bit Pending register (EXTI_PR)
	EXTI->PR |= (1 << 1);
 80007dc:	4b05      	ldr	r3, [pc, #20]	; (80007f4 <EXTI1_IRQHandler+0x1c>)
 80007de:	695b      	ldr	r3, [r3, #20]
 80007e0:	4a04      	ldr	r2, [pc, #16]	; (80007f4 <EXTI1_IRQHandler+0x1c>)
 80007e2:	f043 0302 	orr.w	r3, r3, #2
 80007e6:	6153      	str	r3, [r2, #20]

	//Call IRQ CallBack
	GP_IRQ_CallBack[1]();
 80007e8:	4b03      	ldr	r3, [pc, #12]	; (80007f8 <EXTI1_IRQHandler+0x20>)
 80007ea:	685b      	ldr	r3, [r3, #4]
 80007ec:	4798      	blx	r3
}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40010400 	.word	0x40010400
 80007f8:	20000020 	.word	0x20000020

080007fc <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)  /* EXTI Line2 interrupt */
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
	//Cleared by writing a ‘1’ into the bit Pending register (EXTI_PR)
	EXTI->PR |= (1 << 2);
 8000800:	4b05      	ldr	r3, [pc, #20]	; (8000818 <EXTI2_IRQHandler+0x1c>)
 8000802:	695b      	ldr	r3, [r3, #20]
 8000804:	4a04      	ldr	r2, [pc, #16]	; (8000818 <EXTI2_IRQHandler+0x1c>)
 8000806:	f043 0304 	orr.w	r3, r3, #4
 800080a:	6153      	str	r3, [r2, #20]

	//Call IRQ CallBack
	GP_IRQ_CallBack[2]();
 800080c:	4b03      	ldr	r3, [pc, #12]	; (800081c <EXTI2_IRQHandler+0x20>)
 800080e:	689b      	ldr	r3, [r3, #8]
 8000810:	4798      	blx	r3
}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	40010400 	.word	0x40010400
 800081c:	20000020 	.word	0x20000020

08000820 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)  /* EXTI Line3 interrupt  */
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
	//Cleared by writing a ‘1’ into the bit Pending register (EXTI_PR)
	EXTI->PR |= (1 << 3);
 8000824:	4b05      	ldr	r3, [pc, #20]	; (800083c <EXTI3_IRQHandler+0x1c>)
 8000826:	695b      	ldr	r3, [r3, #20]
 8000828:	4a04      	ldr	r2, [pc, #16]	; (800083c <EXTI3_IRQHandler+0x1c>)
 800082a:	f043 0308 	orr.w	r3, r3, #8
 800082e:	6153      	str	r3, [r2, #20]

	//Call IRQ CallBack
	GP_IRQ_CallBack[3]();
 8000830:	4b03      	ldr	r3, [pc, #12]	; (8000840 <EXTI3_IRQHandler+0x20>)
 8000832:	68db      	ldr	r3, [r3, #12]
 8000834:	4798      	blx	r3
}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40010400 	.word	0x40010400
 8000840:	20000020 	.word	0x20000020

08000844 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)  /* EXTI Line4 interrupt  */
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
	//Cleared by writing a ‘1’ into the bit Pending register (EXTI_PR)
	EXTI->PR |= (1 << 4);
 8000848:	4b05      	ldr	r3, [pc, #20]	; (8000860 <EXTI4_IRQHandler+0x1c>)
 800084a:	695b      	ldr	r3, [r3, #20]
 800084c:	4a04      	ldr	r2, [pc, #16]	; (8000860 <EXTI4_IRQHandler+0x1c>)
 800084e:	f043 0310 	orr.w	r3, r3, #16
 8000852:	6153      	str	r3, [r2, #20]

	//Call IRQ CallBack
	GP_IRQ_CallBack[4]();
 8000854:	4b03      	ldr	r3, [pc, #12]	; (8000864 <EXTI4_IRQHandler+0x20>)
 8000856:	691b      	ldr	r3, [r3, #16]
 8000858:	4798      	blx	r3
}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40010400 	.word	0x40010400
 8000864:	20000020 	.word	0x20000020

08000868 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void) /* EXTI Line[9:5] interrupts */
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
	if(EXTI->PR & (1 << 5)) { EXTI->PR |= (1 << 5);	GP_IRQ_CallBack[5](); }
 800086c:	4b26      	ldr	r3, [pc, #152]	; (8000908 <EXTI9_5_IRQHandler+0xa0>)
 800086e:	695b      	ldr	r3, [r3, #20]
 8000870:	f003 0320 	and.w	r3, r3, #32
 8000874:	2b00      	cmp	r3, #0
 8000876:	d008      	beq.n	800088a <EXTI9_5_IRQHandler+0x22>
 8000878:	4b23      	ldr	r3, [pc, #140]	; (8000908 <EXTI9_5_IRQHandler+0xa0>)
 800087a:	695b      	ldr	r3, [r3, #20]
 800087c:	4a22      	ldr	r2, [pc, #136]	; (8000908 <EXTI9_5_IRQHandler+0xa0>)
 800087e:	f043 0320 	orr.w	r3, r3, #32
 8000882:	6153      	str	r3, [r2, #20]
 8000884:	4b21      	ldr	r3, [pc, #132]	; (800090c <EXTI9_5_IRQHandler+0xa4>)
 8000886:	695b      	ldr	r3, [r3, #20]
 8000888:	4798      	blx	r3
	if(EXTI->PR & (1 << 6)) { EXTI->PR |= (1 << 6);	GP_IRQ_CallBack[6](); }
 800088a:	4b1f      	ldr	r3, [pc, #124]	; (8000908 <EXTI9_5_IRQHandler+0xa0>)
 800088c:	695b      	ldr	r3, [r3, #20]
 800088e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000892:	2b00      	cmp	r3, #0
 8000894:	d008      	beq.n	80008a8 <EXTI9_5_IRQHandler+0x40>
 8000896:	4b1c      	ldr	r3, [pc, #112]	; (8000908 <EXTI9_5_IRQHandler+0xa0>)
 8000898:	695b      	ldr	r3, [r3, #20]
 800089a:	4a1b      	ldr	r2, [pc, #108]	; (8000908 <EXTI9_5_IRQHandler+0xa0>)
 800089c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008a0:	6153      	str	r3, [r2, #20]
 80008a2:	4b1a      	ldr	r3, [pc, #104]	; (800090c <EXTI9_5_IRQHandler+0xa4>)
 80008a4:	699b      	ldr	r3, [r3, #24]
 80008a6:	4798      	blx	r3
	if(EXTI->PR & (1 << 7)) { EXTI->PR |= (1 << 7);	GP_IRQ_CallBack[7](); }
 80008a8:	4b17      	ldr	r3, [pc, #92]	; (8000908 <EXTI9_5_IRQHandler+0xa0>)
 80008aa:	695b      	ldr	r3, [r3, #20]
 80008ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d008      	beq.n	80008c6 <EXTI9_5_IRQHandler+0x5e>
 80008b4:	4b14      	ldr	r3, [pc, #80]	; (8000908 <EXTI9_5_IRQHandler+0xa0>)
 80008b6:	695b      	ldr	r3, [r3, #20]
 80008b8:	4a13      	ldr	r2, [pc, #76]	; (8000908 <EXTI9_5_IRQHandler+0xa0>)
 80008ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008be:	6153      	str	r3, [r2, #20]
 80008c0:	4b12      	ldr	r3, [pc, #72]	; (800090c <EXTI9_5_IRQHandler+0xa4>)
 80008c2:	69db      	ldr	r3, [r3, #28]
 80008c4:	4798      	blx	r3
	if(EXTI->PR & (1 << 8)) { EXTI->PR |= (1 << 8);	GP_IRQ_CallBack[8](); }
 80008c6:	4b10      	ldr	r3, [pc, #64]	; (8000908 <EXTI9_5_IRQHandler+0xa0>)
 80008c8:	695b      	ldr	r3, [r3, #20]
 80008ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d008      	beq.n	80008e4 <EXTI9_5_IRQHandler+0x7c>
 80008d2:	4b0d      	ldr	r3, [pc, #52]	; (8000908 <EXTI9_5_IRQHandler+0xa0>)
 80008d4:	695b      	ldr	r3, [r3, #20]
 80008d6:	4a0c      	ldr	r2, [pc, #48]	; (8000908 <EXTI9_5_IRQHandler+0xa0>)
 80008d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008dc:	6153      	str	r3, [r2, #20]
 80008de:	4b0b      	ldr	r3, [pc, #44]	; (800090c <EXTI9_5_IRQHandler+0xa4>)
 80008e0:	6a1b      	ldr	r3, [r3, #32]
 80008e2:	4798      	blx	r3
	if(EXTI->PR & (1 << 9)) { EXTI->PR |= (1 << 9);	GP_IRQ_CallBack[9](); }
 80008e4:	4b08      	ldr	r3, [pc, #32]	; (8000908 <EXTI9_5_IRQHandler+0xa0>)
 80008e6:	695b      	ldr	r3, [r3, #20]
 80008e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d008      	beq.n	8000902 <EXTI9_5_IRQHandler+0x9a>
 80008f0:	4b05      	ldr	r3, [pc, #20]	; (8000908 <EXTI9_5_IRQHandler+0xa0>)
 80008f2:	695b      	ldr	r3, [r3, #20]
 80008f4:	4a04      	ldr	r2, [pc, #16]	; (8000908 <EXTI9_5_IRQHandler+0xa0>)
 80008f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008fa:	6153      	str	r3, [r2, #20]
 80008fc:	4b03      	ldr	r3, [pc, #12]	; (800090c <EXTI9_5_IRQHandler+0xa4>)
 80008fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000900:	4798      	blx	r3
}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40010400 	.word	0x40010400
 800090c:	20000020 	.word	0x20000020

08000910 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void) /* EXTI Line[15:10] interrupts */
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
	if(EXTI->PR & (1 << 10)) { EXTI->PR |= (1 << 10);	GP_IRQ_CallBack[10](); }
 8000914:	4b2d      	ldr	r3, [pc, #180]	; (80009cc <EXTI15_10_IRQHandler+0xbc>)
 8000916:	695b      	ldr	r3, [r3, #20]
 8000918:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800091c:	2b00      	cmp	r3, #0
 800091e:	d008      	beq.n	8000932 <EXTI15_10_IRQHandler+0x22>
 8000920:	4b2a      	ldr	r3, [pc, #168]	; (80009cc <EXTI15_10_IRQHandler+0xbc>)
 8000922:	695b      	ldr	r3, [r3, #20]
 8000924:	4a29      	ldr	r2, [pc, #164]	; (80009cc <EXTI15_10_IRQHandler+0xbc>)
 8000926:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800092a:	6153      	str	r3, [r2, #20]
 800092c:	4b28      	ldr	r3, [pc, #160]	; (80009d0 <EXTI15_10_IRQHandler+0xc0>)
 800092e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000930:	4798      	blx	r3
	if(EXTI->PR & (1 << 11)) { EXTI->PR |= (1 << 11);	GP_IRQ_CallBack[11](); }
 8000932:	4b26      	ldr	r3, [pc, #152]	; (80009cc <EXTI15_10_IRQHandler+0xbc>)
 8000934:	695b      	ldr	r3, [r3, #20]
 8000936:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800093a:	2b00      	cmp	r3, #0
 800093c:	d008      	beq.n	8000950 <EXTI15_10_IRQHandler+0x40>
 800093e:	4b23      	ldr	r3, [pc, #140]	; (80009cc <EXTI15_10_IRQHandler+0xbc>)
 8000940:	695b      	ldr	r3, [r3, #20]
 8000942:	4a22      	ldr	r2, [pc, #136]	; (80009cc <EXTI15_10_IRQHandler+0xbc>)
 8000944:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000948:	6153      	str	r3, [r2, #20]
 800094a:	4b21      	ldr	r3, [pc, #132]	; (80009d0 <EXTI15_10_IRQHandler+0xc0>)
 800094c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800094e:	4798      	blx	r3
	if(EXTI->PR & (1 << 12)) { EXTI->PR |= (1 << 12);	GP_IRQ_CallBack[12](); }
 8000950:	4b1e      	ldr	r3, [pc, #120]	; (80009cc <EXTI15_10_IRQHandler+0xbc>)
 8000952:	695b      	ldr	r3, [r3, #20]
 8000954:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000958:	2b00      	cmp	r3, #0
 800095a:	d008      	beq.n	800096e <EXTI15_10_IRQHandler+0x5e>
 800095c:	4b1b      	ldr	r3, [pc, #108]	; (80009cc <EXTI15_10_IRQHandler+0xbc>)
 800095e:	695b      	ldr	r3, [r3, #20]
 8000960:	4a1a      	ldr	r2, [pc, #104]	; (80009cc <EXTI15_10_IRQHandler+0xbc>)
 8000962:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000966:	6153      	str	r3, [r2, #20]
 8000968:	4b19      	ldr	r3, [pc, #100]	; (80009d0 <EXTI15_10_IRQHandler+0xc0>)
 800096a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096c:	4798      	blx	r3
	if(EXTI->PR & (1 << 13)) { EXTI->PR |= (1 << 13);	GP_IRQ_CallBack[13](); }
 800096e:	4b17      	ldr	r3, [pc, #92]	; (80009cc <EXTI15_10_IRQHandler+0xbc>)
 8000970:	695b      	ldr	r3, [r3, #20]
 8000972:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000976:	2b00      	cmp	r3, #0
 8000978:	d008      	beq.n	800098c <EXTI15_10_IRQHandler+0x7c>
 800097a:	4b14      	ldr	r3, [pc, #80]	; (80009cc <EXTI15_10_IRQHandler+0xbc>)
 800097c:	695b      	ldr	r3, [r3, #20]
 800097e:	4a13      	ldr	r2, [pc, #76]	; (80009cc <EXTI15_10_IRQHandler+0xbc>)
 8000980:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000984:	6153      	str	r3, [r2, #20]
 8000986:	4b12      	ldr	r3, [pc, #72]	; (80009d0 <EXTI15_10_IRQHandler+0xc0>)
 8000988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800098a:	4798      	blx	r3
	if(EXTI->PR & (1 << 14)) { EXTI->PR |= (1 << 14);	GP_IRQ_CallBack[14](); }
 800098c:	4b0f      	ldr	r3, [pc, #60]	; (80009cc <EXTI15_10_IRQHandler+0xbc>)
 800098e:	695b      	ldr	r3, [r3, #20]
 8000990:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000994:	2b00      	cmp	r3, #0
 8000996:	d008      	beq.n	80009aa <EXTI15_10_IRQHandler+0x9a>
 8000998:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <EXTI15_10_IRQHandler+0xbc>)
 800099a:	695b      	ldr	r3, [r3, #20]
 800099c:	4a0b      	ldr	r2, [pc, #44]	; (80009cc <EXTI15_10_IRQHandler+0xbc>)
 800099e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a2:	6153      	str	r3, [r2, #20]
 80009a4:	4b0a      	ldr	r3, [pc, #40]	; (80009d0 <EXTI15_10_IRQHandler+0xc0>)
 80009a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009a8:	4798      	blx	r3
	if(EXTI->PR & (1 << 15)) { EXTI->PR |= (1 << 15);	GP_IRQ_CallBack[15](); }
 80009aa:	4b08      	ldr	r3, [pc, #32]	; (80009cc <EXTI15_10_IRQHandler+0xbc>)
 80009ac:	695b      	ldr	r3, [r3, #20]
 80009ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d008      	beq.n	80009c8 <EXTI15_10_IRQHandler+0xb8>
 80009b6:	4b05      	ldr	r3, [pc, #20]	; (80009cc <EXTI15_10_IRQHandler+0xbc>)
 80009b8:	695b      	ldr	r3, [r3, #20]
 80009ba:	4a04      	ldr	r2, [pc, #16]	; (80009cc <EXTI15_10_IRQHandler+0xbc>)
 80009bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009c0:	6153      	str	r3, [r2, #20]
 80009c2:	4b03      	ldr	r3, [pc, #12]	; (80009d0 <EXTI15_10_IRQHandler+0xc0>)
 80009c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80009c6:	4798      	blx	r3
}
 80009c8:	bf00      	nop
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	40010400 	.word	0x40010400
 80009d0:	20000020 	.word	0x20000020

080009d4 <Get_CRLH_Position>:
* @param [in]	: PinNumber specifies the port bit. Set by @ref GPIO_PINS_define
* @retval		: Position of the first bit for specific pin
* Note			: None
*/
uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b085      	sub	sp, #20
 80009d8:	af00      	add	r7, sp, #0
 80009da:	4603      	mov	r3, r0
 80009dc:	80fb      	strh	r3, [r7, #6]
	uint8_t position;
	switch(PinNumber)
 80009de:	88fb      	ldrh	r3, [r7, #6]
 80009e0:	2b80      	cmp	r3, #128	; 0x80
 80009e2:	d049      	beq.n	8000a78 <Get_CRLH_Position+0xa4>
 80009e4:	2b80      	cmp	r3, #128	; 0x80
 80009e6:	dc11      	bgt.n	8000a0c <Get_CRLH_Position+0x38>
 80009e8:	2b08      	cmp	r3, #8
 80009ea:	d039      	beq.n	8000a60 <Get_CRLH_Position+0x8c>
 80009ec:	2b08      	cmp	r3, #8
 80009ee:	dc06      	bgt.n	80009fe <Get_CRLH_Position+0x2a>
 80009f0:	2b02      	cmp	r3, #2
 80009f2:	d02f      	beq.n	8000a54 <Get_CRLH_Position+0x80>
 80009f4:	2b04      	cmp	r3, #4
 80009f6:	d030      	beq.n	8000a5a <Get_CRLH_Position+0x86>
 80009f8:	2b01      	cmp	r3, #1
 80009fa:	d028      	beq.n	8000a4e <Get_CRLH_Position+0x7a>
 80009fc:	e057      	b.n	8000aae <Get_CRLH_Position+0xda>
 80009fe:	2b20      	cmp	r3, #32
 8000a00:	d034      	beq.n	8000a6c <Get_CRLH_Position+0x98>
 8000a02:	2b40      	cmp	r3, #64	; 0x40
 8000a04:	d035      	beq.n	8000a72 <Get_CRLH_Position+0x9e>
 8000a06:	2b10      	cmp	r3, #16
 8000a08:	d02d      	beq.n	8000a66 <Get_CRLH_Position+0x92>
 8000a0a:	e050      	b.n	8000aae <Get_CRLH_Position+0xda>
 8000a0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000a10:	d03e      	beq.n	8000a90 <Get_CRLH_Position+0xbc>
 8000a12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000a16:	dc09      	bgt.n	8000a2c <Get_CRLH_Position+0x58>
 8000a18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a1c:	d032      	beq.n	8000a84 <Get_CRLH_Position+0xb0>
 8000a1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a22:	d032      	beq.n	8000a8a <Get_CRLH_Position+0xb6>
 8000a24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a28:	d029      	beq.n	8000a7e <Get_CRLH_Position+0xaa>
 8000a2a:	e040      	b.n	8000aae <Get_CRLH_Position+0xda>
 8000a2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a30:	d034      	beq.n	8000a9c <Get_CRLH_Position+0xc8>
 8000a32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a36:	dc03      	bgt.n	8000a40 <Get_CRLH_Position+0x6c>
 8000a38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000a3c:	d02b      	beq.n	8000a96 <Get_CRLH_Position+0xc2>
 8000a3e:	e036      	b.n	8000aae <Get_CRLH_Position+0xda>
 8000a40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000a44:	d02d      	beq.n	8000aa2 <Get_CRLH_Position+0xce>
 8000a46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000a4a:	d02d      	beq.n	8000aa8 <Get_CRLH_Position+0xd4>
 8000a4c:	e02f      	b.n	8000aae <Get_CRLH_Position+0xda>
	{
	case GPIO_PIN_0:
		position = 0;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	73fb      	strb	r3, [r7, #15]
		break;
 8000a52:	e02c      	b.n	8000aae <Get_CRLH_Position+0xda>

	case GPIO_PIN_1:
		position = 4;
 8000a54:	2304      	movs	r3, #4
 8000a56:	73fb      	strb	r3, [r7, #15]
		break;
 8000a58:	e029      	b.n	8000aae <Get_CRLH_Position+0xda>

	case GPIO_PIN_2:
		position = 8;
 8000a5a:	2308      	movs	r3, #8
 8000a5c:	73fb      	strb	r3, [r7, #15]
		break;
 8000a5e:	e026      	b.n	8000aae <Get_CRLH_Position+0xda>

	case GPIO_PIN_3:
		position = 12;
 8000a60:	230c      	movs	r3, #12
 8000a62:	73fb      	strb	r3, [r7, #15]
		break;
 8000a64:	e023      	b.n	8000aae <Get_CRLH_Position+0xda>

	case GPIO_PIN_4:
		position = 16;
 8000a66:	2310      	movs	r3, #16
 8000a68:	73fb      	strb	r3, [r7, #15]
		break;
 8000a6a:	e020      	b.n	8000aae <Get_CRLH_Position+0xda>

	case GPIO_PIN_5:
		position = 20;
 8000a6c:	2314      	movs	r3, #20
 8000a6e:	73fb      	strb	r3, [r7, #15]
		break;
 8000a70:	e01d      	b.n	8000aae <Get_CRLH_Position+0xda>

	case GPIO_PIN_6:
		position = 24;
 8000a72:	2318      	movs	r3, #24
 8000a74:	73fb      	strb	r3, [r7, #15]
		break;
 8000a76:	e01a      	b.n	8000aae <Get_CRLH_Position+0xda>

	case GPIO_PIN_7:
		position = 28;
 8000a78:	231c      	movs	r3, #28
 8000a7a:	73fb      	strb	r3, [r7, #15]
		break;
 8000a7c:	e017      	b.n	8000aae <Get_CRLH_Position+0xda>

	case GPIO_PIN_8:
		position = 0;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	73fb      	strb	r3, [r7, #15]
		break;
 8000a82:	e014      	b.n	8000aae <Get_CRLH_Position+0xda>

	case GPIO_PIN_9:
		position = 4;
 8000a84:	2304      	movs	r3, #4
 8000a86:	73fb      	strb	r3, [r7, #15]
		break;
 8000a88:	e011      	b.n	8000aae <Get_CRLH_Position+0xda>

	case GPIO_PIN_10:
		position = 8;
 8000a8a:	2308      	movs	r3, #8
 8000a8c:	73fb      	strb	r3, [r7, #15]
		break;
 8000a8e:	e00e      	b.n	8000aae <Get_CRLH_Position+0xda>

	case GPIO_PIN_11:
		position = 12;
 8000a90:	230c      	movs	r3, #12
 8000a92:	73fb      	strb	r3, [r7, #15]
		break;
 8000a94:	e00b      	b.n	8000aae <Get_CRLH_Position+0xda>

	case GPIO_PIN_12:
		position = 16;
 8000a96:	2310      	movs	r3, #16
 8000a98:	73fb      	strb	r3, [r7, #15]
		break;
 8000a9a:	e008      	b.n	8000aae <Get_CRLH_Position+0xda>

	case GPIO_PIN_13:
		position = 20;
 8000a9c:	2314      	movs	r3, #20
 8000a9e:	73fb      	strb	r3, [r7, #15]
		break;
 8000aa0:	e005      	b.n	8000aae <Get_CRLH_Position+0xda>

	case GPIO_PIN_14:
		position = 24;
 8000aa2:	2318      	movs	r3, #24
 8000aa4:	73fb      	strb	r3, [r7, #15]
		break;
 8000aa6:	e002      	b.n	8000aae <Get_CRLH_Position+0xda>

	case GPIO_PIN_15:
		position = 28;
 8000aa8:	231c      	movs	r3, #28
 8000aaa:	73fb      	strb	r3, [r7, #15]
		break;
 8000aac:	bf00      	nop
	}

	return position;
 8000aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3714      	adds	r7, #20
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bc80      	pop	{r7}
 8000ab8:	4770      	bx	lr

08000aba <MCAL_GPIO_Init>:
* @retval		: None
* Note			: STM32F103C6 MCU has GPIO A:E modules
* 				  but LQFP48 has only GPIO A,B,part of C/D exported as external pins for MCU
*/
void MCAL_GPIO_Init	(GPIO_TypeDef *GPIOx, GPIO_PinConfig_t *PinConfig)
{
 8000aba:	b590      	push	{r4, r7, lr}
 8000abc:	b085      	sub	sp, #20
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	6078      	str	r0, [r7, #4]
 8000ac2:	6039      	str	r1, [r7, #0]
	volatile uint32_t* Configregister = NULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_Config = 0;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	73fb      	strb	r3, [r7, #15]
	//Port configuration register low (GPIOx_CRL) Configure pins 0:7
	//Port configuration register high (GPIOx_CRH) Configure pins 8:15
	Configregister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8)? &GPIOx->CRL : &GPIOx->CRH;
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	881b      	ldrh	r3, [r3, #0]
 8000ad0:	2bff      	cmp	r3, #255	; 0xff
 8000ad2:	d801      	bhi.n	8000ad8 <MCAL_GPIO_Init+0x1e>
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	e001      	b.n	8000adc <MCAL_GPIO_Init+0x22>
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	3304      	adds	r3, #4
 8000adc:	60bb      	str	r3, [r7, #8]

	//Clear CNFy[1:0] MODEy[1:0]
	*Configregister &= ~(0xF << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	881b      	ldrh	r3, [r3, #0]
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f7ff ff76 	bl	80009d4 <Get_CRLH_Position>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	461a      	mov	r2, r3
 8000aec:	230f      	movs	r3, #15
 8000aee:	4093      	lsls	r3, r2
 8000af0:	43da      	mvns	r2, r3
 8000af2:	68bb      	ldr	r3, [r7, #8]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	401a      	ands	r2, r3
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	601a      	str	r2, [r3, #0]

	// if pin is output
	if(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD || PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP ||
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	789b      	ldrb	r3, [r3, #2]
 8000b00:	2b07      	cmp	r3, #7
 8000b02:	d00b      	beq.n	8000b1c <MCAL_GPIO_Init+0x62>
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	789b      	ldrb	r3, [r3, #2]
 8000b08:	2b06      	cmp	r3, #6
 8000b0a:	d007      	beq.n	8000b1c <MCAL_GPIO_Init+0x62>
	   PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD || PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP)
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	789b      	ldrb	r3, [r3, #2]
	if(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD || PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP ||
 8000b10:	2b05      	cmp	r3, #5
 8000b12:	d003      	beq.n	8000b1c <MCAL_GPIO_Init+0x62>
	   PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD || PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP)
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	789b      	ldrb	r3, [r3, #2]
 8000b18:	2b04      	cmp	r3, #4
 8000b1a:	d10e      	bne.n	8000b3a <MCAL_GPIO_Init+0x80>
	{
		PIN_Config = ( (((PinConfig->GPIO_MODE - 4) << 2) | (PinConfig->GPIO_Output_Speed)) & 0x0F );
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	789b      	ldrb	r3, [r3, #2]
 8000b20:	3b04      	subs	r3, #4
 8000b22:	009b      	lsls	r3, r3, #2
 8000b24:	b25a      	sxtb	r2, r3
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	78db      	ldrb	r3, [r3, #3]
 8000b2a:	b25b      	sxtb	r3, r3
 8000b2c:	4313      	orrs	r3, r2
 8000b2e:	b25b      	sxtb	r3, r3
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	f003 030f 	and.w	r3, r3, #15
 8000b36:	73fb      	strb	r3, [r7, #15]
 8000b38:	e02c      	b.n	8000b94 <MCAL_GPIO_Init+0xda>
	}
	else
	{
		if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO || PinConfig->GPIO_MODE == GPIO_MODE_ANALOG)
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	789b      	ldrb	r3, [r3, #2]
 8000b3e:	2b01      	cmp	r3, #1
 8000b40:	d003      	beq.n	8000b4a <MCAL_GPIO_Init+0x90>
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	789b      	ldrb	r3, [r3, #2]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d107      	bne.n	8000b5a <MCAL_GPIO_Init+0xa0>
		{
			PIN_Config = ( (PinConfig->GPIO_MODE << 2) & 0x0F );
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	789b      	ldrb	r3, [r3, #2]
 8000b4e:	009b      	lsls	r3, r3, #2
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	f003 030f 	and.w	r3, r3, #15
 8000b56:	73fb      	strb	r3, [r7, #15]
 8000b58:	e01c      	b.n	8000b94 <MCAL_GPIO_Init+0xda>
		}
		else if(PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT) //Consider it as input floating
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	789b      	ldrb	r3, [r3, #2]
 8000b5e:	2b08      	cmp	r3, #8
 8000b60:	d102      	bne.n	8000b68 <MCAL_GPIO_Init+0xae>
		{
			PIN_Config = ( (GPIO_MODE_INPUT_FLO << 2) & 0x0F );
 8000b62:	2304      	movs	r3, #4
 8000b64:	73fb      	strb	r3, [r7, #15]
 8000b66:	e015      	b.n	8000b94 <MCAL_GPIO_Init+0xda>
		}
		else //pull-up & pull-down
		{
			PIN_Config = ( (GPIO_MODE_INPUT_PU << 2) & 0x0F );
 8000b68:	2308      	movs	r3, #8
 8000b6a:	73fb      	strb	r3, [r7, #15]
			if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	789b      	ldrb	r3, [r3, #2]
 8000b70:	2b02      	cmp	r3, #2
 8000b72:	d107      	bne.n	8000b84 <MCAL_GPIO_Init+0xca>
			{
				//PxODR register = 1 Input pull-up : Table 20. Port bit configuration table
				GPIOx->ODR |= PinConfig->GPIO_PinNumber;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	68db      	ldr	r3, [r3, #12]
 8000b78:	683a      	ldr	r2, [r7, #0]
 8000b7a:	8812      	ldrh	r2, [r2, #0]
 8000b7c:	431a      	orrs	r2, r3
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	60da      	str	r2, [r3, #12]
 8000b82:	e007      	b.n	8000b94 <MCAL_GPIO_Init+0xda>
			}
			else
			{
				//PxODR register = 0 Input pull-down : Table 20. Port bit configuration table
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	68db      	ldr	r3, [r3, #12]
 8000b88:	683a      	ldr	r2, [r7, #0]
 8000b8a:	8812      	ldrh	r2, [r2, #0]
 8000b8c:	43d2      	mvns	r2, r2
 8000b8e:	401a      	ands	r2, r3
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	60da      	str	r2, [r3, #12]
			}
		}
	}
	//Write on CRL or CRH
	*Configregister |= ( PIN_Config << Get_CRLH_Position(PinConfig->GPIO_PinNumber) );
 8000b94:	7bfc      	ldrb	r4, [r7, #15]
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	881b      	ldrh	r3, [r3, #0]
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f7ff ff1a 	bl	80009d4 <Get_CRLH_Position>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	fa04 f203 	lsl.w	r2, r4, r3
 8000ba6:	68bb      	ldr	r3, [r7, #8]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	431a      	orrs	r2, r3
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	601a      	str	r2, [r3, #0]
}
 8000bb0:	bf00      	nop
 8000bb2:	3714      	adds	r7, #20
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd90      	pop	{r4, r7, pc}

08000bb8 <MCAL_GPIO_WritePort>:
* @param [in]	: GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral
* @param [in]	: Value: Port value
* @retval		: None
* Note			: None
*/void MCAL_GPIO_WritePort(GPIO_TypeDef *GPIOx, uint16_t Value)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	460b      	mov	r3, r1
 8000bc2:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR = (uint32_t)Value;
 8000bc4:	887a      	ldrh	r2, [r7, #2]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	60da      	str	r2, [r3, #12]
}
 8000bca:	bf00      	nop
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bc80      	pop	{r7}
 8000bd2:	4770      	bx	lr

08000bd4 <MCAL_GPIO_WritePin>:
* @param [in]	: Value: Pin value
* @retval		: None
* Note			: None
*/
void MCAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t PinNumber, uint8_t Value)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
 8000bdc:	460b      	mov	r3, r1
 8000bde:	807b      	strh	r3, [r7, #2]
 8000be0:	4613      	mov	r3, r2
 8000be2:	707b      	strb	r3, [r7, #1]
	if(Value == GPIO_PIN_SET)
 8000be4:	787b      	ldrb	r3, [r7, #1]
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d103      	bne.n	8000bf2 <MCAL_GPIO_WritePin+0x1e>
	{
//		Bits 15:0 BSy: Port x Set bit y (y= 0 .. 15)
//		These bits are write-only and can be accessed in Word mode only.
//		0: No action on the corresponding ODRx bit
//		1: Set the corresponding ODRx bit
		GPIOx->BSRR = (uint32_t)PinNumber;
 8000bea:	887a      	ldrh	r2, [r7, #2]
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	611a      	str	r2, [r3, #16]
//		These bits are write-only and can be accessed in Word mode only.
//		0: No action on the corresponding ODRx bit
//		1: Reset the corresponding ODRx bit
		GPIOx->BRR = (uint32_t)PinNumber;
	}
}
 8000bf0:	e002      	b.n	8000bf8 <MCAL_GPIO_WritePin+0x24>
		GPIOx->BRR = (uint32_t)PinNumber;
 8000bf2:	887a      	ldrh	r2, [r7, #2]
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	615a      	str	r2, [r3, #20]
}
 8000bf8:	bf00      	nop
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bc80      	pop	{r7}
 8000c00:	4770      	bx	lr
	...

08000c04 <Clock_Init>:
#include "LCD.h"

uint8_t IRQ_flag;

void Clock_Init(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
	// IO port A clock enable
	RCC_GPIOA_CLK_EN();
 8000c08:	4b0a      	ldr	r3, [pc, #40]	; (8000c34 <Clock_Init+0x30>)
 8000c0a:	699b      	ldr	r3, [r3, #24]
 8000c0c:	4a09      	ldr	r2, [pc, #36]	; (8000c34 <Clock_Init+0x30>)
 8000c0e:	f043 0304 	orr.w	r3, r3, #4
 8000c12:	6193      	str	r3, [r2, #24]
	// IO port B clock enable
	RCC_GPIOB_CLK_EN();
 8000c14:	4b07      	ldr	r3, [pc, #28]	; (8000c34 <Clock_Init+0x30>)
 8000c16:	699b      	ldr	r3, [r3, #24]
 8000c18:	4a06      	ldr	r2, [pc, #24]	; (8000c34 <Clock_Init+0x30>)
 8000c1a:	f043 0308 	orr.w	r3, r3, #8
 8000c1e:	6193      	str	r3, [r2, #24]
	// AFIO clock enable
	RCC_AFIO_CLK_EN();
 8000c20:	4b04      	ldr	r3, [pc, #16]	; (8000c34 <Clock_Init+0x30>)
 8000c22:	699b      	ldr	r3, [r3, #24]
 8000c24:	4a03      	ldr	r2, [pc, #12]	; (8000c34 <Clock_Init+0x30>)
 8000c26:	f043 0301 	orr.w	r3, r3, #1
 8000c2a:	6193      	str	r3, [r2, #24]
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bc80      	pop	{r7}
 8000c32:	4770      	bx	lr
 8000c34:	40021000 	.word	0x40021000

08000c38 <delay_ms>:

static void delay_ms(uint8_t time_ms)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	71fb      	strb	r3, [r7, #7]
	uint8_t i,j;
	for(i = 0; i < time_ms; i++)
 8000c42:	2300      	movs	r3, #0
 8000c44:	73fb      	strb	r3, [r7, #15]
 8000c46:	e00b      	b.n	8000c60 <delay_ms+0x28>
		for(j = 0; j < 255; j++);
 8000c48:	2300      	movs	r3, #0
 8000c4a:	73bb      	strb	r3, [r7, #14]
 8000c4c:	e002      	b.n	8000c54 <delay_ms+0x1c>
 8000c4e:	7bbb      	ldrb	r3, [r7, #14]
 8000c50:	3301      	adds	r3, #1
 8000c52:	73bb      	strb	r3, [r7, #14]
 8000c54:	7bbb      	ldrb	r3, [r7, #14]
 8000c56:	2bff      	cmp	r3, #255	; 0xff
 8000c58:	d1f9      	bne.n	8000c4e <delay_ms+0x16>
	for(i = 0; i < time_ms; i++)
 8000c5a:	7bfb      	ldrb	r3, [r7, #15]
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	73fb      	strb	r3, [r7, #15]
 8000c60:	7bfa      	ldrb	r2, [r7, #15]
 8000c62:	79fb      	ldrb	r3, [r7, #7]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	d3ef      	bcc.n	8000c48 <delay_ms+0x10>
}
 8000c68:	bf00      	nop
 8000c6a:	3714      	adds	r7, #20
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bc80      	pop	{r7}
 8000c70:	4770      	bx	lr
	...

08000c74 <EXTI9_CallBack>:

void EXTI9_CallBack(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
	IRQ_flag = 1;
 8000c78:	4b05      	ldr	r3, [pc, #20]	; (8000c90 <EXTI9_CallBack+0x1c>)
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	701a      	strb	r2, [r3, #0]
	LCD_Write_String((uint8_t*)"IRQ EXTI9 happened -|_");
 8000c7e:	4805      	ldr	r0, [pc, #20]	; (8000c94 <EXTI9_CallBack+0x20>)
 8000c80:	f7ff fb60 	bl	8000344 <LCD_Write_String>
	delay_ms(255);
 8000c84:	20ff      	movs	r0, #255	; 0xff
 8000c86:	f7ff ffd7 	bl	8000c38 <delay_ms>
}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	2000005c 	.word	0x2000005c
 8000c94:	08000da0 	.word	0x08000da0

08000c98 <main>:

int main(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b086      	sub	sp, #24
 8000c9c:	af00      	add	r7, sp, #0
	Clock_Init();
 8000c9e:	f7ff ffb1 	bl	8000c04 <Clock_Init>
	LCD_Init();
 8000ca2:	f7ff fa83 	bl	80001ac <LCD_Init>

	EXTI_PinConfig_t EXTI_Config;
	// EXTI9 PortB Pin9, Falling edge trigger
	EXTI_Config.EXTI_Pin = EXTI9PB9;
 8000ca6:	4a0e      	ldr	r2, [pc, #56]	; (8000ce0 <main+0x48>)
 8000ca8:	1d3b      	adds	r3, r7, #4
 8000caa:	ca07      	ldmia	r2, {r0, r1, r2}
 8000cac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	EXTI_Config.Trigger_Case = EXTI_TRIGGER_FALLING;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	743b      	strb	r3, [r7, #16]
	EXTI_Config.P_IRQ_CallBack = EXTI9_CallBack;
 8000cb4:	4b0b      	ldr	r3, [pc, #44]	; (8000ce4 <main+0x4c>)
 8000cb6:	617b      	str	r3, [r7, #20]
	EXTI_Config.IRQ_EN = EXTI_IRQ_ENABLE;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	747b      	strb	r3, [r7, #17]

	MCAL_EXTI_GPIO_Init(&EXTI_Config);
 8000cbc:	1d3b      	adds	r3, r7, #4
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f7ff fd6c 	bl	800079c <MCAL_EXTI_GPIO_Init>
	IRQ_flag = 1;
 8000cc4:	4b08      	ldr	r3, [pc, #32]	; (8000ce8 <main+0x50>)
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	701a      	strb	r2, [r3, #0]

	while(1)
	{
		if(IRQ_flag)
 8000cca:	4b07      	ldr	r3, [pc, #28]	; (8000ce8 <main+0x50>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d0fb      	beq.n	8000cca <main+0x32>
		{
			LCD_Clear_Screen();
 8000cd2:	f7ff fb79 	bl	80003c8 <LCD_Clear_Screen>
			IRQ_flag = 0;
 8000cd6:	4b04      	ldr	r3, [pc, #16]	; (8000ce8 <main+0x50>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	701a      	strb	r2, [r3, #0]
		if(IRQ_flag)
 8000cdc:	e7f5      	b.n	8000cca <main+0x32>
 8000cde:	bf00      	nop
 8000ce0:	08000db8 	.word	0x08000db8
 8000ce4:	08000c75 	.word	0x08000c75
 8000ce8:	2000005c 	.word	0x2000005c

08000cec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cec:	480d      	ldr	r0, [pc, #52]	; (8000d24 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cee:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000cf0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cf4:	480c      	ldr	r0, [pc, #48]	; (8000d28 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cf6:	490d      	ldr	r1, [pc, #52]	; (8000d2c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cf8:	4a0d      	ldr	r2, [pc, #52]	; (8000d30 <LoopForever+0xe>)
  movs r3, #0
 8000cfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cfc:	e002      	b.n	8000d04 <LoopCopyDataInit>

08000cfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d02:	3304      	adds	r3, #4

08000d04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d08:	d3f9      	bcc.n	8000cfe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d0a:	4a0a      	ldr	r2, [pc, #40]	; (8000d34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d0c:	4c0a      	ldr	r4, [pc, #40]	; (8000d38 <LoopForever+0x16>)
  movs r3, #0
 8000d0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d10:	e001      	b.n	8000d16 <LoopFillZerobss>

08000d12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d14:	3204      	adds	r2, #4

08000d16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d18:	d3fb      	bcc.n	8000d12 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d1a:	f000 f811 	bl	8000d40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d1e:	f7ff ffbb 	bl	8000c98 <main>

08000d22 <LoopForever>:

LoopForever:
    b LoopForever
 8000d22:	e7fe      	b.n	8000d22 <LoopForever>
  ldr   r0, =_estack
 8000d24:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000d28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d2c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000d30:	08000dcc 	.word	0x08000dcc
  ldr r2, =_sbss
 8000d34:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000d38:	20000060 	.word	0x20000060

08000d3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d3c:	e7fe      	b.n	8000d3c <ADC1_2_IRQHandler>
	...

08000d40 <__libc_init_array>:
 8000d40:	b570      	push	{r4, r5, r6, lr}
 8000d42:	2500      	movs	r5, #0
 8000d44:	4e0c      	ldr	r6, [pc, #48]	; (8000d78 <__libc_init_array+0x38>)
 8000d46:	4c0d      	ldr	r4, [pc, #52]	; (8000d7c <__libc_init_array+0x3c>)
 8000d48:	1ba4      	subs	r4, r4, r6
 8000d4a:	10a4      	asrs	r4, r4, #2
 8000d4c:	42a5      	cmp	r5, r4
 8000d4e:	d109      	bne.n	8000d64 <__libc_init_array+0x24>
 8000d50:	f000 f81a 	bl	8000d88 <_init>
 8000d54:	2500      	movs	r5, #0
 8000d56:	4e0a      	ldr	r6, [pc, #40]	; (8000d80 <__libc_init_array+0x40>)
 8000d58:	4c0a      	ldr	r4, [pc, #40]	; (8000d84 <__libc_init_array+0x44>)
 8000d5a:	1ba4      	subs	r4, r4, r6
 8000d5c:	10a4      	asrs	r4, r4, #2
 8000d5e:	42a5      	cmp	r5, r4
 8000d60:	d105      	bne.n	8000d6e <__libc_init_array+0x2e>
 8000d62:	bd70      	pop	{r4, r5, r6, pc}
 8000d64:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000d68:	4798      	blx	r3
 8000d6a:	3501      	adds	r5, #1
 8000d6c:	e7ee      	b.n	8000d4c <__libc_init_array+0xc>
 8000d6e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000d72:	4798      	blx	r3
 8000d74:	3501      	adds	r5, #1
 8000d76:	e7f2      	b.n	8000d5e <__libc_init_array+0x1e>
 8000d78:	08000dc4 	.word	0x08000dc4
 8000d7c:	08000dc4 	.word	0x08000dc4
 8000d80:	08000dc4 	.word	0x08000dc4
 8000d84:	08000dc8 	.word	0x08000dc8

08000d88 <_init>:
 8000d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d8a:	bf00      	nop
 8000d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d8e:	bc08      	pop	{r3}
 8000d90:	469e      	mov	lr, r3
 8000d92:	4770      	bx	lr

08000d94 <_fini>:
 8000d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d96:	bf00      	nop
 8000d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d9a:	bc08      	pop	{r3}
 8000d9c:	469e      	mov	lr, r3
 8000d9e:	4770      	bx	lr
