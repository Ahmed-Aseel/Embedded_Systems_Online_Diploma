
Unit7_Section3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000009dc  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08000b0c  08000b0c  00010b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000b3c  08000b3c  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08000b3c  08000b3c  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000b3c  08000b3c  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b3c  08000b3c  00010b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000b40  08000b40  00010b40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08000b44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000020  08000b64  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000040  08000b64  00020040  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003183  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000007db  00000000  00000000  000231cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000007dd  00000000  00000000  000239a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000150  00000000  00000000  00024188  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000108  00000000  00000000  000242d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000028e2  00000000  00000000  000243e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00001cfb  00000000  00000000  00026cc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00008d3e  00000000  00000000  000289bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000316fb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000408  00000000  00000000  00031778  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000020 	.word	0x20000020
 800014c:	00000000 	.word	0x00000000
 8000150:	08000af4 	.word	0x08000af4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000024 	.word	0x20000024
 800016c:	08000af4 	.word	0x08000af4

08000170 <Get_CRLH_Position>:
* @param [in]	: PinNumber specifies the port bit. Set by @ref GPIO_PINS_define
* @retval		: Position of the first bit for specific pin
* Note			: None
*/
uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	80fb      	strh	r3, [r7, #6]
	uint8_t position;
	switch(PinNumber)
 800017a:	88fb      	ldrh	r3, [r7, #6]
 800017c:	2b80      	cmp	r3, #128	; 0x80
 800017e:	d049      	beq.n	8000214 <Get_CRLH_Position+0xa4>
 8000180:	2b80      	cmp	r3, #128	; 0x80
 8000182:	dc11      	bgt.n	80001a8 <Get_CRLH_Position+0x38>
 8000184:	2b08      	cmp	r3, #8
 8000186:	d039      	beq.n	80001fc <Get_CRLH_Position+0x8c>
 8000188:	2b08      	cmp	r3, #8
 800018a:	dc06      	bgt.n	800019a <Get_CRLH_Position+0x2a>
 800018c:	2b02      	cmp	r3, #2
 800018e:	d02f      	beq.n	80001f0 <Get_CRLH_Position+0x80>
 8000190:	2b04      	cmp	r3, #4
 8000192:	d030      	beq.n	80001f6 <Get_CRLH_Position+0x86>
 8000194:	2b01      	cmp	r3, #1
 8000196:	d028      	beq.n	80001ea <Get_CRLH_Position+0x7a>
 8000198:	e057      	b.n	800024a <Get_CRLH_Position+0xda>
 800019a:	2b20      	cmp	r3, #32
 800019c:	d034      	beq.n	8000208 <Get_CRLH_Position+0x98>
 800019e:	2b40      	cmp	r3, #64	; 0x40
 80001a0:	d035      	beq.n	800020e <Get_CRLH_Position+0x9e>
 80001a2:	2b10      	cmp	r3, #16
 80001a4:	d02d      	beq.n	8000202 <Get_CRLH_Position+0x92>
 80001a6:	e050      	b.n	800024a <Get_CRLH_Position+0xda>
 80001a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80001ac:	d03e      	beq.n	800022c <Get_CRLH_Position+0xbc>
 80001ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80001b2:	dc09      	bgt.n	80001c8 <Get_CRLH_Position+0x58>
 80001b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80001b8:	d032      	beq.n	8000220 <Get_CRLH_Position+0xb0>
 80001ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80001be:	d032      	beq.n	8000226 <Get_CRLH_Position+0xb6>
 80001c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80001c4:	d029      	beq.n	800021a <Get_CRLH_Position+0xaa>
 80001c6:	e040      	b.n	800024a <Get_CRLH_Position+0xda>
 80001c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80001cc:	d034      	beq.n	8000238 <Get_CRLH_Position+0xc8>
 80001ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80001d2:	dc03      	bgt.n	80001dc <Get_CRLH_Position+0x6c>
 80001d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80001d8:	d02b      	beq.n	8000232 <Get_CRLH_Position+0xc2>
 80001da:	e036      	b.n	800024a <Get_CRLH_Position+0xda>
 80001dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80001e0:	d02d      	beq.n	800023e <Get_CRLH_Position+0xce>
 80001e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80001e6:	d02d      	beq.n	8000244 <Get_CRLH_Position+0xd4>
 80001e8:	e02f      	b.n	800024a <Get_CRLH_Position+0xda>
	{
	case GPIO_PIN_0:
		position = 0;
 80001ea:	2300      	movs	r3, #0
 80001ec:	73fb      	strb	r3, [r7, #15]
		break;
 80001ee:	e02c      	b.n	800024a <Get_CRLH_Position+0xda>

	case GPIO_PIN_1:
		position = 4;
 80001f0:	2304      	movs	r3, #4
 80001f2:	73fb      	strb	r3, [r7, #15]
		break;
 80001f4:	e029      	b.n	800024a <Get_CRLH_Position+0xda>

	case GPIO_PIN_2:
		position = 8;
 80001f6:	2308      	movs	r3, #8
 80001f8:	73fb      	strb	r3, [r7, #15]
		break;
 80001fa:	e026      	b.n	800024a <Get_CRLH_Position+0xda>

	case GPIO_PIN_3:
		position = 12;
 80001fc:	230c      	movs	r3, #12
 80001fe:	73fb      	strb	r3, [r7, #15]
		break;
 8000200:	e023      	b.n	800024a <Get_CRLH_Position+0xda>

	case GPIO_PIN_4:
		position = 16;
 8000202:	2310      	movs	r3, #16
 8000204:	73fb      	strb	r3, [r7, #15]
		break;
 8000206:	e020      	b.n	800024a <Get_CRLH_Position+0xda>

	case GPIO_PIN_5:
		position = 20;
 8000208:	2314      	movs	r3, #20
 800020a:	73fb      	strb	r3, [r7, #15]
		break;
 800020c:	e01d      	b.n	800024a <Get_CRLH_Position+0xda>

	case GPIO_PIN_6:
		position = 24;
 800020e:	2318      	movs	r3, #24
 8000210:	73fb      	strb	r3, [r7, #15]
		break;
 8000212:	e01a      	b.n	800024a <Get_CRLH_Position+0xda>

	case GPIO_PIN_7:
		position = 28;
 8000214:	231c      	movs	r3, #28
 8000216:	73fb      	strb	r3, [r7, #15]
		break;
 8000218:	e017      	b.n	800024a <Get_CRLH_Position+0xda>

	case GPIO_PIN_8:
		position = 0;
 800021a:	2300      	movs	r3, #0
 800021c:	73fb      	strb	r3, [r7, #15]
		break;
 800021e:	e014      	b.n	800024a <Get_CRLH_Position+0xda>

	case GPIO_PIN_9:
		position = 4;
 8000220:	2304      	movs	r3, #4
 8000222:	73fb      	strb	r3, [r7, #15]
		break;
 8000224:	e011      	b.n	800024a <Get_CRLH_Position+0xda>

	case GPIO_PIN_10:
		position = 8;
 8000226:	2308      	movs	r3, #8
 8000228:	73fb      	strb	r3, [r7, #15]
		break;
 800022a:	e00e      	b.n	800024a <Get_CRLH_Position+0xda>

	case GPIO_PIN_11:
		position = 12;
 800022c:	230c      	movs	r3, #12
 800022e:	73fb      	strb	r3, [r7, #15]
		break;
 8000230:	e00b      	b.n	800024a <Get_CRLH_Position+0xda>

	case GPIO_PIN_12:
		position = 16;
 8000232:	2310      	movs	r3, #16
 8000234:	73fb      	strb	r3, [r7, #15]
		break;
 8000236:	e008      	b.n	800024a <Get_CRLH_Position+0xda>

	case GPIO_PIN_13:
		position = 20;
 8000238:	2314      	movs	r3, #20
 800023a:	73fb      	strb	r3, [r7, #15]
		break;
 800023c:	e005      	b.n	800024a <Get_CRLH_Position+0xda>

	case GPIO_PIN_14:
		position = 24;
 800023e:	2318      	movs	r3, #24
 8000240:	73fb      	strb	r3, [r7, #15]
		break;
 8000242:	e002      	b.n	800024a <Get_CRLH_Position+0xda>

	case GPIO_PIN_15:
		position = 28;
 8000244:	231c      	movs	r3, #28
 8000246:	73fb      	strb	r3, [r7, #15]
		break;
 8000248:	bf00      	nop
	}

	return position;
 800024a:	7bfb      	ldrb	r3, [r7, #15]
}
 800024c:	4618      	mov	r0, r3
 800024e:	3714      	adds	r7, #20
 8000250:	46bd      	mov	sp, r7
 8000252:	bc80      	pop	{r7}
 8000254:	4770      	bx	lr

08000256 <MCAL_GPIO_Init>:
* @retval		: None
* Note			: STM32F103C6 MCU has GPIO A:E modules
* 				  but LQFP48 has only GPIO A,B,part of C/D exported as external pins for MCU
*/
void MCAL_GPIO_Init	(GPIO_TypeDef *GPIOx, GPIO_PinConfig_t *PinConfig)
{
 8000256:	b590      	push	{r4, r7, lr}
 8000258:	b085      	sub	sp, #20
 800025a:	af00      	add	r7, sp, #0
 800025c:	6078      	str	r0, [r7, #4]
 800025e:	6039      	str	r1, [r7, #0]
	volatile uint32_t* Configregister = NULL;
 8000260:	2300      	movs	r3, #0
 8000262:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_Config = 0;
 8000264:	2300      	movs	r3, #0
 8000266:	73fb      	strb	r3, [r7, #15]
	//Port configuration register low (GPIOx_CRL) Configure pins 0:7
	//Port configuration register high (GPIOx_CRH) Configure pins 8:15
	Configregister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8)? &GPIOx->CRL : &GPIOx->CRH;
 8000268:	683b      	ldr	r3, [r7, #0]
 800026a:	881b      	ldrh	r3, [r3, #0]
 800026c:	2bff      	cmp	r3, #255	; 0xff
 800026e:	d801      	bhi.n	8000274 <MCAL_GPIO_Init+0x1e>
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	e001      	b.n	8000278 <MCAL_GPIO_Init+0x22>
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	3304      	adds	r3, #4
 8000278:	60bb      	str	r3, [r7, #8]

	//Clear CNFy[1:0] MODEy[1:0]
	*Configregister &= ~(0xF << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 800027a:	683b      	ldr	r3, [r7, #0]
 800027c:	881b      	ldrh	r3, [r3, #0]
 800027e:	4618      	mov	r0, r3
 8000280:	f7ff ff76 	bl	8000170 <Get_CRLH_Position>
 8000284:	4603      	mov	r3, r0
 8000286:	461a      	mov	r2, r3
 8000288:	230f      	movs	r3, #15
 800028a:	4093      	lsls	r3, r2
 800028c:	43da      	mvns	r2, r3
 800028e:	68bb      	ldr	r3, [r7, #8]
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	401a      	ands	r2, r3
 8000294:	68bb      	ldr	r3, [r7, #8]
 8000296:	601a      	str	r2, [r3, #0]

	// if pin is output
	if(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD || PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP ||
 8000298:	683b      	ldr	r3, [r7, #0]
 800029a:	789b      	ldrb	r3, [r3, #2]
 800029c:	2b07      	cmp	r3, #7
 800029e:	d00b      	beq.n	80002b8 <MCAL_GPIO_Init+0x62>
 80002a0:	683b      	ldr	r3, [r7, #0]
 80002a2:	789b      	ldrb	r3, [r3, #2]
 80002a4:	2b06      	cmp	r3, #6
 80002a6:	d007      	beq.n	80002b8 <MCAL_GPIO_Init+0x62>
	   PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD || PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP)
 80002a8:	683b      	ldr	r3, [r7, #0]
 80002aa:	789b      	ldrb	r3, [r3, #2]
	if(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD || PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP ||
 80002ac:	2b05      	cmp	r3, #5
 80002ae:	d003      	beq.n	80002b8 <MCAL_GPIO_Init+0x62>
	   PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD || PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP)
 80002b0:	683b      	ldr	r3, [r7, #0]
 80002b2:	789b      	ldrb	r3, [r3, #2]
 80002b4:	2b04      	cmp	r3, #4
 80002b6:	d10e      	bne.n	80002d6 <MCAL_GPIO_Init+0x80>
	{
		PIN_Config = ( (((PinConfig->GPIO_MODE - 4) << 2) | (PinConfig->GPIO_Output_Speed)) & 0x0F );
 80002b8:	683b      	ldr	r3, [r7, #0]
 80002ba:	789b      	ldrb	r3, [r3, #2]
 80002bc:	3b04      	subs	r3, #4
 80002be:	009b      	lsls	r3, r3, #2
 80002c0:	b25a      	sxtb	r2, r3
 80002c2:	683b      	ldr	r3, [r7, #0]
 80002c4:	78db      	ldrb	r3, [r3, #3]
 80002c6:	b25b      	sxtb	r3, r3
 80002c8:	4313      	orrs	r3, r2
 80002ca:	b25b      	sxtb	r3, r3
 80002cc:	b2db      	uxtb	r3, r3
 80002ce:	f003 030f 	and.w	r3, r3, #15
 80002d2:	73fb      	strb	r3, [r7, #15]
 80002d4:	e02c      	b.n	8000330 <MCAL_GPIO_Init+0xda>
	}
	else
	{
		if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO || PinConfig->GPIO_MODE == GPIO_MODE_ANALOG)
 80002d6:	683b      	ldr	r3, [r7, #0]
 80002d8:	789b      	ldrb	r3, [r3, #2]
 80002da:	2b01      	cmp	r3, #1
 80002dc:	d003      	beq.n	80002e6 <MCAL_GPIO_Init+0x90>
 80002de:	683b      	ldr	r3, [r7, #0]
 80002e0:	789b      	ldrb	r3, [r3, #2]
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d107      	bne.n	80002f6 <MCAL_GPIO_Init+0xa0>
		{
			PIN_Config = ( (PinConfig->GPIO_MODE << 2) & 0x0F );
 80002e6:	683b      	ldr	r3, [r7, #0]
 80002e8:	789b      	ldrb	r3, [r3, #2]
 80002ea:	009b      	lsls	r3, r3, #2
 80002ec:	b2db      	uxtb	r3, r3
 80002ee:	f003 030f 	and.w	r3, r3, #15
 80002f2:	73fb      	strb	r3, [r7, #15]
 80002f4:	e01c      	b.n	8000330 <MCAL_GPIO_Init+0xda>
		}
		else if(PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT) //Consider it as input floating
 80002f6:	683b      	ldr	r3, [r7, #0]
 80002f8:	789b      	ldrb	r3, [r3, #2]
 80002fa:	2b08      	cmp	r3, #8
 80002fc:	d102      	bne.n	8000304 <MCAL_GPIO_Init+0xae>
		{
			PIN_Config = ( (GPIO_MODE_INPUT_FLO << 2) & 0x0F );
 80002fe:	2304      	movs	r3, #4
 8000300:	73fb      	strb	r3, [r7, #15]
 8000302:	e015      	b.n	8000330 <MCAL_GPIO_Init+0xda>
		}
		else //pull-up & pull-down
		{
			PIN_Config = ( (GPIO_MODE_INPUT_PU << 2) & 0x0F );
 8000304:	2308      	movs	r3, #8
 8000306:	73fb      	strb	r3, [r7, #15]
			if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 8000308:	683b      	ldr	r3, [r7, #0]
 800030a:	789b      	ldrb	r3, [r3, #2]
 800030c:	2b02      	cmp	r3, #2
 800030e:	d107      	bne.n	8000320 <MCAL_GPIO_Init+0xca>
			{
				//PxODR register = 1 Input pull-up : Table 20. Port bit configuration table
				GPIOx->ODR |= PinConfig->GPIO_PinNumber;
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	68db      	ldr	r3, [r3, #12]
 8000314:	683a      	ldr	r2, [r7, #0]
 8000316:	8812      	ldrh	r2, [r2, #0]
 8000318:	431a      	orrs	r2, r3
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	60da      	str	r2, [r3, #12]
 800031e:	e007      	b.n	8000330 <MCAL_GPIO_Init+0xda>
			}
			else
			{
				//PxODR register = 0 Input pull-down : Table 20. Port bit configuration table
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	68db      	ldr	r3, [r3, #12]
 8000324:	683a      	ldr	r2, [r7, #0]
 8000326:	8812      	ldrh	r2, [r2, #0]
 8000328:	43d2      	mvns	r2, r2
 800032a:	401a      	ands	r2, r3
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	60da      	str	r2, [r3, #12]
			}
		}
	}
	//Write on CRL or CRH
	*Configregister |= ( PIN_Config << Get_CRLH_Position(PinConfig->GPIO_PinNumber) );
 8000330:	7bfc      	ldrb	r4, [r7, #15]
 8000332:	683b      	ldr	r3, [r7, #0]
 8000334:	881b      	ldrh	r3, [r3, #0]
 8000336:	4618      	mov	r0, r3
 8000338:	f7ff ff1a 	bl	8000170 <Get_CRLH_Position>
 800033c:	4603      	mov	r3, r0
 800033e:	fa04 f203 	lsl.w	r2, r4, r3
 8000342:	68bb      	ldr	r3, [r7, #8]
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	431a      	orrs	r2, r3
 8000348:	68bb      	ldr	r3, [r7, #8]
 800034a:	601a      	str	r2, [r3, #0]
}
 800034c:	bf00      	nop
 800034e:	3714      	adds	r7, #20
 8000350:	46bd      	mov	sp, r7
 8000352:	bd90      	pop	{r4, r7, pc}

08000354 <MCAL_GPIO_ReadPin>:
* @param [in]	: PinNumber specifies the port bit to read. Set by @ref GPIO_PINS_define
* @retval		: The input pin value (2 values based on @ref GPIO_PIN_State)
* Note			: None
*/
uint8_t MCAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t PinNumber)
{
 8000354:	b480      	push	{r7}
 8000356:	b083      	sub	sp, #12
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
 800035c:	460b      	mov	r3, r1
 800035e:	807b      	strh	r3, [r7, #2]
	if(GPIOx->IDR & PinNumber)
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	689a      	ldr	r2, [r3, #8]
 8000364:	887b      	ldrh	r3, [r7, #2]
 8000366:	4013      	ands	r3, r2
 8000368:	2b00      	cmp	r3, #0
 800036a:	d001      	beq.n	8000370 <MCAL_GPIO_ReadPin+0x1c>
	{
		return GPIO_PIN_SET;
 800036c:	2301      	movs	r3, #1
 800036e:	e000      	b.n	8000372 <MCAL_GPIO_ReadPin+0x1e>
	}
	else
	{
		return GPIO_PIN_RESET;
 8000370:	2300      	movs	r3, #0
	}
}
 8000372:	4618      	mov	r0, r3
 8000374:	370c      	adds	r7, #12
 8000376:	46bd      	mov	sp, r7
 8000378:	bc80      	pop	{r7}
 800037a:	4770      	bx	lr

0800037c <MCAL_GPIO_WritePort>:
* @param [in]	: GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral
* @param [in]	: Value: Port value
* @retval		: None
* Note			: None
*/void MCAL_GPIO_WritePort(GPIO_TypeDef *GPIOx, uint16_t Value)
{
 800037c:	b480      	push	{r7}
 800037e:	b083      	sub	sp, #12
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]
 8000384:	460b      	mov	r3, r1
 8000386:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR = (uint32_t)Value;
 8000388:	887a      	ldrh	r2, [r7, #2]
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	60da      	str	r2, [r3, #12]
}
 800038e:	bf00      	nop
 8000390:	370c      	adds	r7, #12
 8000392:	46bd      	mov	sp, r7
 8000394:	bc80      	pop	{r7}
 8000396:	4770      	bx	lr

08000398 <MCAL_GPIO_WritePin>:
* @param [in]	: Value: Pin value
* @retval		: None
* Note			: None
*/
void MCAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t PinNumber, uint8_t Value)
{
 8000398:	b480      	push	{r7}
 800039a:	b083      	sub	sp, #12
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
 80003a0:	460b      	mov	r3, r1
 80003a2:	807b      	strh	r3, [r7, #2]
 80003a4:	4613      	mov	r3, r2
 80003a6:	707b      	strb	r3, [r7, #1]
	if(Value == GPIO_PIN_SET)
 80003a8:	787b      	ldrb	r3, [r7, #1]
 80003aa:	2b01      	cmp	r3, #1
 80003ac:	d103      	bne.n	80003b6 <MCAL_GPIO_WritePin+0x1e>
	{
//		Bits 15:0 BSy: Port x Set bit y (y= 0 .. 15)
//		These bits are write-only and can be accessed in Word mode only.
//		0: No action on the corresponding ODRx bit
//		1: Set the corresponding ODRx bit
		GPIOx->BSRR = (uint32_t)PinNumber;
 80003ae:	887a      	ldrh	r2, [r7, #2]
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	611a      	str	r2, [r3, #16]
//		These bits are write-only and can be accessed in Word mode only.
//		0: No action on the corresponding ODRx bit
//		1: Reset the corresponding ODRx bit
		GPIOx->BRR = (uint32_t)PinNumber;
	}
}
 80003b4:	e002      	b.n	80003bc <MCAL_GPIO_WritePin+0x24>
		GPIOx->BRR = (uint32_t)PinNumber;
 80003b6:	887a      	ldrh	r2, [r7, #2]
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	615a      	str	r2, [r3, #20]
}
 80003bc:	bf00      	nop
 80003be:	370c      	adds	r7, #12
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bc80      	pop	{r7}
 80003c4:	4770      	bx	lr
	...

080003c8 <KEYPAD_Init>:

int Key_padRow[] = {R0, R1, R2, R3}; //rows of the keypad
int Key_padCol[] = {C0, C1, C2, C3}; //columns

void KEYPAD_Init()
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b082      	sub	sp, #8
 80003cc:	af00      	add	r7, sp, #0
	GPIO_PinConfig_t PinCfg;

	PinCfg.GPIO_PinNumber = R0;
 80003ce:	2301      	movs	r3, #1
 80003d0:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80003d2:	2304      	movs	r3, #4
 80003d4:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80003d6:	2301      	movs	r3, #1
 80003d8:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 80003da:	1d3b      	adds	r3, r7, #4
 80003dc:	4619      	mov	r1, r3
 80003de:	482c      	ldr	r0, [pc, #176]	; (8000490 <KEYPAD_Init+0xc8>)
 80003e0:	f7ff ff39 	bl	8000256 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = R1;
 80003e4:	2302      	movs	r3, #2
 80003e6:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80003e8:	2304      	movs	r3, #4
 80003ea:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80003ec:	2301      	movs	r3, #1
 80003ee:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 80003f0:	1d3b      	adds	r3, r7, #4
 80003f2:	4619      	mov	r1, r3
 80003f4:	4826      	ldr	r0, [pc, #152]	; (8000490 <KEYPAD_Init+0xc8>)
 80003f6:	f7ff ff2e 	bl	8000256 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = R2;
 80003fa:	2308      	movs	r3, #8
 80003fc:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80003fe:	2304      	movs	r3, #4
 8000400:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000402:	2301      	movs	r3, #1
 8000404:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 8000406:	1d3b      	adds	r3, r7, #4
 8000408:	4619      	mov	r1, r3
 800040a:	4821      	ldr	r0, [pc, #132]	; (8000490 <KEYPAD_Init+0xc8>)
 800040c:	f7ff ff23 	bl	8000256 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = R3;
 8000410:	2310      	movs	r3, #16
 8000412:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000414:	2304      	movs	r3, #4
 8000416:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000418:	2301      	movs	r3, #1
 800041a:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 800041c:	1d3b      	adds	r3, r7, #4
 800041e:	4619      	mov	r1, r3
 8000420:	481b      	ldr	r0, [pc, #108]	; (8000490 <KEYPAD_Init+0xc8>)
 8000422:	f7ff ff18 	bl	8000256 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = C0;
 8000426:	2320      	movs	r3, #32
 8000428:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800042a:	2304      	movs	r3, #4
 800042c:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800042e:	2301      	movs	r3, #1
 8000430:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 8000432:	1d3b      	adds	r3, r7, #4
 8000434:	4619      	mov	r1, r3
 8000436:	4816      	ldr	r0, [pc, #88]	; (8000490 <KEYPAD_Init+0xc8>)
 8000438:	f7ff ff0d 	bl	8000256 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = C1;
 800043c:	2340      	movs	r3, #64	; 0x40
 800043e:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000440:	2304      	movs	r3, #4
 8000442:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000444:	2301      	movs	r3, #1
 8000446:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 8000448:	1d3b      	adds	r3, r7, #4
 800044a:	4619      	mov	r1, r3
 800044c:	4810      	ldr	r0, [pc, #64]	; (8000490 <KEYPAD_Init+0xc8>)
 800044e:	f7ff ff02 	bl	8000256 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = C2;
 8000452:	2380      	movs	r3, #128	; 0x80
 8000454:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000456:	2304      	movs	r3, #4
 8000458:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800045a:	2301      	movs	r3, #1
 800045c:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 800045e:	1d3b      	adds	r3, r7, #4
 8000460:	4619      	mov	r1, r3
 8000462:	480b      	ldr	r0, [pc, #44]	; (8000490 <KEYPAD_Init+0xc8>)
 8000464:	f7ff fef7 	bl	8000256 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = C3;
 8000468:	f44f 7380 	mov.w	r3, #256	; 0x100
 800046c:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800046e:	2304      	movs	r3, #4
 8000470:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000472:	2301      	movs	r3, #1
 8000474:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 8000476:	1d3b      	adds	r3, r7, #4
 8000478:	4619      	mov	r1, r3
 800047a:	4805      	ldr	r0, [pc, #20]	; (8000490 <KEYPAD_Init+0xc8>)
 800047c:	f7ff feeb 	bl	8000256 <MCAL_GPIO_Init>

	MCAL_GPIO_WritePort(KEYPAD_PORT, 0xFF);
 8000480:	21ff      	movs	r1, #255	; 0xff
 8000482:	4803      	ldr	r0, [pc, #12]	; (8000490 <KEYPAD_Init+0xc8>)
 8000484:	f7ff ff7a 	bl	800037c <MCAL_GPIO_WritePort>
}
 8000488:	bf00      	nop
 800048a:	3708      	adds	r7, #8
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}
 8000490:	40010c00 	.word	0x40010c00

08000494 <KEYPAD_GetKey>:

uint8_t KEYPAD_GetKey()
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (i = 0; i < 4; i++)
 800049a:	2300      	movs	r3, #0
 800049c:	71fb      	strb	r3, [r7, #7]
 800049e:	e0b4      	b.n	800060a <KEYPAD_GetKey+0x176>
	{
		MCAL_GPIO_WritePin(KEYPAD_PORT, Key_padCol[0], GPIO_PIN_SET);
 80004a0:	4b5e      	ldr	r3, [pc, #376]	; (800061c <KEYPAD_GetKey+0x188>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	b29b      	uxth	r3, r3
 80004a6:	2201      	movs	r2, #1
 80004a8:	4619      	mov	r1, r3
 80004aa:	485d      	ldr	r0, [pc, #372]	; (8000620 <KEYPAD_GetKey+0x18c>)
 80004ac:	f7ff ff74 	bl	8000398 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, Key_padCol[1], GPIO_PIN_SET);
 80004b0:	4b5a      	ldr	r3, [pc, #360]	; (800061c <KEYPAD_GetKey+0x188>)
 80004b2:	685b      	ldr	r3, [r3, #4]
 80004b4:	b29b      	uxth	r3, r3
 80004b6:	2201      	movs	r2, #1
 80004b8:	4619      	mov	r1, r3
 80004ba:	4859      	ldr	r0, [pc, #356]	; (8000620 <KEYPAD_GetKey+0x18c>)
 80004bc:	f7ff ff6c 	bl	8000398 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, Key_padCol[2], GPIO_PIN_SET);
 80004c0:	4b56      	ldr	r3, [pc, #344]	; (800061c <KEYPAD_GetKey+0x188>)
 80004c2:	689b      	ldr	r3, [r3, #8]
 80004c4:	b29b      	uxth	r3, r3
 80004c6:	2201      	movs	r2, #1
 80004c8:	4619      	mov	r1, r3
 80004ca:	4855      	ldr	r0, [pc, #340]	; (8000620 <KEYPAD_GetKey+0x18c>)
 80004cc:	f7ff ff64 	bl	8000398 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, Key_padCol[3], GPIO_PIN_SET);
 80004d0:	4b52      	ldr	r3, [pc, #328]	; (800061c <KEYPAD_GetKey+0x188>)
 80004d2:	68db      	ldr	r3, [r3, #12]
 80004d4:	b29b      	uxth	r3, r3
 80004d6:	2201      	movs	r2, #1
 80004d8:	4619      	mov	r1, r3
 80004da:	4851      	ldr	r0, [pc, #324]	; (8000620 <KEYPAD_GetKey+0x18c>)
 80004dc:	f7ff ff5c 	bl	8000398 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, Key_padCol[i], GPIO_PIN_RESET);
 80004e0:	79fb      	ldrb	r3, [r7, #7]
 80004e2:	4a4e      	ldr	r2, [pc, #312]	; (800061c <KEYPAD_GetKey+0x188>)
 80004e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004e8:	b29b      	uxth	r3, r3
 80004ea:	2200      	movs	r2, #0
 80004ec:	4619      	mov	r1, r3
 80004ee:	484c      	ldr	r0, [pc, #304]	; (8000620 <KEYPAD_GetKey+0x18c>)
 80004f0:	f7ff ff52 	bl	8000398 <MCAL_GPIO_WritePin>
		for(j = 0; j < 4; j++)
 80004f4:	2300      	movs	r3, #0
 80004f6:	71bb      	strb	r3, [r7, #6]
 80004f8:	e080      	b.n	80005fc <KEYPAD_GetKey+0x168>
		{
			if (MCAL_GPIO_ReadPin(KEYPAD_PORT, Key_padRow[j]) == 0)
 80004fa:	79bb      	ldrb	r3, [r7, #6]
 80004fc:	4a49      	ldr	r2, [pc, #292]	; (8000624 <KEYPAD_GetKey+0x190>)
 80004fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000502:	b29b      	uxth	r3, r3
 8000504:	4619      	mov	r1, r3
 8000506:	4846      	ldr	r0, [pc, #280]	; (8000620 <KEYPAD_GetKey+0x18c>)
 8000508:	f7ff ff24 	bl	8000354 <MCAL_GPIO_ReadPin>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d171      	bne.n	80005f6 <KEYPAD_GetKey+0x162>
			{
				while(MCAL_GPIO_ReadPin(KEYPAD_PORT, Key_padRow[j]) == 0);
 8000512:	bf00      	nop
 8000514:	79bb      	ldrb	r3, [r7, #6]
 8000516:	4a43      	ldr	r2, [pc, #268]	; (8000624 <KEYPAD_GetKey+0x190>)
 8000518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800051c:	b29b      	uxth	r3, r3
 800051e:	4619      	mov	r1, r3
 8000520:	483f      	ldr	r0, [pc, #252]	; (8000620 <KEYPAD_GetKey+0x18c>)
 8000522:	f7ff ff17 	bl	8000354 <MCAL_GPIO_ReadPin>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d0f3      	beq.n	8000514 <KEYPAD_GetKey+0x80>
				switch(i)
 800052c:	79fb      	ldrb	r3, [r7, #7]
 800052e:	2b03      	cmp	r3, #3
 8000530:	d861      	bhi.n	80005f6 <KEYPAD_GetKey+0x162>
 8000532:	a201      	add	r2, pc, #4	; (adr r2, 8000538 <KEYPAD_GetKey+0xa4>)
 8000534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000538:	08000549 	.word	0x08000549
 800053c:	08000571 	.word	0x08000571
 8000540:	08000599 	.word	0x08000599
 8000544:	080005c1 	.word	0x080005c1
				{
				case 0:
					if 		(j == 0) return '7';
 8000548:	79bb      	ldrb	r3, [r7, #6]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d101      	bne.n	8000552 <KEYPAD_GetKey+0xbe>
 800054e:	2337      	movs	r3, #55	; 0x37
 8000550:	e060      	b.n	8000614 <KEYPAD_GetKey+0x180>
					else if (j == 1) return '4';
 8000552:	79bb      	ldrb	r3, [r7, #6]
 8000554:	2b01      	cmp	r3, #1
 8000556:	d101      	bne.n	800055c <KEYPAD_GetKey+0xc8>
 8000558:	2334      	movs	r3, #52	; 0x34
 800055a:	e05b      	b.n	8000614 <KEYPAD_GetKey+0x180>
					else if (j == 2) return '1';
 800055c:	79bb      	ldrb	r3, [r7, #6]
 800055e:	2b02      	cmp	r3, #2
 8000560:	d101      	bne.n	8000566 <KEYPAD_GetKey+0xd2>
 8000562:	2331      	movs	r3, #49	; 0x31
 8000564:	e056      	b.n	8000614 <KEYPAD_GetKey+0x180>
					else if (j == 3) return 'C';
 8000566:	79bb      	ldrb	r3, [r7, #6]
 8000568:	2b03      	cmp	r3, #3
 800056a:	d13d      	bne.n	80005e8 <KEYPAD_GetKey+0x154>
 800056c:	2343      	movs	r3, #67	; 0x43
 800056e:	e051      	b.n	8000614 <KEYPAD_GetKey+0x180>
					break;

				case 1:
					if 		(j == 0) return '8';
 8000570:	79bb      	ldrb	r3, [r7, #6]
 8000572:	2b00      	cmp	r3, #0
 8000574:	d101      	bne.n	800057a <KEYPAD_GetKey+0xe6>
 8000576:	2338      	movs	r3, #56	; 0x38
 8000578:	e04c      	b.n	8000614 <KEYPAD_GetKey+0x180>
					else if (j == 1) return '5';
 800057a:	79bb      	ldrb	r3, [r7, #6]
 800057c:	2b01      	cmp	r3, #1
 800057e:	d101      	bne.n	8000584 <KEYPAD_GetKey+0xf0>
 8000580:	2335      	movs	r3, #53	; 0x35
 8000582:	e047      	b.n	8000614 <KEYPAD_GetKey+0x180>
					else if (j == 2) return '2';
 8000584:	79bb      	ldrb	r3, [r7, #6]
 8000586:	2b02      	cmp	r3, #2
 8000588:	d101      	bne.n	800058e <KEYPAD_GetKey+0xfa>
 800058a:	2332      	movs	r3, #50	; 0x32
 800058c:	e042      	b.n	8000614 <KEYPAD_GetKey+0x180>
					else if (j == 3) return '0';
 800058e:	79bb      	ldrb	r3, [r7, #6]
 8000590:	2b03      	cmp	r3, #3
 8000592:	d12b      	bne.n	80005ec <KEYPAD_GetKey+0x158>
 8000594:	2330      	movs	r3, #48	; 0x30
 8000596:	e03d      	b.n	8000614 <KEYPAD_GetKey+0x180>
					break;

				case 2:
					if 		(j == 0) return '9';
 8000598:	79bb      	ldrb	r3, [r7, #6]
 800059a:	2b00      	cmp	r3, #0
 800059c:	d101      	bne.n	80005a2 <KEYPAD_GetKey+0x10e>
 800059e:	2339      	movs	r3, #57	; 0x39
 80005a0:	e038      	b.n	8000614 <KEYPAD_GetKey+0x180>
					else if (j == 1) return '6';
 80005a2:	79bb      	ldrb	r3, [r7, #6]
 80005a4:	2b01      	cmp	r3, #1
 80005a6:	d101      	bne.n	80005ac <KEYPAD_GetKey+0x118>
 80005a8:	2336      	movs	r3, #54	; 0x36
 80005aa:	e033      	b.n	8000614 <KEYPAD_GetKey+0x180>
					else if (j == 2) return '3';
 80005ac:	79bb      	ldrb	r3, [r7, #6]
 80005ae:	2b02      	cmp	r3, #2
 80005b0:	d101      	bne.n	80005b6 <KEYPAD_GetKey+0x122>
 80005b2:	2333      	movs	r3, #51	; 0x33
 80005b4:	e02e      	b.n	8000614 <KEYPAD_GetKey+0x180>
					else if (j == 3) return '=';
 80005b6:	79bb      	ldrb	r3, [r7, #6]
 80005b8:	2b03      	cmp	r3, #3
 80005ba:	d119      	bne.n	80005f0 <KEYPAD_GetKey+0x15c>
 80005bc:	233d      	movs	r3, #61	; 0x3d
 80005be:	e029      	b.n	8000614 <KEYPAD_GetKey+0x180>
					break;

				case 3:
					if 		(j == 0) return '/';
 80005c0:	79bb      	ldrb	r3, [r7, #6]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d101      	bne.n	80005ca <KEYPAD_GetKey+0x136>
 80005c6:	232f      	movs	r3, #47	; 0x2f
 80005c8:	e024      	b.n	8000614 <KEYPAD_GetKey+0x180>
					else if (j == 1) return '*';
 80005ca:	79bb      	ldrb	r3, [r7, #6]
 80005cc:	2b01      	cmp	r3, #1
 80005ce:	d101      	bne.n	80005d4 <KEYPAD_GetKey+0x140>
 80005d0:	232a      	movs	r3, #42	; 0x2a
 80005d2:	e01f      	b.n	8000614 <KEYPAD_GetKey+0x180>
					else if (j == 2) return '-';
 80005d4:	79bb      	ldrb	r3, [r7, #6]
 80005d6:	2b02      	cmp	r3, #2
 80005d8:	d101      	bne.n	80005de <KEYPAD_GetKey+0x14a>
 80005da:	232d      	movs	r3, #45	; 0x2d
 80005dc:	e01a      	b.n	8000614 <KEYPAD_GetKey+0x180>
					else if (j == 3) return '+';
 80005de:	79bb      	ldrb	r3, [r7, #6]
 80005e0:	2b03      	cmp	r3, #3
 80005e2:	d107      	bne.n	80005f4 <KEYPAD_GetKey+0x160>
 80005e4:	232b      	movs	r3, #43	; 0x2b
 80005e6:	e015      	b.n	8000614 <KEYPAD_GetKey+0x180>
					break;
 80005e8:	bf00      	nop
 80005ea:	e004      	b.n	80005f6 <KEYPAD_GetKey+0x162>
					break;
 80005ec:	bf00      	nop
 80005ee:	e002      	b.n	80005f6 <KEYPAD_GetKey+0x162>
					break;
 80005f0:	bf00      	nop
 80005f2:	e000      	b.n	80005f6 <KEYPAD_GetKey+0x162>
					break;
 80005f4:	bf00      	nop
		for(j = 0; j < 4; j++)
 80005f6:	79bb      	ldrb	r3, [r7, #6]
 80005f8:	3301      	adds	r3, #1
 80005fa:	71bb      	strb	r3, [r7, #6]
 80005fc:	79bb      	ldrb	r3, [r7, #6]
 80005fe:	2b03      	cmp	r3, #3
 8000600:	f67f af7b 	bls.w	80004fa <KEYPAD_GetKey+0x66>
	for (i = 0; i < 4; i++)
 8000604:	79fb      	ldrb	r3, [r7, #7]
 8000606:	3301      	adds	r3, #1
 8000608:	71fb      	strb	r3, [r7, #7]
 800060a:	79fb      	ldrb	r3, [r7, #7]
 800060c:	2b03      	cmp	r3, #3
 800060e:	f67f af47 	bls.w	80004a0 <KEYPAD_GetKey+0xc>
				}
			}
		}
	}

	return 'A';
 8000612:	2341      	movs	r3, #65	; 0x41
}
 8000614:	4618      	mov	r0, r3
 8000616:	3708      	adds	r7, #8
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	20000010 	.word	0x20000010
 8000620:	40010c00 	.word	0x40010c00
 8000624:	20000000 	.word	0x20000000

08000628 <delay_ms>:
#include "LCD.h"

static GPIO_PinConfig_t *PinCfg = NULL;

static void delay_ms(uint8_t time_ms)
{
 8000628:	b480      	push	{r7}
 800062a:	b085      	sub	sp, #20
 800062c:	af00      	add	r7, sp, #0
 800062e:	4603      	mov	r3, r0
 8000630:	71fb      	strb	r3, [r7, #7]
	uint8_t i,j;
	for(i = 0; i < time_ms; i++)
 8000632:	2300      	movs	r3, #0
 8000634:	73fb      	strb	r3, [r7, #15]
 8000636:	e00b      	b.n	8000650 <delay_ms+0x28>
		for(j = 0; j < 255; j++);
 8000638:	2300      	movs	r3, #0
 800063a:	73bb      	strb	r3, [r7, #14]
 800063c:	e002      	b.n	8000644 <delay_ms+0x1c>
 800063e:	7bbb      	ldrb	r3, [r7, #14]
 8000640:	3301      	adds	r3, #1
 8000642:	73bb      	strb	r3, [r7, #14]
 8000644:	7bbb      	ldrb	r3, [r7, #14]
 8000646:	2bff      	cmp	r3, #255	; 0xff
 8000648:	d1f9      	bne.n	800063e <delay_ms+0x16>
	for(i = 0; i < time_ms; i++)
 800064a:	7bfb      	ldrb	r3, [r7, #15]
 800064c:	3301      	adds	r3, #1
 800064e:	73fb      	strb	r3, [r7, #15]
 8000650:	7bfa      	ldrb	r2, [r7, #15]
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	429a      	cmp	r2, r3
 8000656:	d3ef      	bcc.n	8000638 <delay_ms+0x10>
}
 8000658:	bf00      	nop
 800065a:	3714      	adds	r7, #20
 800065c:	46bd      	mov	sp, r7
 800065e:	bc80      	pop	{r7}
 8000660:	4770      	bx	lr
	...

08000664 <LCD_Init>:

void LCD_Init()
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
	uint8_t i;
	delay_ms(20);
 800066a:	2014      	movs	r0, #20
 800066c:	f7ff ffdc 	bl	8000628 <delay_ms>

	// Pin8 Port A: 00 General purpose output push-pull
	// Pin8 Port A: 01 Output mode, max speed 10 MHz.
	PinCfg->GPIO_PinNumber = RS;
 8000670:	4b3e      	ldr	r3, [pc, #248]	; (800076c <LCD_Init+0x108>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000678:	801a      	strh	r2, [r3, #0]
	PinCfg->GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800067a:	4b3c      	ldr	r3, [pc, #240]	; (800076c <LCD_Init+0x108>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	2204      	movs	r2, #4
 8000680:	709a      	strb	r2, [r3, #2]
	PinCfg->GPIO_Output_Speed = GPIO_SPEED_10M;
 8000682:	4b3a      	ldr	r3, [pc, #232]	; (800076c <LCD_Init+0x108>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	2201      	movs	r2, #1
 8000688:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOA, PinCfg);
 800068a:	4b38      	ldr	r3, [pc, #224]	; (800076c <LCD_Init+0x108>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4619      	mov	r1, r3
 8000690:	4837      	ldr	r0, [pc, #220]	; (8000770 <LCD_Init+0x10c>)
 8000692:	f7ff fde0 	bl	8000256 <MCAL_GPIO_Init>

	// Pin9 Port A: 00 General purpose output push-pull
	// Pin* Port A: 01 Output mode, max speed 10 MHz.
	PinCfg->GPIO_PinNumber = RW;
 8000696:	4b35      	ldr	r3, [pc, #212]	; (800076c <LCD_Init+0x108>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800069e:	801a      	strh	r2, [r3, #0]
	PinCfg->GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80006a0:	4b32      	ldr	r3, [pc, #200]	; (800076c <LCD_Init+0x108>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	2204      	movs	r2, #4
 80006a6:	709a      	strb	r2, [r3, #2]
	PinCfg->GPIO_Output_Speed = GPIO_SPEED_10M;
 80006a8:	4b30      	ldr	r3, [pc, #192]	; (800076c <LCD_Init+0x108>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	2201      	movs	r2, #1
 80006ae:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOA, PinCfg);
 80006b0:	4b2e      	ldr	r3, [pc, #184]	; (800076c <LCD_Init+0x108>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4619      	mov	r1, r3
 80006b6:	482e      	ldr	r0, [pc, #184]	; (8000770 <LCD_Init+0x10c>)
 80006b8:	f7ff fdcd 	bl	8000256 <MCAL_GPIO_Init>

	// Pin10 Port A: 00 General purpose output push-pull
	// Pin10 Port A: 01 Output mode, max speed 10 MHz.
	PinCfg->GPIO_PinNumber = EN;
 80006bc:	4b2b      	ldr	r3, [pc, #172]	; (800076c <LCD_Init+0x108>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006c4:	801a      	strh	r2, [r3, #0]
	PinCfg->GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80006c6:	4b29      	ldr	r3, [pc, #164]	; (800076c <LCD_Init+0x108>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	2204      	movs	r2, #4
 80006cc:	709a      	strb	r2, [r3, #2]
	PinCfg->GPIO_Output_Speed = GPIO_SPEED_10M;
 80006ce:	4b27      	ldr	r3, [pc, #156]	; (800076c <LCD_Init+0x108>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	2201      	movs	r2, #1
 80006d4:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOA, PinCfg);
 80006d6:	4b25      	ldr	r3, [pc, #148]	; (800076c <LCD_Init+0x108>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	4619      	mov	r1, r3
 80006dc:	4824      	ldr	r0, [pc, #144]	; (8000770 <LCD_Init+0x10c>)
 80006de:	f7ff fdba 	bl	8000256 <MCAL_GPIO_Init>

	// RESET RS, RW, EN
	MCAL_GPIO_WritePin(LCD_CONTROL_PORT, RS, GPIO_PIN_RESET);
 80006e2:	2200      	movs	r2, #0
 80006e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006e8:	4821      	ldr	r0, [pc, #132]	; (8000770 <LCD_Init+0x10c>)
 80006ea:	f7ff fe55 	bl	8000398 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CONTROL_PORT, RW, GPIO_PIN_RESET);
 80006ee:	2200      	movs	r2, #0
 80006f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006f4:	481e      	ldr	r0, [pc, #120]	; (8000770 <LCD_Init+0x10c>)
 80006f6:	f7ff fe4f 	bl	8000398 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CONTROL_PORT, EN, GPIO_PIN_RESET);
 80006fa:	2200      	movs	r2, #0
 80006fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000700:	481b      	ldr	r0, [pc, #108]	; (8000770 <LCD_Init+0x10c>)
 8000702:	f7ff fe49 	bl	8000398 <MCAL_GPIO_WritePin>

	// SET PINS 0:7 AS OUTPUT For LCD Data
	for(i = 0; i < 8; i++)
 8000706:	2300      	movs	r3, #0
 8000708:	71fb      	strb	r3, [r7, #7]
 800070a:	e017      	b.n	800073c <LCD_Init+0xd8>
	{
		// Pin(i) LCD_DATA_PORT: 00 General purpose output push-pull
		// Pin(i) LCD_DATA_PORT: 01 Output mode, max speed 10 MHz.
		PinCfg->GPIO_PinNumber = (uint16_t)(1<<i);
 800070c:	79fb      	ldrb	r3, [r7, #7]
 800070e:	2201      	movs	r2, #1
 8000710:	409a      	lsls	r2, r3
 8000712:	4b16      	ldr	r3, [pc, #88]	; (800076c <LCD_Init+0x108>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	b292      	uxth	r2, r2
 8000718:	801a      	strh	r2, [r3, #0]
		PinCfg->GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800071a:	4b14      	ldr	r3, [pc, #80]	; (800076c <LCD_Init+0x108>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	2204      	movs	r2, #4
 8000720:	709a      	strb	r2, [r3, #2]
		PinCfg->GPIO_Output_Speed = GPIO_SPEED_10M;
 8000722:	4b12      	ldr	r3, [pc, #72]	; (800076c <LCD_Init+0x108>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	2201      	movs	r2, #1
 8000728:	70da      	strb	r2, [r3, #3]
		MCAL_GPIO_Init(LCD_DATA_PORT, PinCfg);
 800072a:	4b10      	ldr	r3, [pc, #64]	; (800076c <LCD_Init+0x108>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4619      	mov	r1, r3
 8000730:	480f      	ldr	r0, [pc, #60]	; (8000770 <LCD_Init+0x10c>)
 8000732:	f7ff fd90 	bl	8000256 <MCAL_GPIO_Init>
	for(i = 0; i < 8; i++)
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	3301      	adds	r3, #1
 800073a:	71fb      	strb	r3, [r7, #7]
 800073c:	79fb      	ldrb	r3, [r7, #7]
 800073e:	2b07      	cmp	r3, #7
 8000740:	d9e4      	bls.n	800070c <LCD_Init+0xa8>
	}

	delay_ms(15);
 8000742:	200f      	movs	r0, #15
 8000744:	f7ff ff70 	bl	8000628 <delay_ms>
	LCD_Clear_Screen();
 8000748:	f000 f89a 	bl	8000880 <LCD_Clear_Screen>

	#ifdef EIGHT_BIT_MODE
	LCD_Write_Command(LCD_FUNCTION_8BIT_2LINES);
 800074c:	2038      	movs	r0, #56	; 0x38
 800074e:	f000 f811 	bl	8000774 <LCD_Write_Command>
	#ifdef FOUR_BIT_MODE
	LCD_Write_Command(0x02);
	LCD_Write_Command(LCD_FUNCTION_4BIT_2LINES);
	#endif

	LCD_Write_Command(LCD_ENTRY_MODE);
 8000752:	2006      	movs	r0, #6
 8000754:	f000 f80e 	bl	8000774 <LCD_Write_Command>
	LCD_Write_Command(LCD_BEGIN_AT_FIRST_ROW);
 8000758:	2080      	movs	r0, #128	; 0x80
 800075a:	f000 f80b 	bl	8000774 <LCD_Write_Command>
	LCD_Write_Command(LCD_DISP_ON_CURSOR_BLINK);
 800075e:	200f      	movs	r0, #15
 8000760:	f000 f808 	bl	8000774 <LCD_Write_Command>
}
 8000764:	bf00      	nop
 8000766:	3708      	adds	r7, #8
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	2000003c 	.word	0x2000003c
 8000770:	40010800 	.word	0x40010800

08000774 <LCD_Write_Command>:

void LCD_Write_Command(uint8_t command)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	71fb      	strb	r3, [r7, #7]
	#ifdef EIGHT_BIT_MODE
		MCAL_GPIO_WritePort(LCD_DATA_PORT, command);
 800077e:	79fb      	ldrb	r3, [r7, #7]
 8000780:	b29b      	uxth	r3, r3
 8000782:	4619      	mov	r1, r3
 8000784:	480b      	ldr	r0, [pc, #44]	; (80007b4 <LCD_Write_Command+0x40>)
 8000786:	f7ff fdf9 	bl	800037c <MCAL_GPIO_WritePort>
		MCAL_GPIO_WritePin(LCD_CONTROL_PORT, RS, GPIO_PIN_RESET);
 800078a:	2200      	movs	r2, #0
 800078c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000790:	4808      	ldr	r0, [pc, #32]	; (80007b4 <LCD_Write_Command+0x40>)
 8000792:	f7ff fe01 	bl	8000398 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(LCD_CONTROL_PORT, RW, GPIO_PIN_RESET);
 8000796:	2200      	movs	r2, #0
 8000798:	f44f 7100 	mov.w	r1, #512	; 0x200
 800079c:	4805      	ldr	r0, [pc, #20]	; (80007b4 <LCD_Write_Command+0x40>)
 800079e:	f7ff fdfb 	bl	8000398 <MCAL_GPIO_WritePin>
		delay_ms(1);
 80007a2:	2001      	movs	r0, #1
 80007a4:	f7ff ff40 	bl	8000628 <delay_ms>
		LCD_Kick();
 80007a8:	f000 f854 	bl	8000854 <LCD_Kick>
		LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (command << DATA_SHIFT);
		MCAL_GPIO_WritePin(LCD_CONTROL_PORT, RS, GPIO_PIN_RESET);
		MCAL_GPIO_WritePin(LCD_CONTROL_PORT, RW, GPIO_PIN_RESET);
		LCD_Kick();
	#endif
}
 80007ac:	bf00      	nop
 80007ae:	3708      	adds	r7, #8
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40010800 	.word	0x40010800

080007b8 <LCD_Write_Char>:

void LCD_Write_Char(uint8_t character)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	71fb      	strb	r3, [r7, #7]
	#ifdef EIGHT_BIT_MODE
		MCAL_GPIO_WritePort(LCD_DATA_PORT, character);
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	b29b      	uxth	r3, r3
 80007c6:	4619      	mov	r1, r3
 80007c8:	480b      	ldr	r0, [pc, #44]	; (80007f8 <LCD_Write_Char+0x40>)
 80007ca:	f7ff fdd7 	bl	800037c <MCAL_GPIO_WritePort>
		MCAL_GPIO_WritePin(LCD_CONTROL_PORT, RS, GPIO_PIN_SET);
 80007ce:	2201      	movs	r2, #1
 80007d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007d4:	4808      	ldr	r0, [pc, #32]	; (80007f8 <LCD_Write_Char+0x40>)
 80007d6:	f7ff fddf 	bl	8000398 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(LCD_CONTROL_PORT, RW, GPIO_PIN_RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007e0:	4805      	ldr	r0, [pc, #20]	; (80007f8 <LCD_Write_Char+0x40>)
 80007e2:	f7ff fdd9 	bl	8000398 <MCAL_GPIO_WritePin>
		delay_ms(1);
 80007e6:	2001      	movs	r0, #1
 80007e8:	f7ff ff1e 	bl	8000628 <delay_ms>
		LCD_Kick();
 80007ec:	f000 f832 	bl	8000854 <LCD_Kick>
		LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (character << DATA_SHIFT);
		MCAL_GPIO_WritePin(LCD_CONTROL_PORT, RS, GPIO_PIN_SET);
		MCAL_GPIO_WritePin(LCD_CONTROL_PORT, RW, GPIO_PIN_RESET);
		LCD_Kick ();
	#endif
}
 80007f0:	bf00      	nop
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40010800 	.word	0x40010800

080007fc <LCD_Write_String>:

void LCD_Write_String(uint8_t* string)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
	uint8_t count = 0;
 8000804:	2300      	movs	r3, #0
 8000806:	73fb      	strb	r3, [r7, #15]
	while (*string)
 8000808:	e01c      	b.n	8000844 <LCD_Write_String+0x48>
	{
		count++;
 800080a:	7bfb      	ldrb	r3, [r7, #15]
 800080c:	3301      	adds	r3, #1
 800080e:	73fb      	strb	r3, [r7, #15]
		LCD_Write_Char(*string++);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	1c5a      	adds	r2, r3, #1
 8000814:	607a      	str	r2, [r7, #4]
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	4618      	mov	r0, r3
 800081a:	f7ff ffcd 	bl	80007b8 <LCD_Write_Char>
		if (count == 16)
 800081e:	7bfb      	ldrb	r3, [r7, #15]
 8000820:	2b10      	cmp	r3, #16
 8000822:	d104      	bne.n	800082e <LCD_Write_String+0x32>
		{
			LCD_GOTO_XY(2,0);
 8000824:	2100      	movs	r1, #0
 8000826:	2002      	movs	r0, #2
 8000828:	f000 f831 	bl	800088e <LCD_GOTO_XY>
 800082c:	e00a      	b.n	8000844 <LCD_Write_String+0x48>
		}
		else if (count == 32)
 800082e:	7bfb      	ldrb	r3, [r7, #15]
 8000830:	2b20      	cmp	r3, #32
 8000832:	d107      	bne.n	8000844 <LCD_Write_String+0x48>
		{
			LCD_Clear_Screen();
 8000834:	f000 f824 	bl	8000880 <LCD_Clear_Screen>
			LCD_GOTO_XY(1,0);
 8000838:	2100      	movs	r1, #0
 800083a:	2001      	movs	r0, #1
 800083c:	f000 f827 	bl	800088e <LCD_GOTO_XY>
			count = 0;
 8000840:	2300      	movs	r3, #0
 8000842:	73fb      	strb	r3, [r7, #15]
	while (*string)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d1de      	bne.n	800080a <LCD_Write_String+0xe>
		}
	}
}
 800084c:	bf00      	nop
 800084e:	3710      	adds	r7, #16
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}

08000854 <LCD_Kick>:

	sprintf((char*)str, "%s%d.%4d", tmpSign, tmpInt1, tmpInt2);
	LCD_Write_String(str);
}

void LCD_Kick(){
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
	MCAL_GPIO_WritePin(LCD_CONTROL_PORT, EN, GPIO_PIN_SET);
 8000858:	2201      	movs	r2, #1
 800085a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800085e:	4807      	ldr	r0, [pc, #28]	; (800087c <LCD_Kick+0x28>)
 8000860:	f7ff fd9a 	bl	8000398 <MCAL_GPIO_WritePin>
	delay_ms(5);
 8000864:	2005      	movs	r0, #5
 8000866:	f7ff fedf 	bl	8000628 <delay_ms>
	MCAL_GPIO_WritePin(LCD_CONTROL_PORT, EN, GPIO_PIN_RESET);
 800086a:	2200      	movs	r2, #0
 800086c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000870:	4802      	ldr	r0, [pc, #8]	; (800087c <LCD_Kick+0x28>)
 8000872:	f7ff fd91 	bl	8000398 <MCAL_GPIO_WritePin>
}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40010800 	.word	0x40010800

08000880 <LCD_Clear_Screen>:

void LCD_Clear_Screen()
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
	LCD_Write_Command(LCD_CLEAR_SCREEN);
 8000884:	2001      	movs	r0, #1
 8000886:	f7ff ff75 	bl	8000774 <LCD_Write_Command>
}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}

0800088e <LCD_GOTO_XY>:

void LCD_GOTO_XY(uint8_t line, uint8_t position)
{
 800088e:	b580      	push	{r7, lr}
 8000890:	b082      	sub	sp, #8
 8000892:	af00      	add	r7, sp, #0
 8000894:	4603      	mov	r3, r0
 8000896:	460a      	mov	r2, r1
 8000898:	71fb      	strb	r3, [r7, #7]
 800089a:	4613      	mov	r3, r2
 800089c:	71bb      	strb	r3, [r7, #6]
	if (line == 1)
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	2b01      	cmp	r3, #1
 80008a2:	d108      	bne.n	80008b6 <LCD_GOTO_XY+0x28>
	{
		if (position < 16 && position >= 0)
 80008a4:	79bb      	ldrb	r3, [r7, #6]
 80008a6:	2b0f      	cmp	r3, #15
 80008a8:	d805      	bhi.n	80008b6 <LCD_GOTO_XY+0x28>
		{
			LCD_Write_Command(LCD_BEGIN_AT_FIRST_ROW + position);
 80008aa:	79bb      	ldrb	r3, [r7, #6]
 80008ac:	3b80      	subs	r3, #128	; 0x80
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	4618      	mov	r0, r3
 80008b2:	f7ff ff5f 	bl	8000774 <LCD_Write_Command>
		}
	}
	if (line == 2)
 80008b6:	79fb      	ldrb	r3, [r7, #7]
 80008b8:	2b02      	cmp	r3, #2
 80008ba:	d108      	bne.n	80008ce <LCD_GOTO_XY+0x40>
	{
		if (position < 16 && position >= 0)
 80008bc:	79bb      	ldrb	r3, [r7, #6]
 80008be:	2b0f      	cmp	r3, #15
 80008c0:	d805      	bhi.n	80008ce <LCD_GOTO_XY+0x40>
		{
			LCD_Write_Command(LCD_BEGIN_AT_SECOND_ROW + position);
 80008c2:	79bb      	ldrb	r3, [r7, #6]
 80008c4:	3b40      	subs	r3, #64	; 0x40
 80008c6:	b2db      	uxtb	r3, r3
 80008c8:	4618      	mov	r0, r3
 80008ca:	f7ff ff53 	bl	8000774 <LCD_Write_Command>
		}
	}
}
 80008ce:	bf00      	nop
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
	...

080008d8 <Clock_Init>:
#define EIGHT		0x00
#define NINE		0x10


void Clock_Init(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
	// IO port A clock enable
	RCC_GPIOA_CLK_EN();
 80008dc:	4b07      	ldr	r3, [pc, #28]	; (80008fc <Clock_Init+0x24>)
 80008de:	699b      	ldr	r3, [r3, #24]
 80008e0:	4a06      	ldr	r2, [pc, #24]	; (80008fc <Clock_Init+0x24>)
 80008e2:	f043 0304 	orr.w	r3, r3, #4
 80008e6:	6193      	str	r3, [r2, #24]
	// IO port B clock enable
	RCC_GPIOB_CLK_EN();
 80008e8:	4b04      	ldr	r3, [pc, #16]	; (80008fc <Clock_Init+0x24>)
 80008ea:	699b      	ldr	r3, [r3, #24]
 80008ec:	4a03      	ldr	r2, [pc, #12]	; (80008fc <Clock_Init+0x24>)
 80008ee:	f043 0308 	orr.w	r3, r3, #8
 80008f2:	6193      	str	r3, [r2, #24]
}
 80008f4:	bf00      	nop
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bc80      	pop	{r7}
 80008fa:	4770      	bx	lr
 80008fc:	40021000 	.word	0x40021000

08000900 <GPIO_Init>:

void GPIO_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
	uint8_t i;
	GPIO_PinConfig_t *PinCfg = NULL;
 8000906:	2300      	movs	r3, #0
 8000908:	603b      	str	r3, [r7, #0]

	// SET PINS 9:15 PORTB As OUTPUT For 7Seg
	for(i = 9; i < 16; i++)
 800090a:	2309      	movs	r3, #9
 800090c:	71fb      	strb	r3, [r7, #7]
 800090e:	e013      	b.n	8000938 <GPIO_Init+0x38>
	{
		// Pin(i) Port B: 00 General purpose output push-pull
		// Pin(i) Port B: 01 Output mode, max speed 10 MHz.
		PinCfg->GPIO_PinNumber = (uint16_t)(1<<i);
 8000910:	79fb      	ldrb	r3, [r7, #7]
 8000912:	2201      	movs	r2, #1
 8000914:	fa02 f303 	lsl.w	r3, r2, r3
 8000918:	b29a      	uxth	r2, r3
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	801a      	strh	r2, [r3, #0]
		PinCfg->GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	2204      	movs	r2, #4
 8000922:	709a      	strb	r2, [r3, #2]
		PinCfg->GPIO_Output_Speed = GPIO_SPEED_10M;
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	2201      	movs	r2, #1
 8000928:	70da      	strb	r2, [r3, #3]
		MCAL_GPIO_Init(GPIOB, PinCfg);
 800092a:	6839      	ldr	r1, [r7, #0]
 800092c:	4806      	ldr	r0, [pc, #24]	; (8000948 <GPIO_Init+0x48>)
 800092e:	f7ff fc92 	bl	8000256 <MCAL_GPIO_Init>
	for(i = 9; i < 16; i++)
 8000932:	79fb      	ldrb	r3, [r7, #7]
 8000934:	3301      	adds	r3, #1
 8000936:	71fb      	strb	r3, [r7, #7]
 8000938:	79fb      	ldrb	r3, [r7, #7]
 800093a:	2b0f      	cmp	r3, #15
 800093c:	d9e8      	bls.n	8000910 <GPIO_Init+0x10>
	}
}
 800093e:	bf00      	nop
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40010c00 	.word	0x40010c00

0800094c <delay_ms>:

static void delay_ms(uint8_t time_ms)
{
 800094c:	b480      	push	{r7}
 800094e:	b085      	sub	sp, #20
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	71fb      	strb	r3, [r7, #7]
	uint8_t i,j;
	for(i = 0; i < time_ms; i++)
 8000956:	2300      	movs	r3, #0
 8000958:	73fb      	strb	r3, [r7, #15]
 800095a:	e00b      	b.n	8000974 <delay_ms+0x28>
		for(j = 0; j < 255; j++);
 800095c:	2300      	movs	r3, #0
 800095e:	73bb      	strb	r3, [r7, #14]
 8000960:	e002      	b.n	8000968 <delay_ms+0x1c>
 8000962:	7bbb      	ldrb	r3, [r7, #14]
 8000964:	3301      	adds	r3, #1
 8000966:	73bb      	strb	r3, [r7, #14]
 8000968:	7bbb      	ldrb	r3, [r7, #14]
 800096a:	2bff      	cmp	r3, #255	; 0xff
 800096c:	d1f9      	bne.n	8000962 <delay_ms+0x16>
	for(i = 0; i < time_ms; i++)
 800096e:	7bfb      	ldrb	r3, [r7, #15]
 8000970:	3301      	adds	r3, #1
 8000972:	73fb      	strb	r3, [r7, #15]
 8000974:	7bfa      	ldrb	r2, [r7, #15]
 8000976:	79fb      	ldrb	r3, [r7, #7]
 8000978:	429a      	cmp	r2, r3
 800097a:	d3ef      	bcc.n	800095c <delay_ms+0x10>
}
 800097c:	bf00      	nop
 800097e:	3714      	adds	r7, #20
 8000980:	46bd      	mov	sp, r7
 8000982:	bc80      	pop	{r7}
 8000984:	4770      	bx	lr
	...

08000988 <main>:

int main(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b086      	sub	sp, #24
 800098c:	af00      	add	r7, sp, #0
	uint8_t key_pressed, i;
	uint8_t LCD_Display[10] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'};
 800098e:	4a2d      	ldr	r2, [pc, #180]	; (8000a44 <main+0xbc>)
 8000990:	f107 030c 	add.w	r3, r7, #12
 8000994:	ca07      	ldmia	r2, {r0, r1, r2}
 8000996:	c303      	stmia	r3!, {r0, r1}
 8000998:	801a      	strh	r2, [r3, #0]
	uint8_t SevSeg_Display[10] = {ZERO, ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE};
 800099a:	4a2b      	ldr	r2, [pc, #172]	; (8000a48 <main+0xc0>)
 800099c:	463b      	mov	r3, r7
 800099e:	ca07      	ldmia	r2, {r0, r1, r2}
 80009a0:	c303      	stmia	r3!, {r0, r1}
 80009a2:	801a      	strh	r2, [r3, #0]

	Clock_Init();
 80009a4:	f7ff ff98 	bl	80008d8 <Clock_Init>
	LCD_Init();
 80009a8:	f7ff fe5c 	bl	8000664 <LCD_Init>

	LCD_Write_String((uint8_t*)"Welcome");
 80009ac:	4827      	ldr	r0, [pc, #156]	; (8000a4c <main+0xc4>)
 80009ae:	f7ff ff25 	bl	80007fc <LCD_Write_String>
	delay_ms(255);
 80009b2:	20ff      	movs	r0, #255	; 0xff
 80009b4:	f7ff ffca 	bl	800094c <delay_ms>
	LCD_Clear_Screen();
 80009b8:	f7ff ff62 	bl	8000880 <LCD_Clear_Screen>

	GPIO_Init();
 80009bc:	f7ff ffa0 	bl	8000900 <GPIO_Init>

	for (i = 0; i < 10; i++) {
 80009c0:	2300      	movs	r3, #0
 80009c2:	75fb      	strb	r3, [r7, #23]
 80009c4:	e01b      	b.n	80009fe <main+0x76>
		LCD_Write_Char(LCD_Display[i]);
 80009c6:	7dfb      	ldrb	r3, [r7, #23]
 80009c8:	f107 0218 	add.w	r2, r7, #24
 80009cc:	4413      	add	r3, r2
 80009ce:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80009d2:	4618      	mov	r0, r3
 80009d4:	f7ff fef0 	bl	80007b8 <LCD_Write_Char>
		MCAL_GPIO_WritePort(GPIOB, SevSeg_Display[i] << 9);
 80009d8:	7dfb      	ldrb	r3, [r7, #23]
 80009da:	f107 0218 	add.w	r2, r7, #24
 80009de:	4413      	add	r3, r2
 80009e0:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80009e4:	b29b      	uxth	r3, r3
 80009e6:	025b      	lsls	r3, r3, #9
 80009e8:	b29b      	uxth	r3, r3
 80009ea:	4619      	mov	r1, r3
 80009ec:	4818      	ldr	r0, [pc, #96]	; (8000a50 <main+0xc8>)
 80009ee:	f7ff fcc5 	bl	800037c <MCAL_GPIO_WritePort>
		delay_ms(100); /* wait for 1 second */
 80009f2:	2064      	movs	r0, #100	; 0x64
 80009f4:	f7ff ffaa 	bl	800094c <delay_ms>
	for (i = 0; i < 10; i++) {
 80009f8:	7dfb      	ldrb	r3, [r7, #23]
 80009fa:	3301      	adds	r3, #1
 80009fc:	75fb      	strb	r3, [r7, #23]
 80009fe:	7dfb      	ldrb	r3, [r7, #23]
 8000a00:	2b09      	cmp	r3, #9
 8000a02:	d9e0      	bls.n	80009c6 <main+0x3e>
	}

	LCD_Clear_Screen();
 8000a04:	f7ff ff3c 	bl	8000880 <LCD_Clear_Screen>
	LCD_Write_String((uint8_t*)"KeyPad Is Ready");
 8000a08:	4812      	ldr	r0, [pc, #72]	; (8000a54 <main+0xcc>)
 8000a0a:	f7ff fef7 	bl	80007fc <LCD_Write_String>
	delay_ms(255);
 8000a0e:	20ff      	movs	r0, #255	; 0xff
 8000a10:	f7ff ff9c 	bl	800094c <delay_ms>
	LCD_Clear_Screen();
 8000a14:	f7ff ff34 	bl	8000880 <LCD_Clear_Screen>
	KEYPAD_Init();
 8000a18:	f7ff fcd6 	bl	80003c8 <KEYPAD_Init>

	while(1)
	{
		key_pressed = KEYPAD_GetKey();
 8000a1c:	f7ff fd3a 	bl	8000494 <KEYPAD_GetKey>
 8000a20:	4603      	mov	r3, r0
 8000a22:	75bb      	strb	r3, [r7, #22]
		switch(key_pressed)
 8000a24:	7dbb      	ldrb	r3, [r7, #22]
 8000a26:	2b41      	cmp	r3, #65	; 0x41
 8000a28:	d009      	beq.n	8000a3e <main+0xb6>
 8000a2a:	2b43      	cmp	r3, #67	; 0x43
 8000a2c:	d102      	bne.n	8000a34 <main+0xac>
		{
		case 'A':
			break;
		case 'C':
			LCD_Clear_Screen();
 8000a2e:	f7ff ff27 	bl	8000880 <LCD_Clear_Screen>
			break;
 8000a32:	e005      	b.n	8000a40 <main+0xb8>
		default:
			LCD_Write_Char(key_pressed);
 8000a34:	7dbb      	ldrb	r3, [r7, #22]
 8000a36:	4618      	mov	r0, r3
 8000a38:	f7ff febe 	bl	80007b8 <LCD_Write_Char>
			break;
 8000a3c:	e000      	b.n	8000a40 <main+0xb8>
			break;
 8000a3e:	bf00      	nop
		key_pressed = KEYPAD_GetKey();
 8000a40:	e7ec      	b.n	8000a1c <main+0x94>
 8000a42:	bf00      	nop
 8000a44:	08000b24 	.word	0x08000b24
 8000a48:	08000b30 	.word	0x08000b30
 8000a4c:	08000b0c 	.word	0x08000b0c
 8000a50:	40010c00 	.word	0x40010c00
 8000a54:	08000b14 	.word	0x08000b14

08000a58 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a58:	480d      	ldr	r0, [pc, #52]	; (8000a90 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a5a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000a5c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a60:	480c      	ldr	r0, [pc, #48]	; (8000a94 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a62:	490d      	ldr	r1, [pc, #52]	; (8000a98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a64:	4a0d      	ldr	r2, [pc, #52]	; (8000a9c <LoopForever+0xe>)
  movs r3, #0
 8000a66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a68:	e002      	b.n	8000a70 <LoopCopyDataInit>

08000a6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a6e:	3304      	adds	r3, #4

08000a70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a74:	d3f9      	bcc.n	8000a6a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a76:	4a0a      	ldr	r2, [pc, #40]	; (8000aa0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a78:	4c0a      	ldr	r4, [pc, #40]	; (8000aa4 <LoopForever+0x16>)
  movs r3, #0
 8000a7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a7c:	e001      	b.n	8000a82 <LoopFillZerobss>

08000a7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a80:	3204      	adds	r2, #4

08000a82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a84:	d3fb      	bcc.n	8000a7e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a86:	f000 f811 	bl	8000aac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a8a:	f7ff ff7d 	bl	8000988 <main>

08000a8e <LoopForever>:

LoopForever:
    b LoopForever
 8000a8e:	e7fe      	b.n	8000a8e <LoopForever>
  ldr   r0, =_estack
 8000a90:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000a94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a98:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000a9c:	08000b44 	.word	0x08000b44
  ldr r2, =_sbss
 8000aa0:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000aa4:	20000040 	.word	0x20000040

08000aa8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000aa8:	e7fe      	b.n	8000aa8 <ADC1_2_IRQHandler>
	...

08000aac <__libc_init_array>:
 8000aac:	b570      	push	{r4, r5, r6, lr}
 8000aae:	2500      	movs	r5, #0
 8000ab0:	4e0c      	ldr	r6, [pc, #48]	; (8000ae4 <__libc_init_array+0x38>)
 8000ab2:	4c0d      	ldr	r4, [pc, #52]	; (8000ae8 <__libc_init_array+0x3c>)
 8000ab4:	1ba4      	subs	r4, r4, r6
 8000ab6:	10a4      	asrs	r4, r4, #2
 8000ab8:	42a5      	cmp	r5, r4
 8000aba:	d109      	bne.n	8000ad0 <__libc_init_array+0x24>
 8000abc:	f000 f81a 	bl	8000af4 <_init>
 8000ac0:	2500      	movs	r5, #0
 8000ac2:	4e0a      	ldr	r6, [pc, #40]	; (8000aec <__libc_init_array+0x40>)
 8000ac4:	4c0a      	ldr	r4, [pc, #40]	; (8000af0 <__libc_init_array+0x44>)
 8000ac6:	1ba4      	subs	r4, r4, r6
 8000ac8:	10a4      	asrs	r4, r4, #2
 8000aca:	42a5      	cmp	r5, r4
 8000acc:	d105      	bne.n	8000ada <__libc_init_array+0x2e>
 8000ace:	bd70      	pop	{r4, r5, r6, pc}
 8000ad0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ad4:	4798      	blx	r3
 8000ad6:	3501      	adds	r5, #1
 8000ad8:	e7ee      	b.n	8000ab8 <__libc_init_array+0xc>
 8000ada:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ade:	4798      	blx	r3
 8000ae0:	3501      	adds	r5, #1
 8000ae2:	e7f2      	b.n	8000aca <__libc_init_array+0x1e>
 8000ae4:	08000b3c 	.word	0x08000b3c
 8000ae8:	08000b3c 	.word	0x08000b3c
 8000aec:	08000b3c 	.word	0x08000b3c
 8000af0:	08000b40 	.word	0x08000b40

08000af4 <_init>:
 8000af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000af6:	bf00      	nop
 8000af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000afa:	bc08      	pop	{r3}
 8000afc:	469e      	mov	lr, r3
 8000afe:	4770      	bx	lr

08000b00 <_fini>:
 8000b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b02:	bf00      	nop
 8000b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b06:	bc08      	pop	{r3}
 8000b08:	469e      	mov	lr, r3
 8000b0a:	4770      	bx	lr
