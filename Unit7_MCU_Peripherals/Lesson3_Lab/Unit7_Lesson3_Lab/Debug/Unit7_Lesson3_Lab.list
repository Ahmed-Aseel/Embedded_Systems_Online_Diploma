
Unit7_Lesson3_Lab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004a0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005d0  080005d8  000105d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080005d0  080005d0  000105d8  2**0
                  CONTENTS
  4 .ARM          00000000  080005d0  080005d0  000105d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080005d0  080005d8  000105d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005d0  080005d0  000105d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080005d4  080005d4  000105d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000105d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080005d8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080005d8  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000105d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001966  00000000  00000000  00010601  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000042d  00000000  00000000  00011f67  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000044c  00000000  00000000  00012394  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000000c0  00000000  00000000  000127e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000098  00000000  00000000  000128a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00001b08  00000000  00000000  00012938  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00000ce1  00000000  00000000  00014440  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00007689  00000000  00000000  00015121  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0001c7aa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000023c  00000000  00000000  0001c828  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080005b8 	.word	0x080005b8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080005b8 	.word	0x080005b8

08000170 <Get_CRLH_Position>:
//Includes
//-----------------------------
#include "STM32F103C6_GPIO_driver.h"

uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	80fb      	strh	r3, [r7, #6]
	uint8_t position;
	switch(PinNumber)
 800017a:	88fb      	ldrh	r3, [r7, #6]
 800017c:	2b80      	cmp	r3, #128	; 0x80
 800017e:	d049      	beq.n	8000214 <Get_CRLH_Position+0xa4>
 8000180:	2b80      	cmp	r3, #128	; 0x80
 8000182:	dc11      	bgt.n	80001a8 <Get_CRLH_Position+0x38>
 8000184:	2b08      	cmp	r3, #8
 8000186:	d039      	beq.n	80001fc <Get_CRLH_Position+0x8c>
 8000188:	2b08      	cmp	r3, #8
 800018a:	dc06      	bgt.n	800019a <Get_CRLH_Position+0x2a>
 800018c:	2b02      	cmp	r3, #2
 800018e:	d02f      	beq.n	80001f0 <Get_CRLH_Position+0x80>
 8000190:	2b04      	cmp	r3, #4
 8000192:	d030      	beq.n	80001f6 <Get_CRLH_Position+0x86>
 8000194:	2b01      	cmp	r3, #1
 8000196:	d028      	beq.n	80001ea <Get_CRLH_Position+0x7a>
 8000198:	e057      	b.n	800024a <Get_CRLH_Position+0xda>
 800019a:	2b20      	cmp	r3, #32
 800019c:	d034      	beq.n	8000208 <Get_CRLH_Position+0x98>
 800019e:	2b40      	cmp	r3, #64	; 0x40
 80001a0:	d035      	beq.n	800020e <Get_CRLH_Position+0x9e>
 80001a2:	2b10      	cmp	r3, #16
 80001a4:	d02d      	beq.n	8000202 <Get_CRLH_Position+0x92>
 80001a6:	e050      	b.n	800024a <Get_CRLH_Position+0xda>
 80001a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80001ac:	d03e      	beq.n	800022c <Get_CRLH_Position+0xbc>
 80001ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80001b2:	dc09      	bgt.n	80001c8 <Get_CRLH_Position+0x58>
 80001b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80001b8:	d032      	beq.n	8000220 <Get_CRLH_Position+0xb0>
 80001ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80001be:	d032      	beq.n	8000226 <Get_CRLH_Position+0xb6>
 80001c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80001c4:	d029      	beq.n	800021a <Get_CRLH_Position+0xaa>
 80001c6:	e040      	b.n	800024a <Get_CRLH_Position+0xda>
 80001c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80001cc:	d034      	beq.n	8000238 <Get_CRLH_Position+0xc8>
 80001ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80001d2:	dc03      	bgt.n	80001dc <Get_CRLH_Position+0x6c>
 80001d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80001d8:	d02b      	beq.n	8000232 <Get_CRLH_Position+0xc2>
 80001da:	e036      	b.n	800024a <Get_CRLH_Position+0xda>
 80001dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80001e0:	d02d      	beq.n	800023e <Get_CRLH_Position+0xce>
 80001e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80001e6:	d02d      	beq.n	8000244 <Get_CRLH_Position+0xd4>
 80001e8:	e02f      	b.n	800024a <Get_CRLH_Position+0xda>
	{
	case GPIO_PIN_0:
		position = 0;
 80001ea:	2300      	movs	r3, #0
 80001ec:	73fb      	strb	r3, [r7, #15]
		break;
 80001ee:	e02c      	b.n	800024a <Get_CRLH_Position+0xda>

	case GPIO_PIN_1:
		position = 4;
 80001f0:	2304      	movs	r3, #4
 80001f2:	73fb      	strb	r3, [r7, #15]
		break;
 80001f4:	e029      	b.n	800024a <Get_CRLH_Position+0xda>

	case GPIO_PIN_2:
		position = 8;
 80001f6:	2308      	movs	r3, #8
 80001f8:	73fb      	strb	r3, [r7, #15]
		break;
 80001fa:	e026      	b.n	800024a <Get_CRLH_Position+0xda>

	case GPIO_PIN_3:
		position = 12;
 80001fc:	230c      	movs	r3, #12
 80001fe:	73fb      	strb	r3, [r7, #15]
		break;
 8000200:	e023      	b.n	800024a <Get_CRLH_Position+0xda>

	case GPIO_PIN_4:
		position = 16;
 8000202:	2310      	movs	r3, #16
 8000204:	73fb      	strb	r3, [r7, #15]
		break;
 8000206:	e020      	b.n	800024a <Get_CRLH_Position+0xda>

	case GPIO_PIN_5:
		position = 20;
 8000208:	2314      	movs	r3, #20
 800020a:	73fb      	strb	r3, [r7, #15]
		break;
 800020c:	e01d      	b.n	800024a <Get_CRLH_Position+0xda>

	case GPIO_PIN_6:
		position = 24;
 800020e:	2318      	movs	r3, #24
 8000210:	73fb      	strb	r3, [r7, #15]
		break;
 8000212:	e01a      	b.n	800024a <Get_CRLH_Position+0xda>

	case GPIO_PIN_7:
		position = 28;
 8000214:	231c      	movs	r3, #28
 8000216:	73fb      	strb	r3, [r7, #15]
		break;
 8000218:	e017      	b.n	800024a <Get_CRLH_Position+0xda>

	case GPIO_PIN_8:
		position = 0;
 800021a:	2300      	movs	r3, #0
 800021c:	73fb      	strb	r3, [r7, #15]
		break;
 800021e:	e014      	b.n	800024a <Get_CRLH_Position+0xda>

	case GPIO_PIN_9:
		position = 4;
 8000220:	2304      	movs	r3, #4
 8000222:	73fb      	strb	r3, [r7, #15]
		break;
 8000224:	e011      	b.n	800024a <Get_CRLH_Position+0xda>

	case GPIO_PIN_10:
		position = 8;
 8000226:	2308      	movs	r3, #8
 8000228:	73fb      	strb	r3, [r7, #15]
		break;
 800022a:	e00e      	b.n	800024a <Get_CRLH_Position+0xda>

	case GPIO_PIN_11:
		position = 12;
 800022c:	230c      	movs	r3, #12
 800022e:	73fb      	strb	r3, [r7, #15]
		break;
 8000230:	e00b      	b.n	800024a <Get_CRLH_Position+0xda>

	case GPIO_PIN_12:
		position = 16;
 8000232:	2310      	movs	r3, #16
 8000234:	73fb      	strb	r3, [r7, #15]
		break;
 8000236:	e008      	b.n	800024a <Get_CRLH_Position+0xda>

	case GPIO_PIN_13:
		position = 20;
 8000238:	2314      	movs	r3, #20
 800023a:	73fb      	strb	r3, [r7, #15]
		break;
 800023c:	e005      	b.n	800024a <Get_CRLH_Position+0xda>

	case GPIO_PIN_14:
		position = 24;
 800023e:	2318      	movs	r3, #24
 8000240:	73fb      	strb	r3, [r7, #15]
		break;
 8000242:	e002      	b.n	800024a <Get_CRLH_Position+0xda>

	case GPIO_PIN_15:
		position = 28;
 8000244:	231c      	movs	r3, #28
 8000246:	73fb      	strb	r3, [r7, #15]
		break;
 8000248:	bf00      	nop
	}

	return position;
 800024a:	7bfb      	ldrb	r3, [r7, #15]
}
 800024c:	4618      	mov	r0, r3
 800024e:	3714      	adds	r7, #20
 8000250:	46bd      	mov	sp, r7
 8000252:	bc80      	pop	{r7}
 8000254:	4770      	bx	lr

08000256 <MCAL_GPIO_Init>:
* @param [out]	:
* @retval		:
* Note			:
*/
void MCAL_GPIO_Init	(GPIO_TypeDef *GPIOx, GPIO_PinConfig_t *PinConfig)
{
 8000256:	b590      	push	{r4, r7, lr}
 8000258:	b085      	sub	sp, #20
 800025a:	af00      	add	r7, sp, #0
 800025c:	6078      	str	r0, [r7, #4]
 800025e:	6039      	str	r1, [r7, #0]
	volatile uint32_t* Configregister = NULL;
 8000260:	2300      	movs	r3, #0
 8000262:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_Config = 0;
 8000264:	2300      	movs	r3, #0
 8000266:	73fb      	strb	r3, [r7, #15]
	//Port configuration register low (GPIOx_CRL) Configure pins 0:7
	//Port configuration register high (GPIOx_CRH) Configure pins 8:15
	Configregister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8)? &GPIOx->CRL : &GPIOx->CRH;
 8000268:	683b      	ldr	r3, [r7, #0]
 800026a:	881b      	ldrh	r3, [r3, #0]
 800026c:	2bff      	cmp	r3, #255	; 0xff
 800026e:	d801      	bhi.n	8000274 <MCAL_GPIO_Init+0x1e>
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	e001      	b.n	8000278 <MCAL_GPIO_Init+0x22>
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	3304      	adds	r3, #4
 8000278:	60bb      	str	r3, [r7, #8]

	//Clear CNFy[1:0] MODEy[1:0]
	*Configregister &= ~(0xF << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 800027a:	683b      	ldr	r3, [r7, #0]
 800027c:	881b      	ldrh	r3, [r3, #0]
 800027e:	4618      	mov	r0, r3
 8000280:	f7ff ff76 	bl	8000170 <Get_CRLH_Position>
 8000284:	4603      	mov	r3, r0
 8000286:	461a      	mov	r2, r3
 8000288:	230f      	movs	r3, #15
 800028a:	4093      	lsls	r3, r2
 800028c:	43da      	mvns	r2, r3
 800028e:	68bb      	ldr	r3, [r7, #8]
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	401a      	ands	r2, r3
 8000294:	68bb      	ldr	r3, [r7, #8]
 8000296:	601a      	str	r2, [r3, #0]

	// if pin is output
	if(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD || PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP ||
 8000298:	683b      	ldr	r3, [r7, #0]
 800029a:	789b      	ldrb	r3, [r3, #2]
 800029c:	2b07      	cmp	r3, #7
 800029e:	d00b      	beq.n	80002b8 <MCAL_GPIO_Init+0x62>
 80002a0:	683b      	ldr	r3, [r7, #0]
 80002a2:	789b      	ldrb	r3, [r3, #2]
 80002a4:	2b06      	cmp	r3, #6
 80002a6:	d007      	beq.n	80002b8 <MCAL_GPIO_Init+0x62>
	   PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD || PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP)
 80002a8:	683b      	ldr	r3, [r7, #0]
 80002aa:	789b      	ldrb	r3, [r3, #2]
	if(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD || PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP ||
 80002ac:	2b05      	cmp	r3, #5
 80002ae:	d003      	beq.n	80002b8 <MCAL_GPIO_Init+0x62>
	   PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD || PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP)
 80002b0:	683b      	ldr	r3, [r7, #0]
 80002b2:	789b      	ldrb	r3, [r3, #2]
 80002b4:	2b04      	cmp	r3, #4
 80002b6:	d10e      	bne.n	80002d6 <MCAL_GPIO_Init+0x80>
	{
		PIN_Config = ( (((PinConfig->GPIO_MODE - 4) << 2) | (PinConfig->GPIO_Output_Speed)) & 0x0F );
 80002b8:	683b      	ldr	r3, [r7, #0]
 80002ba:	789b      	ldrb	r3, [r3, #2]
 80002bc:	3b04      	subs	r3, #4
 80002be:	009b      	lsls	r3, r3, #2
 80002c0:	b25a      	sxtb	r2, r3
 80002c2:	683b      	ldr	r3, [r7, #0]
 80002c4:	78db      	ldrb	r3, [r3, #3]
 80002c6:	b25b      	sxtb	r3, r3
 80002c8:	4313      	orrs	r3, r2
 80002ca:	b25b      	sxtb	r3, r3
 80002cc:	b2db      	uxtb	r3, r3
 80002ce:	f003 030f 	and.w	r3, r3, #15
 80002d2:	73fb      	strb	r3, [r7, #15]
 80002d4:	e02c      	b.n	8000330 <MCAL_GPIO_Init+0xda>
	}
	else
	{
		if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO || PinConfig->GPIO_MODE == GPIO_MODE_ANALOG)
 80002d6:	683b      	ldr	r3, [r7, #0]
 80002d8:	789b      	ldrb	r3, [r3, #2]
 80002da:	2b01      	cmp	r3, #1
 80002dc:	d003      	beq.n	80002e6 <MCAL_GPIO_Init+0x90>
 80002de:	683b      	ldr	r3, [r7, #0]
 80002e0:	789b      	ldrb	r3, [r3, #2]
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d107      	bne.n	80002f6 <MCAL_GPIO_Init+0xa0>
		{
			PIN_Config = ( (PinConfig->GPIO_MODE << 2) & 0x0F );
 80002e6:	683b      	ldr	r3, [r7, #0]
 80002e8:	789b      	ldrb	r3, [r3, #2]
 80002ea:	009b      	lsls	r3, r3, #2
 80002ec:	b2db      	uxtb	r3, r3
 80002ee:	f003 030f 	and.w	r3, r3, #15
 80002f2:	73fb      	strb	r3, [r7, #15]
 80002f4:	e01c      	b.n	8000330 <MCAL_GPIO_Init+0xda>
		}
		else if(PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT) //Consider it as input floating
 80002f6:	683b      	ldr	r3, [r7, #0]
 80002f8:	789b      	ldrb	r3, [r3, #2]
 80002fa:	2b08      	cmp	r3, #8
 80002fc:	d102      	bne.n	8000304 <MCAL_GPIO_Init+0xae>
		{
			PIN_Config = ( (GPIO_MODE_INPUT_FLO << 2) & 0x0F );
 80002fe:	2304      	movs	r3, #4
 8000300:	73fb      	strb	r3, [r7, #15]
 8000302:	e015      	b.n	8000330 <MCAL_GPIO_Init+0xda>
		}
		else //pull-up & pull-down
		{
			PIN_Config = ( (GPIO_MODE_INPUT_PU << 2) & 0x0F );
 8000304:	2308      	movs	r3, #8
 8000306:	73fb      	strb	r3, [r7, #15]
			if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 8000308:	683b      	ldr	r3, [r7, #0]
 800030a:	789b      	ldrb	r3, [r3, #2]
 800030c:	2b02      	cmp	r3, #2
 800030e:	d107      	bne.n	8000320 <MCAL_GPIO_Init+0xca>
			{
				//PxODR register = 1 Input pull-up : Table 20. Port bit configuration table
				GPIOx->ODR |= PinConfig->GPIO_PinNumber;
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	68db      	ldr	r3, [r3, #12]
 8000314:	683a      	ldr	r2, [r7, #0]
 8000316:	8812      	ldrh	r2, [r2, #0]
 8000318:	431a      	orrs	r2, r3
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	60da      	str	r2, [r3, #12]
 800031e:	e007      	b.n	8000330 <MCAL_GPIO_Init+0xda>
			}
			else
			{
				//PxODR register = 0 Input pull-down : Table 20. Port bit configuration table
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	68db      	ldr	r3, [r3, #12]
 8000324:	683a      	ldr	r2, [r7, #0]
 8000326:	8812      	ldrh	r2, [r2, #0]
 8000328:	43d2      	mvns	r2, r2
 800032a:	401a      	ands	r2, r3
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	60da      	str	r2, [r3, #12]
			}
		}
	}
	//Write on CRL or CRH
	*Configregister |= ( PIN_Config << Get_CRLH_Position(PinConfig->GPIO_PinNumber) );
 8000330:	7bfc      	ldrb	r4, [r7, #15]
 8000332:	683b      	ldr	r3, [r7, #0]
 8000334:	881b      	ldrh	r3, [r3, #0]
 8000336:	4618      	mov	r0, r3
 8000338:	f7ff ff1a 	bl	8000170 <Get_CRLH_Position>
 800033c:	4603      	mov	r3, r0
 800033e:	fa04 f203 	lsl.w	r2, r4, r3
 8000342:	68bb      	ldr	r3, [r7, #8]
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	431a      	orrs	r2, r3
 8000348:	68bb      	ldr	r3, [r7, #8]
 800034a:	601a      	str	r2, [r3, #0]
}
 800034c:	bf00      	nop
 800034e:	3714      	adds	r7, #20
 8000350:	46bd      	mov	sp, r7
 8000352:	bd90      	pop	{r4, r7, pc}

08000354 <MCAL_GPIO_ReadPin>:
* @param [out]	:
* @retval		:
* Note			:
*/
uint8_t MCAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t PinNumber)
{
 8000354:	b480      	push	{r7}
 8000356:	b083      	sub	sp, #12
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
 800035c:	460b      	mov	r3, r1
 800035e:	807b      	strh	r3, [r7, #2]
	if(GPIOx->IDR & PinNumber)
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	689a      	ldr	r2, [r3, #8]
 8000364:	887b      	ldrh	r3, [r7, #2]
 8000366:	4013      	ands	r3, r2
 8000368:	2b00      	cmp	r3, #0
 800036a:	d001      	beq.n	8000370 <MCAL_GPIO_ReadPin+0x1c>
	{
		return GPIO_PIN_SET;
 800036c:	2301      	movs	r3, #1
 800036e:	e000      	b.n	8000372 <MCAL_GPIO_ReadPin+0x1e>
	}
	else
	{
		return GPIO_PIN_RESET;
 8000370:	2300      	movs	r3, #0
	}
}
 8000372:	4618      	mov	r0, r3
 8000374:	370c      	adds	r7, #12
 8000376:	46bd      	mov	sp, r7
 8000378:	bc80      	pop	{r7}
 800037a:	4770      	bx	lr

0800037c <MCAL_GPIO_WritePin>:
* @param [out]	:
* @retval		:
* Note			:
*/
void MCAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t PinNumber, uint8_t Value)
{
 800037c:	b480      	push	{r7}
 800037e:	b083      	sub	sp, #12
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]
 8000384:	460b      	mov	r3, r1
 8000386:	807b      	strh	r3, [r7, #2]
 8000388:	4613      	mov	r3, r2
 800038a:	707b      	strb	r3, [r7, #1]
	if(Value == GPIO_PIN_SET)
 800038c:	787b      	ldrb	r3, [r7, #1]
 800038e:	2b01      	cmp	r3, #1
 8000390:	d103      	bne.n	800039a <MCAL_GPIO_WritePin+0x1e>
	{
//		Bits 15:0 BSy: Port x Set bit y (y= 0 .. 15)
//		These bits are write-only and can be accessed in Word mode only.
//		0: No action on the corresponding ODRx bit
//		1: Set the corresponding ODRx bit
		GPIOx->BSRR = (uint32_t)PinNumber;
 8000392:	887a      	ldrh	r2, [r7, #2]
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	611a      	str	r2, [r3, #16]
//		These bits are write-only and can be accessed in Word mode only.
//		0: No action on the corresponding ODRx bit
//		1: Reset the corresponding ODRx bit
		GPIOx->BRR = (uint32_t)PinNumber;
	}
}
 8000398:	e002      	b.n	80003a0 <MCAL_GPIO_WritePin+0x24>
		GPIOx->BRR = (uint32_t)PinNumber;
 800039a:	887a      	ldrh	r2, [r7, #2]
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	615a      	str	r2, [r3, #20]
}
 80003a0:	bf00      	nop
 80003a2:	370c      	adds	r7, #12
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bc80      	pop	{r7}
 80003a8:	4770      	bx	lr

080003aa <MCAL_GPIO_TogglePin>:
* @param [out]	:
* @retval		:
* Note			:
*/
void MCAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t PinNumber)
{
 80003aa:	b480      	push	{r7}
 80003ac:	b083      	sub	sp, #12
 80003ae:	af00      	add	r7, sp, #0
 80003b0:	6078      	str	r0, [r7, #4]
 80003b2:	460b      	mov	r3, r1
 80003b4:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR ^= PinNumber;
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	68da      	ldr	r2, [r3, #12]
 80003ba:	887b      	ldrh	r3, [r7, #2]
 80003bc:	405a      	eors	r2, r3
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	60da      	str	r2, [r3, #12]
}
 80003c2:	bf00      	nop
 80003c4:	370c      	adds	r7, #12
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bc80      	pop	{r7}
 80003ca:	4770      	bx	lr

080003cc <Clock_Init>:
//-----------------------------
#include "STM32F103x6.h"
#include "STM32F103C6_GPIO_driver.h"

void Clock_Init(void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0
	// IO port A clock enable
	RCC_GPIOA_CLK_EN();
 80003d0:	4b07      	ldr	r3, [pc, #28]	; (80003f0 <Clock_Init+0x24>)
 80003d2:	699b      	ldr	r3, [r3, #24]
 80003d4:	4a06      	ldr	r2, [pc, #24]	; (80003f0 <Clock_Init+0x24>)
 80003d6:	f043 0304 	orr.w	r3, r3, #4
 80003da:	6193      	str	r3, [r2, #24]
	// IO port B clock enable
	RCC_GPIOB_CLK_EN();
 80003dc:	4b04      	ldr	r3, [pc, #16]	; (80003f0 <Clock_Init+0x24>)
 80003de:	699b      	ldr	r3, [r3, #24]
 80003e0:	4a03      	ldr	r2, [pc, #12]	; (80003f0 <Clock_Init+0x24>)
 80003e2:	f043 0308 	orr.w	r3, r3, #8
 80003e6:	6193      	str	r3, [r2, #24]
}
 80003e8:	bf00      	nop
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bc80      	pop	{r7}
 80003ee:	4770      	bx	lr
 80003f0:	40021000 	.word	0x40021000

080003f4 <GPIO_Init>:

void GPIO_Init(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
	GPIO_PinConfig_t *PinCfg = NULL;
 80003fa:	2300      	movs	r3, #0
 80003fc:	607b      	str	r3, [r7, #4]


	// Pin1 Port A: 00 Floating Input mode (reset state)
	PinCfg->GPIO_PinNumber = GPIO_PIN_1;
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	2202      	movs	r2, #2
 8000402:	801a      	strh	r2, [r3, #0]
	PinCfg->GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	2201      	movs	r2, #1
 8000408:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(GPIOA, PinCfg);
 800040a:	6879      	ldr	r1, [r7, #4]
 800040c:	481b      	ldr	r0, [pc, #108]	; (800047c <GPIO_Init+0x88>)
 800040e:	f7ff ff22 	bl	8000256 <MCAL_GPIO_Init>

	// Pin13 Port A: 01 Floating input (reset state)
	PinCfg->GPIO_PinNumber = GPIO_PIN_13;
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000418:	801a      	strh	r2, [r3, #0]
	PinCfg->GPIO_MODE = GPIO_MODE_INPUT_FLO;
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	2201      	movs	r2, #1
 800041e:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(GPIOA, PinCfg);
 8000420:	6879      	ldr	r1, [r7, #4]
 8000422:	4816      	ldr	r0, [pc, #88]	; (800047c <GPIO_Init+0x88>)
 8000424:	f7ff ff17 	bl	8000256 <MCAL_GPIO_Init>

	// Pin1 Port B: 00 General purpose output push-pull
	// Pin1 Port B: 01 Output mode, max speed 10 MHz.
	PinCfg->GPIO_PinNumber = GPIO_PIN_1;
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	2202      	movs	r2, #2
 800042c:	801a      	strh	r2, [r3, #0]
	PinCfg->GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	2204      	movs	r2, #4
 8000432:	709a      	strb	r2, [r3, #2]
	PinCfg->GPIO_Output_Speed = GPIO_SPEED_10M;
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	2201      	movs	r2, #1
 8000438:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOB, PinCfg);
 800043a:	6879      	ldr	r1, [r7, #4]
 800043c:	4810      	ldr	r0, [pc, #64]	; (8000480 <GPIO_Init+0x8c>)
 800043e:	f7ff ff0a 	bl	8000256 <MCAL_GPIO_Init>
	//Turn OFF led on Pin1 PortB
	MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8000442:	2201      	movs	r2, #1
 8000444:	2102      	movs	r1, #2
 8000446:	480e      	ldr	r0, [pc, #56]	; (8000480 <GPIO_Init+0x8c>)
 8000448:	f7ff ff98 	bl	800037c <MCAL_GPIO_WritePin>

	// Pin13 Port B: 00 General purpose output push-pull
	// Pin13 Port B: 01 Output mode, max speed 10 MHz.
	PinCfg->GPIO_PinNumber = GPIO_PIN_13;
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000452:	801a      	strh	r2, [r3, #0]
	PinCfg->GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	2204      	movs	r2, #4
 8000458:	709a      	strb	r2, [r3, #2]
	PinCfg->GPIO_Output_Speed = GPIO_SPEED_10M;
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	2201      	movs	r2, #1
 800045e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOB, PinCfg);
 8000460:	6879      	ldr	r1, [r7, #4]
 8000462:	4807      	ldr	r0, [pc, #28]	; (8000480 <GPIO_Init+0x8c>)
 8000464:	f7ff fef7 	bl	8000256 <MCAL_GPIO_Init>
	//Turn OFF led on Pin13 PortB
	MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8000468:	2201      	movs	r2, #1
 800046a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800046e:	4804      	ldr	r0, [pc, #16]	; (8000480 <GPIO_Init+0x8c>)
 8000470:	f7ff ff84 	bl	800037c <MCAL_GPIO_WritePin>
}
 8000474:	bf00      	nop
 8000476:	3708      	adds	r7, #8
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}
 800047c:	40010800 	.word	0x40010800
 8000480:	40010c00 	.word	0x40010c00

08000484 <delay_ms>:

void delay_ms(uint8_t x)
{
 8000484:	b480      	push	{r7}
 8000486:	b085      	sub	sp, #20
 8000488:	af00      	add	r7, sp, #0
 800048a:	4603      	mov	r3, r0
 800048c:	71fb      	strb	r3, [r7, #7]
	uint8_t i,j;
	for(i = 0; i < x; i++)
 800048e:	2300      	movs	r3, #0
 8000490:	73fb      	strb	r3, [r7, #15]
 8000492:	e00b      	b.n	80004ac <delay_ms+0x28>
		for(j = 0; j < 255; j++);
 8000494:	2300      	movs	r3, #0
 8000496:	73bb      	strb	r3, [r7, #14]
 8000498:	e002      	b.n	80004a0 <delay_ms+0x1c>
 800049a:	7bbb      	ldrb	r3, [r7, #14]
 800049c:	3301      	adds	r3, #1
 800049e:	73bb      	strb	r3, [r7, #14]
 80004a0:	7bbb      	ldrb	r3, [r7, #14]
 80004a2:	2bff      	cmp	r3, #255	; 0xff
 80004a4:	d1f9      	bne.n	800049a <delay_ms+0x16>
	for(i = 0; i < x; i++)
 80004a6:	7bfb      	ldrb	r3, [r7, #15]
 80004a8:	3301      	adds	r3, #1
 80004aa:	73fb      	strb	r3, [r7, #15]
 80004ac:	7bfa      	ldrb	r2, [r7, #15]
 80004ae:	79fb      	ldrb	r3, [r7, #7]
 80004b0:	429a      	cmp	r2, r3
 80004b2:	d3ef      	bcc.n	8000494 <delay_ms+0x10>
}
 80004b4:	bf00      	nop
 80004b6:	3714      	adds	r7, #20
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bc80      	pop	{r7}
 80004bc:	4770      	bx	lr
	...

080004c0 <main>:

int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
	Clock_Init();
 80004c4:	f7ff ff82 	bl	80003cc <Clock_Init>
	GPIO_Init();
 80004c8:	f7ff ff94 	bl	80003f4 <GPIO_Init>

	while(1)
	{
		if(MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_RESET) // single press
 80004cc:	2102      	movs	r1, #2
 80004ce:	4811      	ldr	r0, [pc, #68]	; (8000514 <main+0x54>)
 80004d0:	f7ff ff40 	bl	8000354 <MCAL_GPIO_ReadPin>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d10b      	bne.n	80004f2 <main+0x32>
		{
			MCAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 80004da:	2102      	movs	r1, #2
 80004dc:	480e      	ldr	r0, [pc, #56]	; (8000518 <main+0x58>)
 80004de:	f7ff ff64 	bl	80003aa <MCAL_GPIO_TogglePin>
			while(MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_RESET);
 80004e2:	bf00      	nop
 80004e4:	2102      	movs	r1, #2
 80004e6:	480b      	ldr	r0, [pc, #44]	; (8000514 <main+0x54>)
 80004e8:	f7ff ff34 	bl	8000354 <MCAL_GPIO_ReadPin>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d0f8      	beq.n	80004e4 <main+0x24>
		}

		if(MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_13) == GPIO_PIN_SET) // multi pressing
 80004f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004f6:	4807      	ldr	r0, [pc, #28]	; (8000514 <main+0x54>)
 80004f8:	f7ff ff2c 	bl	8000354 <MCAL_GPIO_ReadPin>
 80004fc:	4603      	mov	r3, r0
 80004fe:	2b01      	cmp	r3, #1
 8000500:	d1e4      	bne.n	80004cc <main+0xc>
		{
			MCAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8000502:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000506:	4804      	ldr	r0, [pc, #16]	; (8000518 <main+0x58>)
 8000508:	f7ff ff4f 	bl	80003aa <MCAL_GPIO_TogglePin>
			delay_ms(2);
 800050c:	2002      	movs	r0, #2
 800050e:	f7ff ffb9 	bl	8000484 <delay_ms>
		if(MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_RESET) // single press
 8000512:	e7db      	b.n	80004cc <main+0xc>
 8000514:	40010800 	.word	0x40010800
 8000518:	40010c00 	.word	0x40010c00

0800051c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800051c:	480d      	ldr	r0, [pc, #52]	; (8000554 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800051e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000520:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000524:	480c      	ldr	r0, [pc, #48]	; (8000558 <LoopForever+0x6>)
  ldr r1, =_edata
 8000526:	490d      	ldr	r1, [pc, #52]	; (800055c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000528:	4a0d      	ldr	r2, [pc, #52]	; (8000560 <LoopForever+0xe>)
  movs r3, #0
 800052a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800052c:	e002      	b.n	8000534 <LoopCopyDataInit>

0800052e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800052e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000530:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000532:	3304      	adds	r3, #4

08000534 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000534:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000536:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000538:	d3f9      	bcc.n	800052e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800053a:	4a0a      	ldr	r2, [pc, #40]	; (8000564 <LoopForever+0x12>)
  ldr r4, =_ebss
 800053c:	4c0a      	ldr	r4, [pc, #40]	; (8000568 <LoopForever+0x16>)
  movs r3, #0
 800053e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000540:	e001      	b.n	8000546 <LoopFillZerobss>

08000542 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000542:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000544:	3204      	adds	r2, #4

08000546 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000546:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000548:	d3fb      	bcc.n	8000542 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800054a:	f000 f811 	bl	8000570 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800054e:	f7ff ffb7 	bl	80004c0 <main>

08000552 <LoopForever>:

LoopForever:
    b LoopForever
 8000552:	e7fe      	b.n	8000552 <LoopForever>
  ldr   r0, =_estack
 8000554:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000558:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800055c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000560:	080005d8 	.word	0x080005d8
  ldr r2, =_sbss
 8000564:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000568:	2000001c 	.word	0x2000001c

0800056c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800056c:	e7fe      	b.n	800056c <ADC1_2_IRQHandler>
	...

08000570 <__libc_init_array>:
 8000570:	b570      	push	{r4, r5, r6, lr}
 8000572:	2500      	movs	r5, #0
 8000574:	4e0c      	ldr	r6, [pc, #48]	; (80005a8 <__libc_init_array+0x38>)
 8000576:	4c0d      	ldr	r4, [pc, #52]	; (80005ac <__libc_init_array+0x3c>)
 8000578:	1ba4      	subs	r4, r4, r6
 800057a:	10a4      	asrs	r4, r4, #2
 800057c:	42a5      	cmp	r5, r4
 800057e:	d109      	bne.n	8000594 <__libc_init_array+0x24>
 8000580:	f000 f81a 	bl	80005b8 <_init>
 8000584:	2500      	movs	r5, #0
 8000586:	4e0a      	ldr	r6, [pc, #40]	; (80005b0 <__libc_init_array+0x40>)
 8000588:	4c0a      	ldr	r4, [pc, #40]	; (80005b4 <__libc_init_array+0x44>)
 800058a:	1ba4      	subs	r4, r4, r6
 800058c:	10a4      	asrs	r4, r4, #2
 800058e:	42a5      	cmp	r5, r4
 8000590:	d105      	bne.n	800059e <__libc_init_array+0x2e>
 8000592:	bd70      	pop	{r4, r5, r6, pc}
 8000594:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000598:	4798      	blx	r3
 800059a:	3501      	adds	r5, #1
 800059c:	e7ee      	b.n	800057c <__libc_init_array+0xc>
 800059e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80005a2:	4798      	blx	r3
 80005a4:	3501      	adds	r5, #1
 80005a6:	e7f2      	b.n	800058e <__libc_init_array+0x1e>
 80005a8:	080005d0 	.word	0x080005d0
 80005ac:	080005d0 	.word	0x080005d0
 80005b0:	080005d0 	.word	0x080005d0
 80005b4:	080005d4 	.word	0x080005d4

080005b8 <_init>:
 80005b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005ba:	bf00      	nop
 80005bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005be:	bc08      	pop	{r3}
 80005c0:	469e      	mov	lr, r3
 80005c2:	4770      	bx	lr

080005c4 <_fini>:
 80005c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005c6:	bf00      	nop
 80005c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005ca:	bc08      	pop	{r3}
 80005cc:	469e      	mov	lr, r3
 80005ce:	4770      	bx	lr
