
Unit14_Lesson5_Lab.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a60  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000b90  08000b90  00010b90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000b9c  08000b9c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000b9c  08000b9c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000b9c  08000b9c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b9c  08000b9c  00010b9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ba0  08000ba0  00010ba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000ba4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  20000004  08000ba8  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  08000ba8  00020074  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000028a0  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000658  00000000  00000000  000228cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000850  00000000  00000000  00022f25  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000158  00000000  00000000  00023778  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000120  00000000  00000000  000238d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00002283  00000000  00000000  000239f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000158b  00000000  00000000  00025c73  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000939c  00000000  00000000  000271fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0003059a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000454  00000000  00000000  00030618  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000004 	.word	0x20000004
 800014c:	00000000 	.word	0x00000000
 8000150:	08000b78 	.word	0x08000b78

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000008 	.word	0x20000008
 800016c:	08000b78 	.word	0x08000b78

08000170 <NVIC_Enable>:
* Generic Functions
* ===============================================
*/

static void NVIC_Enable(uint8_t IRQ_Number)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]
	switch(IRQ_Number)
 800017a:	79fb      	ldrb	r3, [r7, #7]
 800017c:	2b0f      	cmp	r3, #15
 800017e:	d854      	bhi.n	800022a <NVIC_Enable+0xba>
 8000180:	a201      	add	r2, pc, #4	; (adr r2, 8000188 <NVIC_Enable+0x18>)
 8000182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000186:	bf00      	nop
 8000188:	080001c9 	.word	0x080001c9
 800018c:	080001d7 	.word	0x080001d7
 8000190:	080001e5 	.word	0x080001e5
 8000194:	080001f3 	.word	0x080001f3
 8000198:	08000201 	.word	0x08000201
 800019c:	0800020f 	.word	0x0800020f
 80001a0:	0800020f 	.word	0x0800020f
 80001a4:	0800020f 	.word	0x0800020f
 80001a8:	0800020f 	.word	0x0800020f
 80001ac:	0800020f 	.word	0x0800020f
 80001b0:	0800021d 	.word	0x0800021d
 80001b4:	0800021d 	.word	0x0800021d
 80001b8:	0800021d 	.word	0x0800021d
 80001bc:	0800021d 	.word	0x0800021d
 80001c0:	0800021d 	.word	0x0800021d
 80001c4:	0800021d 	.word	0x0800021d
	{
	case 0:
		NVIC_IRQ6_EXTI0_Enable();
 80001c8:	4b1a      	ldr	r3, [pc, #104]	; (8000234 <NVIC_Enable+0xc4>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	4a19      	ldr	r2, [pc, #100]	; (8000234 <NVIC_Enable+0xc4>)
 80001ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80001d2:	6013      	str	r3, [r2, #0]
		break;
 80001d4:	e029      	b.n	800022a <NVIC_Enable+0xba>
	case 1:
		NVIC_IRQ7_EXTI1_Enable();
 80001d6:	4b17      	ldr	r3, [pc, #92]	; (8000234 <NVIC_Enable+0xc4>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	4a16      	ldr	r2, [pc, #88]	; (8000234 <NVIC_Enable+0xc4>)
 80001dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80001e0:	6013      	str	r3, [r2, #0]
		break;
 80001e2:	e022      	b.n	800022a <NVIC_Enable+0xba>
	case 2:
		NVIC_IRQ8_EXTI2_Enable();
 80001e4:	4b13      	ldr	r3, [pc, #76]	; (8000234 <NVIC_Enable+0xc4>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a12      	ldr	r2, [pc, #72]	; (8000234 <NVIC_Enable+0xc4>)
 80001ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80001ee:	6013      	str	r3, [r2, #0]
		break;
 80001f0:	e01b      	b.n	800022a <NVIC_Enable+0xba>
	case 3:
		NVIC_IRQ9_EXTI3_Enable();
 80001f2:	4b10      	ldr	r3, [pc, #64]	; (8000234 <NVIC_Enable+0xc4>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	4a0f      	ldr	r2, [pc, #60]	; (8000234 <NVIC_Enable+0xc4>)
 80001f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80001fc:	6013      	str	r3, [r2, #0]
		break;
 80001fe:	e014      	b.n	800022a <NVIC_Enable+0xba>
	case 4:
		NVIC_IRQ10_EXTI4_Enable();
 8000200:	4b0c      	ldr	r3, [pc, #48]	; (8000234 <NVIC_Enable+0xc4>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	4a0b      	ldr	r2, [pc, #44]	; (8000234 <NVIC_Enable+0xc4>)
 8000206:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800020a:	6013      	str	r3, [r2, #0]
		break;
 800020c:	e00d      	b.n	800022a <NVIC_Enable+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI9_5_Enable();
 800020e:	4b09      	ldr	r3, [pc, #36]	; (8000234 <NVIC_Enable+0xc4>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	4a08      	ldr	r2, [pc, #32]	; (8000234 <NVIC_Enable+0xc4>)
 8000214:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000218:	6013      	str	r3, [r2, #0]
		break;
 800021a:	e006      	b.n	800022a <NVIC_Enable+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI15_10_Enable();
 800021c:	4b06      	ldr	r3, [pc, #24]	; (8000238 <NVIC_Enable+0xc8>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	4a05      	ldr	r2, [pc, #20]	; (8000238 <NVIC_Enable+0xc8>)
 8000222:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000226:	6013      	str	r3, [r2, #0]
		break;
 8000228:	bf00      	nop
	}
}
 800022a:	bf00      	nop
 800022c:	370c      	adds	r7, #12
 800022e:	46bd      	mov	sp, r7
 8000230:	bc80      	pop	{r7}
 8000232:	4770      	bx	lr
 8000234:	e000e100 	.word	0xe000e100
 8000238:	e000e104 	.word	0xe000e104

0800023c <NVIC_Disable>:

static void NVIC_Disable(uint8_t IRQ_Number)
{
 800023c:	b480      	push	{r7}
 800023e:	b083      	sub	sp, #12
 8000240:	af00      	add	r7, sp, #0
 8000242:	4603      	mov	r3, r0
 8000244:	71fb      	strb	r3, [r7, #7]
	switch(IRQ_Number)
 8000246:	79fb      	ldrb	r3, [r7, #7]
 8000248:	2b0f      	cmp	r3, #15
 800024a:	d854      	bhi.n	80002f6 <NVIC_Disable+0xba>
 800024c:	a201      	add	r2, pc, #4	; (adr r2, 8000254 <NVIC_Disable+0x18>)
 800024e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000252:	bf00      	nop
 8000254:	08000295 	.word	0x08000295
 8000258:	080002a3 	.word	0x080002a3
 800025c:	080002b1 	.word	0x080002b1
 8000260:	080002bf 	.word	0x080002bf
 8000264:	080002cd 	.word	0x080002cd
 8000268:	080002db 	.word	0x080002db
 800026c:	080002db 	.word	0x080002db
 8000270:	080002db 	.word	0x080002db
 8000274:	080002db 	.word	0x080002db
 8000278:	080002db 	.word	0x080002db
 800027c:	080002e9 	.word	0x080002e9
 8000280:	080002e9 	.word	0x080002e9
 8000284:	080002e9 	.word	0x080002e9
 8000288:	080002e9 	.word	0x080002e9
 800028c:	080002e9 	.word	0x080002e9
 8000290:	080002e9 	.word	0x080002e9
	{
	case 0:
		NVIC_IRQ6_EXTI0_Disable();
 8000294:	4b1a      	ldr	r3, [pc, #104]	; (8000300 <NVIC_Disable+0xc4>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a19      	ldr	r2, [pc, #100]	; (8000300 <NVIC_Disable+0xc4>)
 800029a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800029e:	6013      	str	r3, [r2, #0]
		break;
 80002a0:	e029      	b.n	80002f6 <NVIC_Disable+0xba>
	case 1:
		NVIC_IRQ7_EXTI1_Disable();
 80002a2:	4b17      	ldr	r3, [pc, #92]	; (8000300 <NVIC_Disable+0xc4>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	4a16      	ldr	r2, [pc, #88]	; (8000300 <NVIC_Disable+0xc4>)
 80002a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002ac:	6013      	str	r3, [r2, #0]
		break;
 80002ae:	e022      	b.n	80002f6 <NVIC_Disable+0xba>
	case 2:
		NVIC_IRQ8_EXTI2_Disable();
 80002b0:	4b13      	ldr	r3, [pc, #76]	; (8000300 <NVIC_Disable+0xc4>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	4a12      	ldr	r2, [pc, #72]	; (8000300 <NVIC_Disable+0xc4>)
 80002b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002ba:	6013      	str	r3, [r2, #0]
		break;
 80002bc:	e01b      	b.n	80002f6 <NVIC_Disable+0xba>
	case 3:
		NVIC_IRQ9_EXTI3_Disable();
 80002be:	4b10      	ldr	r3, [pc, #64]	; (8000300 <NVIC_Disable+0xc4>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	4a0f      	ldr	r2, [pc, #60]	; (8000300 <NVIC_Disable+0xc4>)
 80002c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002c8:	6013      	str	r3, [r2, #0]
		break;
 80002ca:	e014      	b.n	80002f6 <NVIC_Disable+0xba>
	case 4:
		NVIC_IRQ10_EXTI4_Disable();
 80002cc:	4b0c      	ldr	r3, [pc, #48]	; (8000300 <NVIC_Disable+0xc4>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a0b      	ldr	r2, [pc, #44]	; (8000300 <NVIC_Disable+0xc4>)
 80002d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002d6:	6013      	str	r3, [r2, #0]
		break;
 80002d8:	e00d      	b.n	80002f6 <NVIC_Disable+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI9_5_Disable();
 80002da:	4b09      	ldr	r3, [pc, #36]	; (8000300 <NVIC_Disable+0xc4>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	4a08      	ldr	r2, [pc, #32]	; (8000300 <NVIC_Disable+0xc4>)
 80002e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80002e4:	6013      	str	r3, [r2, #0]
		break;
 80002e6:	e006      	b.n	80002f6 <NVIC_Disable+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI15_10_Disable();
 80002e8:	4b06      	ldr	r3, [pc, #24]	; (8000304 <NVIC_Disable+0xc8>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	4a05      	ldr	r2, [pc, #20]	; (8000304 <NVIC_Disable+0xc8>)
 80002ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002f2:	6013      	str	r3, [r2, #0]
		break;
 80002f4:	bf00      	nop
	}

}
 80002f6:	bf00      	nop
 80002f8:	370c      	adds	r7, #12
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bc80      	pop	{r7}
 80002fe:	4770      	bx	lr
 8000300:	e000e180 	.word	0xe000e180
 8000304:	e000e184 	.word	0xe000e184

08000308 <Update_EXTI>:
* @param [in]	: EXTI_Config Set by @ref EXTI_define, @ref EXTI_Trigger_define & @ref EXTI_IRQ_define
* @retval		: None
* Note			: None
*/
static void Update_EXTI(EXTI_PinConfig_t *EXTI_Config)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b084      	sub	sp, #16
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
	//1- Configure GPIO to be AF input -> Floating input
	GPIO_PinConfig_t PinConfig;

	//Update GPIO Pin to be Floating input
	PinConfig.GPIO_PinNumber = EXTI_Config->EXTI_Pin.GPIO_Pin;
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	891b      	ldrh	r3, [r3, #8]
 8000314:	813b      	strh	r3, [r7, #8]
	PinConfig.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000316:	2301      	movs	r3, #1
 8000318:	72bb      	strb	r3, [r7, #10]
	MCAL_GPIO_Init(EXTI_Config->EXTI_Pin.GPIO_Port, &PinConfig);
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	685b      	ldr	r3, [r3, #4]
 800031e:	f107 0208 	add.w	r2, r7, #8
 8000322:	4611      	mov	r1, r2
 8000324:	4618      	mov	r0, r3
 8000326:	f000 fa58 	bl	80007da <MCAL_GPIO_Init>

	//2- Update AFIO to route between EXTI line with Port A | B | C | D
	uint8_t AFIO_EXTICR_index = EXTI_Config->EXTI_Pin.ETI_InputLineNumber / 4;
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	881b      	ldrh	r3, [r3, #0]
 800032e:	089b      	lsrs	r3, r3, #2
 8000330:	b29b      	uxth	r3, r3
 8000332:	73fb      	strb	r3, [r7, #15]
	uint8_t AFIO_EXTICR_position = (EXTI_Config->EXTI_Pin.ETI_InputLineNumber % 4) * 4;
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	881b      	ldrh	r3, [r3, #0]
 8000338:	b2db      	uxtb	r3, r3
 800033a:	f003 0303 	and.w	r3, r3, #3
 800033e:	b2db      	uxtb	r3, r3
 8000340:	009b      	lsls	r3, r3, #2
 8000342:	73bb      	strb	r3, [r7, #14]

	//Clear the 4 bits
	AFIO->EXTICR[AFIO_EXTICR_index] &= ~(0xF << AFIO_EXTICR_position);
 8000344:	4a62      	ldr	r2, [pc, #392]	; (80004d0 <Update_EXTI+0x1c8>)
 8000346:	7bfb      	ldrb	r3, [r7, #15]
 8000348:	3302      	adds	r3, #2
 800034a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800034e:	7bbb      	ldrb	r3, [r7, #14]
 8000350:	210f      	movs	r1, #15
 8000352:	fa01 f303 	lsl.w	r3, r1, r3
 8000356:	43db      	mvns	r3, r3
 8000358:	4618      	mov	r0, r3
 800035a:	495d      	ldr	r1, [pc, #372]	; (80004d0 <Update_EXTI+0x1c8>)
 800035c:	7bfb      	ldrb	r3, [r7, #15]
 800035e:	4002      	ands	r2, r0
 8000360:	3302      	adds	r3, #2
 8000362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	AFIO->EXTICR[AFIO_EXTICR_index] |= (AFIO_GPIO_EXTI_Mapping(EXTI_Config->EXTI_Pin.GPIO_Port) << AFIO_EXTICR_position);
 8000366:	4a5a      	ldr	r2, [pc, #360]	; (80004d0 <Update_EXTI+0x1c8>)
 8000368:	7bfb      	ldrb	r3, [r7, #15]
 800036a:	3302      	adds	r3, #2
 800036c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	685b      	ldr	r3, [r3, #4]
 8000374:	4957      	ldr	r1, [pc, #348]	; (80004d4 <Update_EXTI+0x1cc>)
 8000376:	428b      	cmp	r3, r1
 8000378:	d016      	beq.n	80003a8 <Update_EXTI+0xa0>
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	685b      	ldr	r3, [r3, #4]
 800037e:	4956      	ldr	r1, [pc, #344]	; (80004d8 <Update_EXTI+0x1d0>)
 8000380:	428b      	cmp	r3, r1
 8000382:	d00f      	beq.n	80003a4 <Update_EXTI+0x9c>
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	685b      	ldr	r3, [r3, #4]
 8000388:	4954      	ldr	r1, [pc, #336]	; (80004dc <Update_EXTI+0x1d4>)
 800038a:	428b      	cmp	r3, r1
 800038c:	d008      	beq.n	80003a0 <Update_EXTI+0x98>
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	685b      	ldr	r3, [r3, #4]
 8000392:	4953      	ldr	r1, [pc, #332]	; (80004e0 <Update_EXTI+0x1d8>)
 8000394:	428b      	cmp	r3, r1
 8000396:	d101      	bne.n	800039c <Update_EXTI+0x94>
 8000398:	2303      	movs	r3, #3
 800039a:	e006      	b.n	80003aa <Update_EXTI+0xa2>
 800039c:	2300      	movs	r3, #0
 800039e:	e004      	b.n	80003aa <Update_EXTI+0xa2>
 80003a0:	2302      	movs	r3, #2
 80003a2:	e002      	b.n	80003aa <Update_EXTI+0xa2>
 80003a4:	2301      	movs	r3, #1
 80003a6:	e000      	b.n	80003aa <Update_EXTI+0xa2>
 80003a8:	2300      	movs	r3, #0
 80003aa:	7bb9      	ldrb	r1, [r7, #14]
 80003ac:	408b      	lsls	r3, r1
 80003ae:	4618      	mov	r0, r3
 80003b0:	4947      	ldr	r1, [pc, #284]	; (80004d0 <Update_EXTI+0x1c8>)
 80003b2:	7bfb      	ldrb	r3, [r7, #15]
 80003b4:	4302      	orrs	r2, r0
 80003b6:	3302      	adds	r3, #2
 80003b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	//3- Update Rising/Falling edge
	EXTI->RTSR &= ~(1 << EXTI_Config->EXTI_Pin.ETI_InputLineNumber);
 80003bc:	4b49      	ldr	r3, [pc, #292]	; (80004e4 <Update_EXTI+0x1dc>)
 80003be:	689b      	ldr	r3, [r3, #8]
 80003c0:	687a      	ldr	r2, [r7, #4]
 80003c2:	8812      	ldrh	r2, [r2, #0]
 80003c4:	4611      	mov	r1, r2
 80003c6:	2201      	movs	r2, #1
 80003c8:	408a      	lsls	r2, r1
 80003ca:	43d2      	mvns	r2, r2
 80003cc:	4611      	mov	r1, r2
 80003ce:	4a45      	ldr	r2, [pc, #276]	; (80004e4 <Update_EXTI+0x1dc>)
 80003d0:	400b      	ands	r3, r1
 80003d2:	6093      	str	r3, [r2, #8]
	EXTI->FTSR &= ~(1 << EXTI_Config->EXTI_Pin.ETI_InputLineNumber);
 80003d4:	4b43      	ldr	r3, [pc, #268]	; (80004e4 <Update_EXTI+0x1dc>)
 80003d6:	68db      	ldr	r3, [r3, #12]
 80003d8:	687a      	ldr	r2, [r7, #4]
 80003da:	8812      	ldrh	r2, [r2, #0]
 80003dc:	4611      	mov	r1, r2
 80003de:	2201      	movs	r2, #1
 80003e0:	408a      	lsls	r2, r1
 80003e2:	43d2      	mvns	r2, r2
 80003e4:	4611      	mov	r1, r2
 80003e6:	4a3f      	ldr	r2, [pc, #252]	; (80004e4 <Update_EXTI+0x1dc>)
 80003e8:	400b      	ands	r3, r1
 80003ea:	60d3      	str	r3, [r2, #12]

	if(EXTI_Config->Trigger_Case == EXTI_TRIGGER_RISING)
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	7b1b      	ldrb	r3, [r3, #12]
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d10b      	bne.n	800040c <Update_EXTI+0x104>
	{
		EXTI->RTSR |= (1 << EXTI_Config->EXTI_Pin.ETI_InputLineNumber);
 80003f4:	4b3b      	ldr	r3, [pc, #236]	; (80004e4 <Update_EXTI+0x1dc>)
 80003f6:	689b      	ldr	r3, [r3, #8]
 80003f8:	687a      	ldr	r2, [r7, #4]
 80003fa:	8812      	ldrh	r2, [r2, #0]
 80003fc:	4611      	mov	r1, r2
 80003fe:	2201      	movs	r2, #1
 8000400:	408a      	lsls	r2, r1
 8000402:	4611      	mov	r1, r2
 8000404:	4a37      	ldr	r2, [pc, #220]	; (80004e4 <Update_EXTI+0x1dc>)
 8000406:	430b      	orrs	r3, r1
 8000408:	6093      	str	r3, [r2, #8]
 800040a:	e029      	b.n	8000460 <Update_EXTI+0x158>
	}
	else if(EXTI_Config->Trigger_Case == EXTI_TRIGGER_FALLING)
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	7b1b      	ldrb	r3, [r3, #12]
 8000410:	2b01      	cmp	r3, #1
 8000412:	d10b      	bne.n	800042c <Update_EXTI+0x124>
	{
		EXTI->FTSR |= (1 << EXTI_Config->EXTI_Pin.ETI_InputLineNumber);
 8000414:	4b33      	ldr	r3, [pc, #204]	; (80004e4 <Update_EXTI+0x1dc>)
 8000416:	68db      	ldr	r3, [r3, #12]
 8000418:	687a      	ldr	r2, [r7, #4]
 800041a:	8812      	ldrh	r2, [r2, #0]
 800041c:	4611      	mov	r1, r2
 800041e:	2201      	movs	r2, #1
 8000420:	408a      	lsls	r2, r1
 8000422:	4611      	mov	r1, r2
 8000424:	4a2f      	ldr	r2, [pc, #188]	; (80004e4 <Update_EXTI+0x1dc>)
 8000426:	430b      	orrs	r3, r1
 8000428:	60d3      	str	r3, [r2, #12]
 800042a:	e019      	b.n	8000460 <Update_EXTI+0x158>
	}
	else if(EXTI_Config->Trigger_Case == EXTI_TRIGGER_RISING_FALLING)
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	7b1b      	ldrb	r3, [r3, #12]
 8000430:	2b02      	cmp	r3, #2
 8000432:	d115      	bne.n	8000460 <Update_EXTI+0x158>
	{
		EXTI->RTSR |= (1 << EXTI_Config->EXTI_Pin.ETI_InputLineNumber);
 8000434:	4b2b      	ldr	r3, [pc, #172]	; (80004e4 <Update_EXTI+0x1dc>)
 8000436:	689b      	ldr	r3, [r3, #8]
 8000438:	687a      	ldr	r2, [r7, #4]
 800043a:	8812      	ldrh	r2, [r2, #0]
 800043c:	4611      	mov	r1, r2
 800043e:	2201      	movs	r2, #1
 8000440:	408a      	lsls	r2, r1
 8000442:	4611      	mov	r1, r2
 8000444:	4a27      	ldr	r2, [pc, #156]	; (80004e4 <Update_EXTI+0x1dc>)
 8000446:	430b      	orrs	r3, r1
 8000448:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (1 << EXTI_Config->EXTI_Pin.ETI_InputLineNumber);
 800044a:	4b26      	ldr	r3, [pc, #152]	; (80004e4 <Update_EXTI+0x1dc>)
 800044c:	68db      	ldr	r3, [r3, #12]
 800044e:	687a      	ldr	r2, [r7, #4]
 8000450:	8812      	ldrh	r2, [r2, #0]
 8000452:	4611      	mov	r1, r2
 8000454:	2201      	movs	r2, #1
 8000456:	408a      	lsls	r2, r1
 8000458:	4611      	mov	r1, r2
 800045a:	4a22      	ldr	r2, [pc, #136]	; (80004e4 <Update_EXTI+0x1dc>)
 800045c:	430b      	orrs	r3, r1
 800045e:	60d3      	str	r3, [r2, #12]
	}

	//4- Update IRQ Handling CallBack
	GP_IRQ_CallBack[EXTI_Config->EXTI_Pin.ETI_InputLineNumber] = EXTI_Config->P_IRQ_CallBack;
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	881b      	ldrh	r3, [r3, #0]
 8000464:	4619      	mov	r1, r3
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	691b      	ldr	r3, [r3, #16]
 800046a:	4a1f      	ldr	r2, [pc, #124]	; (80004e8 <Update_EXTI+0x1e0>)
 800046c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	//5- Enable/Disable IRQ EXTI & NVIC
	if(EXTI_Config->IRQ_EN == EXTI_IRQ_ENABLE)
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	7b5b      	ldrb	r3, [r3, #13]
 8000474:	2b01      	cmp	r3, #1
 8000476:	d111      	bne.n	800049c <Update_EXTI+0x194>
	{
		EXTI->IMR |= (1 << EXTI_Config->EXTI_Pin.ETI_InputLineNumber);
 8000478:	4b1a      	ldr	r3, [pc, #104]	; (80004e4 <Update_EXTI+0x1dc>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	687a      	ldr	r2, [r7, #4]
 800047e:	8812      	ldrh	r2, [r2, #0]
 8000480:	4611      	mov	r1, r2
 8000482:	2201      	movs	r2, #1
 8000484:	408a      	lsls	r2, r1
 8000486:	4611      	mov	r1, r2
 8000488:	4a16      	ldr	r2, [pc, #88]	; (80004e4 <Update_EXTI+0x1dc>)
 800048a:	430b      	orrs	r3, r1
 800048c:	6013      	str	r3, [r2, #0]
		NVIC_Enable(EXTI_Config->EXTI_Pin.ETI_InputLineNumber);
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	881b      	ldrh	r3, [r3, #0]
 8000492:	b2db      	uxtb	r3, r3
 8000494:	4618      	mov	r0, r3
 8000496:	f7ff fe6b 	bl	8000170 <NVIC_Enable>
	else if(EXTI_Config->IRQ_EN == EXTI_IRQ_DISABLE)
	{
		EXTI->IMR &= ~(1 << EXTI_Config->EXTI_Pin.ETI_InputLineNumber);
		NVIC_Disable(EXTI_Config->EXTI_Pin.ETI_InputLineNumber);
	}
}
 800049a:	e015      	b.n	80004c8 <Update_EXTI+0x1c0>
	else if(EXTI_Config->IRQ_EN == EXTI_IRQ_DISABLE)
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	7b5b      	ldrb	r3, [r3, #13]
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d111      	bne.n	80004c8 <Update_EXTI+0x1c0>
		EXTI->IMR &= ~(1 << EXTI_Config->EXTI_Pin.ETI_InputLineNumber);
 80004a4:	4b0f      	ldr	r3, [pc, #60]	; (80004e4 <Update_EXTI+0x1dc>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	687a      	ldr	r2, [r7, #4]
 80004aa:	8812      	ldrh	r2, [r2, #0]
 80004ac:	4611      	mov	r1, r2
 80004ae:	2201      	movs	r2, #1
 80004b0:	408a      	lsls	r2, r1
 80004b2:	43d2      	mvns	r2, r2
 80004b4:	4611      	mov	r1, r2
 80004b6:	4a0b      	ldr	r2, [pc, #44]	; (80004e4 <Update_EXTI+0x1dc>)
 80004b8:	400b      	ands	r3, r1
 80004ba:	6013      	str	r3, [r2, #0]
		NVIC_Disable(EXTI_Config->EXTI_Pin.ETI_InputLineNumber);
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	881b      	ldrh	r3, [r3, #0]
 80004c0:	b2db      	uxtb	r3, r3
 80004c2:	4618      	mov	r0, r3
 80004c4:	f7ff feba 	bl	800023c <NVIC_Disable>
}
 80004c8:	bf00      	nop
 80004ca:	3710      	adds	r7, #16
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	40010000 	.word	0x40010000
 80004d4:	40010800 	.word	0x40010800
 80004d8:	40010c00 	.word	0x40010c00
 80004dc:	40011000 	.word	0x40011000
 80004e0:	40011400 	.word	0x40011400
 80004e4:	40010400 	.word	0x40010400
 80004e8:	20000024 	.word	0x20000024

080004ec <MCAL_EXTI_GPIO_Init>:
* Note			: STM32F103C6 MCU has GPIO A:E modules
* 				  but LQFP48 has only GPIO A,B,part of C/D exported as external pins for MCU
* 				  also mandatory to enable RCC Clock for AFIO & the corresponding GPIO
*/
void MCAL_EXTI_GPIO_Init(EXTI_PinConfig_t *EXTI_Config)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
	Update_EXTI(EXTI_Config);
 80004f4:	6878      	ldr	r0, [r7, #4]
 80004f6:	f7ff ff07 	bl	8000308 <Update_EXTI>
}
 80004fa:	bf00      	nop
 80004fc:	3708      	adds	r7, #8
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
	...

08000504 <EXTI0_IRQHandler>:
* ===============================================
* ISR Functions
* ===============================================
*/
void EXTI0_IRQHandler(void)  /* EXTI Line0 interrupt */
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
	//Cleared by writing a ‘1’ into the bit Pending register (EXTI_PR)
	EXTI->PR |= (1 << 0);
 8000508:	4b05      	ldr	r3, [pc, #20]	; (8000520 <EXTI0_IRQHandler+0x1c>)
 800050a:	695b      	ldr	r3, [r3, #20]
 800050c:	4a04      	ldr	r2, [pc, #16]	; (8000520 <EXTI0_IRQHandler+0x1c>)
 800050e:	f043 0301 	orr.w	r3, r3, #1
 8000512:	6153      	str	r3, [r2, #20]

	//Call IRQ CallBack
	GP_IRQ_CallBack[0]();
 8000514:	4b03      	ldr	r3, [pc, #12]	; (8000524 <EXTI0_IRQHandler+0x20>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4798      	blx	r3
}
 800051a:	bf00      	nop
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	40010400 	.word	0x40010400
 8000524:	20000024 	.word	0x20000024

08000528 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)  /* EXTI Line1 interrupt */
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
	//Cleared by writing a ‘1’ into the bit Pending register (EXTI_PR)
	EXTI->PR |= (1 << 1);
 800052c:	4b05      	ldr	r3, [pc, #20]	; (8000544 <EXTI1_IRQHandler+0x1c>)
 800052e:	695b      	ldr	r3, [r3, #20]
 8000530:	4a04      	ldr	r2, [pc, #16]	; (8000544 <EXTI1_IRQHandler+0x1c>)
 8000532:	f043 0302 	orr.w	r3, r3, #2
 8000536:	6153      	str	r3, [r2, #20]

	//Call IRQ CallBack
	GP_IRQ_CallBack[1]();
 8000538:	4b03      	ldr	r3, [pc, #12]	; (8000548 <EXTI1_IRQHandler+0x20>)
 800053a:	685b      	ldr	r3, [r3, #4]
 800053c:	4798      	blx	r3
}
 800053e:	bf00      	nop
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	40010400 	.word	0x40010400
 8000548:	20000024 	.word	0x20000024

0800054c <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)  /* EXTI Line2 interrupt */
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
	//Cleared by writing a ‘1’ into the bit Pending register (EXTI_PR)
	EXTI->PR |= (1 << 2);
 8000550:	4b05      	ldr	r3, [pc, #20]	; (8000568 <EXTI2_IRQHandler+0x1c>)
 8000552:	695b      	ldr	r3, [r3, #20]
 8000554:	4a04      	ldr	r2, [pc, #16]	; (8000568 <EXTI2_IRQHandler+0x1c>)
 8000556:	f043 0304 	orr.w	r3, r3, #4
 800055a:	6153      	str	r3, [r2, #20]

	//Call IRQ CallBack
	GP_IRQ_CallBack[2]();
 800055c:	4b03      	ldr	r3, [pc, #12]	; (800056c <EXTI2_IRQHandler+0x20>)
 800055e:	689b      	ldr	r3, [r3, #8]
 8000560:	4798      	blx	r3
}
 8000562:	bf00      	nop
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	40010400 	.word	0x40010400
 800056c:	20000024 	.word	0x20000024

08000570 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)  /* EXTI Line3 interrupt  */
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
	//Cleared by writing a ‘1’ into the bit Pending register (EXTI_PR)
	EXTI->PR |= (1 << 3);
 8000574:	4b05      	ldr	r3, [pc, #20]	; (800058c <EXTI3_IRQHandler+0x1c>)
 8000576:	695b      	ldr	r3, [r3, #20]
 8000578:	4a04      	ldr	r2, [pc, #16]	; (800058c <EXTI3_IRQHandler+0x1c>)
 800057a:	f043 0308 	orr.w	r3, r3, #8
 800057e:	6153      	str	r3, [r2, #20]

	//Call IRQ CallBack
	GP_IRQ_CallBack[3]();
 8000580:	4b03      	ldr	r3, [pc, #12]	; (8000590 <EXTI3_IRQHandler+0x20>)
 8000582:	68db      	ldr	r3, [r3, #12]
 8000584:	4798      	blx	r3
}
 8000586:	bf00      	nop
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	40010400 	.word	0x40010400
 8000590:	20000024 	.word	0x20000024

08000594 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)  /* EXTI Line4 interrupt  */
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
	//Cleared by writing a ‘1’ into the bit Pending register (EXTI_PR)
	EXTI->PR |= (1 << 4);
 8000598:	4b05      	ldr	r3, [pc, #20]	; (80005b0 <EXTI4_IRQHandler+0x1c>)
 800059a:	695b      	ldr	r3, [r3, #20]
 800059c:	4a04      	ldr	r2, [pc, #16]	; (80005b0 <EXTI4_IRQHandler+0x1c>)
 800059e:	f043 0310 	orr.w	r3, r3, #16
 80005a2:	6153      	str	r3, [r2, #20]

	//Call IRQ CallBack
	GP_IRQ_CallBack[4]();
 80005a4:	4b03      	ldr	r3, [pc, #12]	; (80005b4 <EXTI4_IRQHandler+0x20>)
 80005a6:	691b      	ldr	r3, [r3, #16]
 80005a8:	4798      	blx	r3
}
 80005aa:	bf00      	nop
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40010400 	.word	0x40010400
 80005b4:	20000024 	.word	0x20000024

080005b8 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void) /* EXTI Line[9:5] interrupts */
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
	if(EXTI->PR & (1 << 5)) { EXTI->PR |= (1 << 5);	GP_IRQ_CallBack[5](); }
 80005bc:	4b26      	ldr	r3, [pc, #152]	; (8000658 <EXTI9_5_IRQHandler+0xa0>)
 80005be:	695b      	ldr	r3, [r3, #20]
 80005c0:	f003 0320 	and.w	r3, r3, #32
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d008      	beq.n	80005da <EXTI9_5_IRQHandler+0x22>
 80005c8:	4b23      	ldr	r3, [pc, #140]	; (8000658 <EXTI9_5_IRQHandler+0xa0>)
 80005ca:	695b      	ldr	r3, [r3, #20]
 80005cc:	4a22      	ldr	r2, [pc, #136]	; (8000658 <EXTI9_5_IRQHandler+0xa0>)
 80005ce:	f043 0320 	orr.w	r3, r3, #32
 80005d2:	6153      	str	r3, [r2, #20]
 80005d4:	4b21      	ldr	r3, [pc, #132]	; (800065c <EXTI9_5_IRQHandler+0xa4>)
 80005d6:	695b      	ldr	r3, [r3, #20]
 80005d8:	4798      	blx	r3
	if(EXTI->PR & (1 << 6)) { EXTI->PR |= (1 << 6);	GP_IRQ_CallBack[6](); }
 80005da:	4b1f      	ldr	r3, [pc, #124]	; (8000658 <EXTI9_5_IRQHandler+0xa0>)
 80005dc:	695b      	ldr	r3, [r3, #20]
 80005de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d008      	beq.n	80005f8 <EXTI9_5_IRQHandler+0x40>
 80005e6:	4b1c      	ldr	r3, [pc, #112]	; (8000658 <EXTI9_5_IRQHandler+0xa0>)
 80005e8:	695b      	ldr	r3, [r3, #20]
 80005ea:	4a1b      	ldr	r2, [pc, #108]	; (8000658 <EXTI9_5_IRQHandler+0xa0>)
 80005ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005f0:	6153      	str	r3, [r2, #20]
 80005f2:	4b1a      	ldr	r3, [pc, #104]	; (800065c <EXTI9_5_IRQHandler+0xa4>)
 80005f4:	699b      	ldr	r3, [r3, #24]
 80005f6:	4798      	blx	r3
	if(EXTI->PR & (1 << 7)) { EXTI->PR |= (1 << 7);	GP_IRQ_CallBack[7](); }
 80005f8:	4b17      	ldr	r3, [pc, #92]	; (8000658 <EXTI9_5_IRQHandler+0xa0>)
 80005fa:	695b      	ldr	r3, [r3, #20]
 80005fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000600:	2b00      	cmp	r3, #0
 8000602:	d008      	beq.n	8000616 <EXTI9_5_IRQHandler+0x5e>
 8000604:	4b14      	ldr	r3, [pc, #80]	; (8000658 <EXTI9_5_IRQHandler+0xa0>)
 8000606:	695b      	ldr	r3, [r3, #20]
 8000608:	4a13      	ldr	r2, [pc, #76]	; (8000658 <EXTI9_5_IRQHandler+0xa0>)
 800060a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800060e:	6153      	str	r3, [r2, #20]
 8000610:	4b12      	ldr	r3, [pc, #72]	; (800065c <EXTI9_5_IRQHandler+0xa4>)
 8000612:	69db      	ldr	r3, [r3, #28]
 8000614:	4798      	blx	r3
	if(EXTI->PR & (1 << 8)) { EXTI->PR |= (1 << 8);	GP_IRQ_CallBack[8](); }
 8000616:	4b10      	ldr	r3, [pc, #64]	; (8000658 <EXTI9_5_IRQHandler+0xa0>)
 8000618:	695b      	ldr	r3, [r3, #20]
 800061a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800061e:	2b00      	cmp	r3, #0
 8000620:	d008      	beq.n	8000634 <EXTI9_5_IRQHandler+0x7c>
 8000622:	4b0d      	ldr	r3, [pc, #52]	; (8000658 <EXTI9_5_IRQHandler+0xa0>)
 8000624:	695b      	ldr	r3, [r3, #20]
 8000626:	4a0c      	ldr	r2, [pc, #48]	; (8000658 <EXTI9_5_IRQHandler+0xa0>)
 8000628:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800062c:	6153      	str	r3, [r2, #20]
 800062e:	4b0b      	ldr	r3, [pc, #44]	; (800065c <EXTI9_5_IRQHandler+0xa4>)
 8000630:	6a1b      	ldr	r3, [r3, #32]
 8000632:	4798      	blx	r3
	if(EXTI->PR & (1 << 9)) { EXTI->PR |= (1 << 9);	GP_IRQ_CallBack[9](); }
 8000634:	4b08      	ldr	r3, [pc, #32]	; (8000658 <EXTI9_5_IRQHandler+0xa0>)
 8000636:	695b      	ldr	r3, [r3, #20]
 8000638:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800063c:	2b00      	cmp	r3, #0
 800063e:	d008      	beq.n	8000652 <EXTI9_5_IRQHandler+0x9a>
 8000640:	4b05      	ldr	r3, [pc, #20]	; (8000658 <EXTI9_5_IRQHandler+0xa0>)
 8000642:	695b      	ldr	r3, [r3, #20]
 8000644:	4a04      	ldr	r2, [pc, #16]	; (8000658 <EXTI9_5_IRQHandler+0xa0>)
 8000646:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800064a:	6153      	str	r3, [r2, #20]
 800064c:	4b03      	ldr	r3, [pc, #12]	; (800065c <EXTI9_5_IRQHandler+0xa4>)
 800064e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000650:	4798      	blx	r3
}
 8000652:	bf00      	nop
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40010400 	.word	0x40010400
 800065c:	20000024 	.word	0x20000024

08000660 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void) /* EXTI Line[15:10] interrupts */
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
	if(EXTI->PR & (1 << 10)) { EXTI->PR |= (1 << 10);	GP_IRQ_CallBack[10](); }
 8000664:	4b2d      	ldr	r3, [pc, #180]	; (800071c <EXTI15_10_IRQHandler+0xbc>)
 8000666:	695b      	ldr	r3, [r3, #20]
 8000668:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800066c:	2b00      	cmp	r3, #0
 800066e:	d008      	beq.n	8000682 <EXTI15_10_IRQHandler+0x22>
 8000670:	4b2a      	ldr	r3, [pc, #168]	; (800071c <EXTI15_10_IRQHandler+0xbc>)
 8000672:	695b      	ldr	r3, [r3, #20]
 8000674:	4a29      	ldr	r2, [pc, #164]	; (800071c <EXTI15_10_IRQHandler+0xbc>)
 8000676:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800067a:	6153      	str	r3, [r2, #20]
 800067c:	4b28      	ldr	r3, [pc, #160]	; (8000720 <EXTI15_10_IRQHandler+0xc0>)
 800067e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000680:	4798      	blx	r3
	if(EXTI->PR & (1 << 11)) { EXTI->PR |= (1 << 11);	GP_IRQ_CallBack[11](); }
 8000682:	4b26      	ldr	r3, [pc, #152]	; (800071c <EXTI15_10_IRQHandler+0xbc>)
 8000684:	695b      	ldr	r3, [r3, #20]
 8000686:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800068a:	2b00      	cmp	r3, #0
 800068c:	d008      	beq.n	80006a0 <EXTI15_10_IRQHandler+0x40>
 800068e:	4b23      	ldr	r3, [pc, #140]	; (800071c <EXTI15_10_IRQHandler+0xbc>)
 8000690:	695b      	ldr	r3, [r3, #20]
 8000692:	4a22      	ldr	r2, [pc, #136]	; (800071c <EXTI15_10_IRQHandler+0xbc>)
 8000694:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000698:	6153      	str	r3, [r2, #20]
 800069a:	4b21      	ldr	r3, [pc, #132]	; (8000720 <EXTI15_10_IRQHandler+0xc0>)
 800069c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800069e:	4798      	blx	r3
	if(EXTI->PR & (1 << 12)) { EXTI->PR |= (1 << 12);	GP_IRQ_CallBack[12](); }
 80006a0:	4b1e      	ldr	r3, [pc, #120]	; (800071c <EXTI15_10_IRQHandler+0xbc>)
 80006a2:	695b      	ldr	r3, [r3, #20]
 80006a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d008      	beq.n	80006be <EXTI15_10_IRQHandler+0x5e>
 80006ac:	4b1b      	ldr	r3, [pc, #108]	; (800071c <EXTI15_10_IRQHandler+0xbc>)
 80006ae:	695b      	ldr	r3, [r3, #20]
 80006b0:	4a1a      	ldr	r2, [pc, #104]	; (800071c <EXTI15_10_IRQHandler+0xbc>)
 80006b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006b6:	6153      	str	r3, [r2, #20]
 80006b8:	4b19      	ldr	r3, [pc, #100]	; (8000720 <EXTI15_10_IRQHandler+0xc0>)
 80006ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006bc:	4798      	blx	r3
	if(EXTI->PR & (1 << 13)) { EXTI->PR |= (1 << 13);	GP_IRQ_CallBack[13](); }
 80006be:	4b17      	ldr	r3, [pc, #92]	; (800071c <EXTI15_10_IRQHandler+0xbc>)
 80006c0:	695b      	ldr	r3, [r3, #20]
 80006c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d008      	beq.n	80006dc <EXTI15_10_IRQHandler+0x7c>
 80006ca:	4b14      	ldr	r3, [pc, #80]	; (800071c <EXTI15_10_IRQHandler+0xbc>)
 80006cc:	695b      	ldr	r3, [r3, #20]
 80006ce:	4a13      	ldr	r2, [pc, #76]	; (800071c <EXTI15_10_IRQHandler+0xbc>)
 80006d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80006d4:	6153      	str	r3, [r2, #20]
 80006d6:	4b12      	ldr	r3, [pc, #72]	; (8000720 <EXTI15_10_IRQHandler+0xc0>)
 80006d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006da:	4798      	blx	r3
	if(EXTI->PR & (1 << 14)) { EXTI->PR |= (1 << 14);	GP_IRQ_CallBack[14](); }
 80006dc:	4b0f      	ldr	r3, [pc, #60]	; (800071c <EXTI15_10_IRQHandler+0xbc>)
 80006de:	695b      	ldr	r3, [r3, #20]
 80006e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d008      	beq.n	80006fa <EXTI15_10_IRQHandler+0x9a>
 80006e8:	4b0c      	ldr	r3, [pc, #48]	; (800071c <EXTI15_10_IRQHandler+0xbc>)
 80006ea:	695b      	ldr	r3, [r3, #20]
 80006ec:	4a0b      	ldr	r2, [pc, #44]	; (800071c <EXTI15_10_IRQHandler+0xbc>)
 80006ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006f2:	6153      	str	r3, [r2, #20]
 80006f4:	4b0a      	ldr	r3, [pc, #40]	; (8000720 <EXTI15_10_IRQHandler+0xc0>)
 80006f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006f8:	4798      	blx	r3
	if(EXTI->PR & (1 << 15)) { EXTI->PR |= (1 << 15);	GP_IRQ_CallBack[15](); }
 80006fa:	4b08      	ldr	r3, [pc, #32]	; (800071c <EXTI15_10_IRQHandler+0xbc>)
 80006fc:	695b      	ldr	r3, [r3, #20]
 80006fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000702:	2b00      	cmp	r3, #0
 8000704:	d008      	beq.n	8000718 <EXTI15_10_IRQHandler+0xb8>
 8000706:	4b05      	ldr	r3, [pc, #20]	; (800071c <EXTI15_10_IRQHandler+0xbc>)
 8000708:	695b      	ldr	r3, [r3, #20]
 800070a:	4a04      	ldr	r2, [pc, #16]	; (800071c <EXTI15_10_IRQHandler+0xbc>)
 800070c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000710:	6153      	str	r3, [r2, #20]
 8000712:	4b03      	ldr	r3, [pc, #12]	; (8000720 <EXTI15_10_IRQHandler+0xc0>)
 8000714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000716:	4798      	blx	r3
}
 8000718:	bf00      	nop
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40010400 	.word	0x40010400
 8000720:	20000024 	.word	0x20000024

08000724 <Get_CRLH_Position>:
* @param [in]	: PinNumber specifies the port bit. Set by @ref GPIO_PINS_define
* @retval		: Position of the first bit for specific pin
* Note			: None
*/
uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 8000724:	b480      	push	{r7}
 8000726:	b085      	sub	sp, #20
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	80fb      	strh	r3, [r7, #6]
	uint8_t position;
	switch(PinNumber)
 800072e:	88fb      	ldrh	r3, [r7, #6]
 8000730:	2b80      	cmp	r3, #128	; 0x80
 8000732:	d049      	beq.n	80007c8 <Get_CRLH_Position+0xa4>
 8000734:	2b80      	cmp	r3, #128	; 0x80
 8000736:	dc11      	bgt.n	800075c <Get_CRLH_Position+0x38>
 8000738:	2b08      	cmp	r3, #8
 800073a:	d039      	beq.n	80007b0 <Get_CRLH_Position+0x8c>
 800073c:	2b08      	cmp	r3, #8
 800073e:	dc06      	bgt.n	800074e <Get_CRLH_Position+0x2a>
 8000740:	2b02      	cmp	r3, #2
 8000742:	d02f      	beq.n	80007a4 <Get_CRLH_Position+0x80>
 8000744:	2b04      	cmp	r3, #4
 8000746:	d030      	beq.n	80007aa <Get_CRLH_Position+0x86>
 8000748:	2b01      	cmp	r3, #1
 800074a:	d028      	beq.n	800079e <Get_CRLH_Position+0x7a>
 800074c:	e03f      	b.n	80007ce <Get_CRLH_Position+0xaa>
 800074e:	2b20      	cmp	r3, #32
 8000750:	d034      	beq.n	80007bc <Get_CRLH_Position+0x98>
 8000752:	2b40      	cmp	r3, #64	; 0x40
 8000754:	d035      	beq.n	80007c2 <Get_CRLH_Position+0x9e>
 8000756:	2b10      	cmp	r3, #16
 8000758:	d02d      	beq.n	80007b6 <Get_CRLH_Position+0x92>
 800075a:	e038      	b.n	80007ce <Get_CRLH_Position+0xaa>
 800075c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000760:	d026      	beq.n	80007b0 <Get_CRLH_Position+0x8c>
 8000762:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000766:	dc09      	bgt.n	800077c <Get_CRLH_Position+0x58>
 8000768:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800076c:	d01a      	beq.n	80007a4 <Get_CRLH_Position+0x80>
 800076e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000772:	d01a      	beq.n	80007aa <Get_CRLH_Position+0x86>
 8000774:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000778:	d011      	beq.n	800079e <Get_CRLH_Position+0x7a>
 800077a:	e028      	b.n	80007ce <Get_CRLH_Position+0xaa>
 800077c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000780:	d01c      	beq.n	80007bc <Get_CRLH_Position+0x98>
 8000782:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000786:	dc03      	bgt.n	8000790 <Get_CRLH_Position+0x6c>
 8000788:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800078c:	d013      	beq.n	80007b6 <Get_CRLH_Position+0x92>
 800078e:	e01e      	b.n	80007ce <Get_CRLH_Position+0xaa>
 8000790:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000794:	d015      	beq.n	80007c2 <Get_CRLH_Position+0x9e>
 8000796:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800079a:	d015      	beq.n	80007c8 <Get_CRLH_Position+0xa4>
 800079c:	e017      	b.n	80007ce <Get_CRLH_Position+0xaa>
	{
	case GPIO_PIN_0:
	case GPIO_PIN_8:
		position = 0;
 800079e:	2300      	movs	r3, #0
 80007a0:	73fb      	strb	r3, [r7, #15]
		break;
 80007a2:	e014      	b.n	80007ce <Get_CRLH_Position+0xaa>

	case GPIO_PIN_1:
	case GPIO_PIN_9:
		position = 4;
 80007a4:	2304      	movs	r3, #4
 80007a6:	73fb      	strb	r3, [r7, #15]
		break;
 80007a8:	e011      	b.n	80007ce <Get_CRLH_Position+0xaa>

	case GPIO_PIN_2:
	case GPIO_PIN_10:
		position = 8;
 80007aa:	2308      	movs	r3, #8
 80007ac:	73fb      	strb	r3, [r7, #15]
		break;
 80007ae:	e00e      	b.n	80007ce <Get_CRLH_Position+0xaa>

	case GPIO_PIN_3:
	case GPIO_PIN_11:
		position = 12;
 80007b0:	230c      	movs	r3, #12
 80007b2:	73fb      	strb	r3, [r7, #15]
		break;
 80007b4:	e00b      	b.n	80007ce <Get_CRLH_Position+0xaa>

	case GPIO_PIN_4:
	case GPIO_PIN_12:
		position = 16;
 80007b6:	2310      	movs	r3, #16
 80007b8:	73fb      	strb	r3, [r7, #15]
		break;
 80007ba:	e008      	b.n	80007ce <Get_CRLH_Position+0xaa>

	case GPIO_PIN_5:
	case GPIO_PIN_13:
		position = 20;
 80007bc:	2314      	movs	r3, #20
 80007be:	73fb      	strb	r3, [r7, #15]
		break;
 80007c0:	e005      	b.n	80007ce <Get_CRLH_Position+0xaa>

	case GPIO_PIN_6:
	case GPIO_PIN_14:
		position = 24;
 80007c2:	2318      	movs	r3, #24
 80007c4:	73fb      	strb	r3, [r7, #15]
		break;
 80007c6:	e002      	b.n	80007ce <Get_CRLH_Position+0xaa>

	case GPIO_PIN_7:
	case GPIO_PIN_15:
		position = 28;
 80007c8:	231c      	movs	r3, #28
 80007ca:	73fb      	strb	r3, [r7, #15]
		break;
 80007cc:	bf00      	nop
	}

	return position;
 80007ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80007d0:	4618      	mov	r0, r3
 80007d2:	3714      	adds	r7, #20
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bc80      	pop	{r7}
 80007d8:	4770      	bx	lr

080007da <MCAL_GPIO_Init>:
* @retval		: None
* Note			: STM32F103C6 MCU has GPIO A:E modules
* 				  but LQFP48 has only GPIO A,B,part of C/D exported as external pins for MCU
*/
void MCAL_GPIO_Init	(GPIO_TypeDef *GPIOx, GPIO_PinConfig_t *PinConfig)
{
 80007da:	b590      	push	{r4, r7, lr}
 80007dc:	b085      	sub	sp, #20
 80007de:	af00      	add	r7, sp, #0
 80007e0:	6078      	str	r0, [r7, #4]
 80007e2:	6039      	str	r1, [r7, #0]
	volatile uint32_t* Configregister = NULL;
 80007e4:	2300      	movs	r3, #0
 80007e6:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_Config = 0;
 80007e8:	2300      	movs	r3, #0
 80007ea:	73fb      	strb	r3, [r7, #15]
	//Port configuration register low (GPIOx_CRL) Configure pins 0:7
	//Port configuration register high (GPIOx_CRH) Configure pins 8:15
	Configregister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8)? &GPIOx->CRL : &GPIOx->CRH;
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	881b      	ldrh	r3, [r3, #0]
 80007f0:	2bff      	cmp	r3, #255	; 0xff
 80007f2:	d801      	bhi.n	80007f8 <MCAL_GPIO_Init+0x1e>
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	e001      	b.n	80007fc <MCAL_GPIO_Init+0x22>
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	3304      	adds	r3, #4
 80007fc:	60bb      	str	r3, [r7, #8]

	//Clear CNFy[1:0] MODEy[1:0]
	*Configregister &= ~(0xF << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	881b      	ldrh	r3, [r3, #0]
 8000802:	4618      	mov	r0, r3
 8000804:	f7ff ff8e 	bl	8000724 <Get_CRLH_Position>
 8000808:	4603      	mov	r3, r0
 800080a:	461a      	mov	r2, r3
 800080c:	230f      	movs	r3, #15
 800080e:	4093      	lsls	r3, r2
 8000810:	43da      	mvns	r2, r3
 8000812:	68bb      	ldr	r3, [r7, #8]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	401a      	ands	r2, r3
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	601a      	str	r2, [r3, #0]

	// if pin is output
	if(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD || PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP ||
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	789b      	ldrb	r3, [r3, #2]
 8000820:	2b07      	cmp	r3, #7
 8000822:	d00b      	beq.n	800083c <MCAL_GPIO_Init+0x62>
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	789b      	ldrb	r3, [r3, #2]
 8000828:	2b06      	cmp	r3, #6
 800082a:	d007      	beq.n	800083c <MCAL_GPIO_Init+0x62>
	   PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD || PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP)
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	789b      	ldrb	r3, [r3, #2]
	if(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD || PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP ||
 8000830:	2b05      	cmp	r3, #5
 8000832:	d003      	beq.n	800083c <MCAL_GPIO_Init+0x62>
	   PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD || PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP)
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	789b      	ldrb	r3, [r3, #2]
 8000838:	2b04      	cmp	r3, #4
 800083a:	d10e      	bne.n	800085a <MCAL_GPIO_Init+0x80>
	{
		PIN_Config = ( (((PinConfig->GPIO_MODE - 4) << 2) | (PinConfig->GPIO_Output_Speed)) & 0x0F );
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	789b      	ldrb	r3, [r3, #2]
 8000840:	3b04      	subs	r3, #4
 8000842:	009b      	lsls	r3, r3, #2
 8000844:	b25a      	sxtb	r2, r3
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	78db      	ldrb	r3, [r3, #3]
 800084a:	b25b      	sxtb	r3, r3
 800084c:	4313      	orrs	r3, r2
 800084e:	b25b      	sxtb	r3, r3
 8000850:	b2db      	uxtb	r3, r3
 8000852:	f003 030f 	and.w	r3, r3, #15
 8000856:	73fb      	strb	r3, [r7, #15]
 8000858:	e02c      	b.n	80008b4 <MCAL_GPIO_Init+0xda>
	}
	else
	{
		if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO || PinConfig->GPIO_MODE == GPIO_MODE_ANALOG)
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	789b      	ldrb	r3, [r3, #2]
 800085e:	2b01      	cmp	r3, #1
 8000860:	d003      	beq.n	800086a <MCAL_GPIO_Init+0x90>
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	789b      	ldrb	r3, [r3, #2]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d107      	bne.n	800087a <MCAL_GPIO_Init+0xa0>
		{
			PIN_Config = ( (PinConfig->GPIO_MODE << 2) & 0x0F );
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	789b      	ldrb	r3, [r3, #2]
 800086e:	009b      	lsls	r3, r3, #2
 8000870:	b2db      	uxtb	r3, r3
 8000872:	f003 030f 	and.w	r3, r3, #15
 8000876:	73fb      	strb	r3, [r7, #15]
 8000878:	e01c      	b.n	80008b4 <MCAL_GPIO_Init+0xda>
		}
		else if(PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT) //Consider it as input floating
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	789b      	ldrb	r3, [r3, #2]
 800087e:	2b08      	cmp	r3, #8
 8000880:	d102      	bne.n	8000888 <MCAL_GPIO_Init+0xae>
		{
			PIN_Config = ( (GPIO_MODE_INPUT_FLO << 2) & 0x0F );
 8000882:	2304      	movs	r3, #4
 8000884:	73fb      	strb	r3, [r7, #15]
 8000886:	e015      	b.n	80008b4 <MCAL_GPIO_Init+0xda>
		}
		else //pull-up & pull-down
		{
			PIN_Config = ( (GPIO_MODE_INPUT_PU << 2) & 0x0F );
 8000888:	2308      	movs	r3, #8
 800088a:	73fb      	strb	r3, [r7, #15]
			if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	789b      	ldrb	r3, [r3, #2]
 8000890:	2b02      	cmp	r3, #2
 8000892:	d107      	bne.n	80008a4 <MCAL_GPIO_Init+0xca>
			{
				//PxODR register = 1 Input pull-up : Table 20. Port bit configuration table
				GPIOx->ODR |= PinConfig->GPIO_PinNumber;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	68db      	ldr	r3, [r3, #12]
 8000898:	683a      	ldr	r2, [r7, #0]
 800089a:	8812      	ldrh	r2, [r2, #0]
 800089c:	431a      	orrs	r2, r3
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	60da      	str	r2, [r3, #12]
 80008a2:	e007      	b.n	80008b4 <MCAL_GPIO_Init+0xda>
			}
			else
			{
				//PxODR register = 0 Input pull-down : Table 20. Port bit configuration table
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	68db      	ldr	r3, [r3, #12]
 80008a8:	683a      	ldr	r2, [r7, #0]
 80008aa:	8812      	ldrh	r2, [r2, #0]
 80008ac:	43d2      	mvns	r2, r2
 80008ae:	401a      	ands	r2, r3
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	60da      	str	r2, [r3, #12]
			}
		}
	}
	//Write on CRL or CRH
	*Configregister |= ( PIN_Config << Get_CRLH_Position(PinConfig->GPIO_PinNumber) );
 80008b4:	7bfc      	ldrb	r4, [r7, #15]
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	881b      	ldrh	r3, [r3, #0]
 80008ba:	4618      	mov	r0, r3
 80008bc:	f7ff ff32 	bl	8000724 <Get_CRLH_Position>
 80008c0:	4603      	mov	r3, r0
 80008c2:	fa04 f203 	lsl.w	r2, r4, r3
 80008c6:	68bb      	ldr	r3, [r7, #8]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	431a      	orrs	r2, r3
 80008cc:	68bb      	ldr	r3, [r7, #8]
 80008ce:	601a      	str	r2, [r3, #0]
}
 80008d0:	bf00      	nop
 80008d2:	3714      	adds	r7, #20
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd90      	pop	{r4, r7, pc}

080008d8 <Clock_Init>:
uint32_t _E_PSP_TB;

uint8_t TaskA_flag = 0, TaskB_flag = 0, IRQ_flag = 0;

void Clock_Init(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
	// IO port B clock enable
	RCC_GPIOB_CLK_EN();
 80008dc:	4b07      	ldr	r3, [pc, #28]	; (80008fc <Clock_Init+0x24>)
 80008de:	699b      	ldr	r3, [r3, #24]
 80008e0:	4a06      	ldr	r2, [pc, #24]	; (80008fc <Clock_Init+0x24>)
 80008e2:	f043 0308 	orr.w	r3, r3, #8
 80008e6:	6193      	str	r3, [r2, #24]
	// AFIO clock enable
	RCC_AFIO_CLK_EN();
 80008e8:	4b04      	ldr	r3, [pc, #16]	; (80008fc <Clock_Init+0x24>)
 80008ea:	699b      	ldr	r3, [r3, #24]
 80008ec:	4a03      	ldr	r2, [pc, #12]	; (80008fc <Clock_Init+0x24>)
 80008ee:	f043 0301 	orr.w	r3, r3, #1
 80008f2:	6193      	str	r3, [r2, #24]
}
 80008f4:	bf00      	nop
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bc80      	pop	{r7}
 80008fa:	4770      	bx	lr
 80008fc:	40021000 	.word	0x40021000

08000900 <EXTI9_CallBack>:

void EXTI9_CallBack(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
	if(IRQ_flag == 0)
 8000904:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <EXTI9_CallBack+0x38>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d106      	bne.n	800091a <EXTI9_CallBack+0x1a>
	{
		TaskA_flag = 1;
 800090c:	4b0b      	ldr	r3, [pc, #44]	; (800093c <EXTI9_CallBack+0x3c>)
 800090e:	2201      	movs	r2, #1
 8000910:	701a      	strb	r2, [r3, #0]
		IRQ_flag = 1;
 8000912:	4b09      	ldr	r3, [pc, #36]	; (8000938 <EXTI9_CallBack+0x38>)
 8000914:	2201      	movs	r2, #1
 8000916:	701a      	strb	r2, [r3, #0]
	else if(IRQ_flag == 1)
	{
		TaskB_flag = 1;
		IRQ_flag = 0;
	}
}
 8000918:	e009      	b.n	800092e <EXTI9_CallBack+0x2e>
	else if(IRQ_flag == 1)
 800091a:	4b07      	ldr	r3, [pc, #28]	; (8000938 <EXTI9_CallBack+0x38>)
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	2b01      	cmp	r3, #1
 8000920:	d105      	bne.n	800092e <EXTI9_CallBack+0x2e>
		TaskB_flag = 1;
 8000922:	4b07      	ldr	r3, [pc, #28]	; (8000940 <EXTI9_CallBack+0x40>)
 8000924:	2201      	movs	r2, #1
 8000926:	701a      	strb	r2, [r3, #0]
		IRQ_flag = 0;
 8000928:	4b03      	ldr	r3, [pc, #12]	; (8000938 <EXTI9_CallBack+0x38>)
 800092a:	2200      	movs	r2, #0
 800092c:	701a      	strb	r2, [r3, #0]
}
 800092e:	bf00      	nop
 8000930:	46bd      	mov	sp, r7
 8000932:	bc80      	pop	{r7}
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	20000022 	.word	0x20000022
 800093c:	20000020 	.word	0x20000020
 8000940:	20000021 	.word	0x20000021

08000944 <SVC_Handler>:

void SVC_Handler()
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
	OS_SWITCH_ACCESS_TO_PRIVILEGED();
 8000948:	f3ef 8014 	mrs	r0, CONTROL
 800094c:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8000950:	ea4f 0040 	mov.w	r0, r0, lsl #1
 8000954:	f380 8814 	msr	CONTROL, r0
}
 8000958:	bf00      	nop
 800095a:	46bd      	mov	sp, r7
 800095c:	bc80      	pop	{r7}
 800095e:	4770      	bx	lr

08000960 <TaskA>:

uint32_t TaskA(uint32_t a, uint32_t b, uint32_t c)
{
 8000960:	b480      	push	{r7}
 8000962:	b085      	sub	sp, #20
 8000964:	af00      	add	r7, sp, #0
 8000966:	60f8      	str	r0, [r7, #12]
 8000968:	60b9      	str	r1, [r7, #8]
 800096a:	607a      	str	r2, [r7, #4]
	return a+b+c;
 800096c:	68fa      	ldr	r2, [r7, #12]
 800096e:	68bb      	ldr	r3, [r7, #8]
 8000970:	441a      	add	r2, r3
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4413      	add	r3, r2
}
 8000976:	4618      	mov	r0, r3
 8000978:	3714      	adds	r7, #20
 800097a:	46bd      	mov	sp, r7
 800097c:	bc80      	pop	{r7}
 800097e:	4770      	bx	lr

08000980 <TaskB>:

uint32_t TaskB(uint32_t a, uint32_t b, uint32_t c, uint32_t d)
{
 8000980:	b480      	push	{r7}
 8000982:	b085      	sub	sp, #20
 8000984:	af00      	add	r7, sp, #0
 8000986:	60f8      	str	r0, [r7, #12]
 8000988:	60b9      	str	r1, [r7, #8]
 800098a:	607a      	str	r2, [r7, #4]
 800098c:	603b      	str	r3, [r7, #0]
	return a+b+c+d;
 800098e:	68fa      	ldr	r2, [r7, #12]
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	441a      	add	r2, r3
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	441a      	add	r2, r3
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	4413      	add	r3, r2
}
 800099c:	4618      	mov	r0, r3
 800099e:	3714      	adds	r7, #20
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bc80      	pop	{r7}
 80009a4:	4770      	bx	lr
	...

080009a8 <MainOS>:

void MainOS()
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
	// MAin Stack
	_E_MSP = _S_MSP - MAIN_STACK_SIZE;
 80009ac:	4b33      	ldr	r3, [pc, #204]	; (8000a7c <MainOS+0xd4>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 80009b4:	4a32      	ldr	r2, [pc, #200]	; (8000a80 <MainOS+0xd8>)
 80009b6:	6013      	str	r3, [r2, #0]

	// TaskA Stack
	_S_PSP_TA = _E_MSP - 8;
 80009b8:	4b31      	ldr	r3, [pc, #196]	; (8000a80 <MainOS+0xd8>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	3b08      	subs	r3, #8
 80009be:	4a31      	ldr	r2, [pc, #196]	; (8000a84 <MainOS+0xdc>)
 80009c0:	6013      	str	r3, [r2, #0]
	_E_PSP_TA = _S_PSP_TA - TASKA_STACK_SIZE;
 80009c2:	4b30      	ldr	r3, [pc, #192]	; (8000a84 <MainOS+0xdc>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	3b64      	subs	r3, #100	; 0x64
 80009c8:	4a2f      	ldr	r2, [pc, #188]	; (8000a88 <MainOS+0xe0>)
 80009ca:	6013      	str	r3, [r2, #0]

	// TaskB Stack
	_S_PSP_TB = _E_PSP_TA - 8;
 80009cc:	4b2e      	ldr	r3, [pc, #184]	; (8000a88 <MainOS+0xe0>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	3b08      	subs	r3, #8
 80009d2:	4a2e      	ldr	r2, [pc, #184]	; (8000a8c <MainOS+0xe4>)
 80009d4:	6013      	str	r3, [r2, #0]
	_E_PSP_TB = _S_PSP_TB - TASKB_STACK_SIZE;
 80009d6:	4b2d      	ldr	r3, [pc, #180]	; (8000a8c <MainOS+0xe4>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	3b64      	subs	r3, #100	; 0x64
 80009dc:	4a2c      	ldr	r2, [pc, #176]	; (8000a90 <MainOS+0xe8>)
 80009de:	6013      	str	r3, [r2, #0]

	while(1)
	{
		if(TaskA_flag == 1)
 80009e0:	4b2c      	ldr	r3, [pc, #176]	; (8000a94 <MainOS+0xec>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d121      	bne.n	8000a2c <MainOS+0x84>
		{
			// Set PSP reg to _S_PSP_TA
			OS_SET_PSP(_S_PSP_TA);
 80009e8:	4b26      	ldr	r3, [pc, #152]	; (8000a84 <MainOS+0xdc>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4618      	mov	r0, r3
 80009ee:	f380 8809 	msr	PSP, r0
			// Set SP to PSP
			OS_SWITCH_SP_TO_PSP();
 80009f2:	f3ef 8014 	mrs	r0, CONTROL
 80009f6:	f040 0002 	orr.w	r0, r0, #2
 80009fa:	f380 8814 	msr	CONTROL, r0
			// Switch from privileged to unprivileged access level
			OS_SWITCH_ACCESS_TO_UNPRIVILEGED();
 80009fe:	f3ef 8014 	mrs	r0, CONTROL
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	f380 8814 	msr	CONTROL, r0

			TaskA_flag = TaskA(1, 2, 3);
 8000a0a:	2203      	movs	r2, #3
 8000a0c:	2102      	movs	r1, #2
 8000a0e:	2001      	movs	r0, #1
 8000a10:	f7ff ffa6 	bl	8000960 <TaskA>
 8000a14:	4603      	mov	r3, r0
 8000a16:	b2da      	uxtb	r2, r3
 8000a18:	4b1e      	ldr	r3, [pc, #120]	; (8000a94 <MainOS+0xec>)
 8000a1a:	701a      	strb	r2, [r3, #0]

			// Switch from unprivileged to privileged access level
			OS_GENERATE_EXCEPTION();
 8000a1c:	df03      	svc	3
			// Set SP to MSP
			OS_SWITCH_SP_TO_MSP();
 8000a1e:	f3ef 8014 	mrs	r0, CONTROL
 8000a22:	f000 0005 	and.w	r0, r0, #5
 8000a26:	f380 8814 	msr	CONTROL, r0
 8000a2a:	e7d9      	b.n	80009e0 <MainOS+0x38>
		}
		else if(TaskB_flag == 1)
 8000a2c:	4b1a      	ldr	r3, [pc, #104]	; (8000a98 <MainOS+0xf0>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	2b01      	cmp	r3, #1
 8000a32:	d1d5      	bne.n	80009e0 <MainOS+0x38>
		{
			// Set PSP reg to _S_PSP_TB
			OS_SET_PSP(_S_PSP_TB);
 8000a34:	4b15      	ldr	r3, [pc, #84]	; (8000a8c <MainOS+0xe4>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f380 8809 	msr	PSP, r0
			// Set SP to PSP
			OS_SWITCH_SP_TO_PSP();
 8000a3e:	f3ef 8014 	mrs	r0, CONTROL
 8000a42:	f040 0002 	orr.w	r0, r0, #2
 8000a46:	f380 8814 	msr	CONTROL, r0
			// Switch from privileged to unprivileged access level
			OS_SWITCH_ACCESS_TO_UNPRIVILEGED();
 8000a4a:	f3ef 8014 	mrs	r0, CONTROL
 8000a4e:	f040 0001 	orr.w	r0, r0, #1
 8000a52:	f380 8814 	msr	CONTROL, r0

			TaskB_flag = TaskB(1, 2, 3, 4);
 8000a56:	2304      	movs	r3, #4
 8000a58:	2203      	movs	r2, #3
 8000a5a:	2102      	movs	r1, #2
 8000a5c:	2001      	movs	r0, #1
 8000a5e:	f7ff ff8f 	bl	8000980 <TaskB>
 8000a62:	4603      	mov	r3, r0
 8000a64:	b2da      	uxtb	r2, r3
 8000a66:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <MainOS+0xf0>)
 8000a68:	701a      	strb	r2, [r3, #0]

			// Switch from unprivileged to privileged access level
			OS_GENERATE_EXCEPTION();
 8000a6a:	df03      	svc	3
			// Set SP to MSP
			OS_SWITCH_SP_TO_MSP();
 8000a6c:	f3ef 8014 	mrs	r0, CONTROL
 8000a70:	f000 0005 	and.w	r0, r0, #5
 8000a74:	f380 8814 	msr	CONTROL, r0
		if(TaskA_flag == 1)
 8000a78:	e7b2      	b.n	80009e0 <MainOS+0x38>
 8000a7a:	bf00      	nop
 8000a7c:	20000000 	.word	0x20000000
 8000a80:	20000060 	.word	0x20000060
 8000a84:	20000064 	.word	0x20000064
 8000a88:	20000070 	.word	0x20000070
 8000a8c:	20000068 	.word	0x20000068
 8000a90:	2000006c 	.word	0x2000006c
 8000a94:	20000020 	.word	0x20000020
 8000a98:	20000021 	.word	0x20000021

08000a9c <main>:
		}
	}
}

int main(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b086      	sub	sp, #24
 8000aa0:	af00      	add	r7, sp, #0
	Clock_Init();
 8000aa2:	f7ff ff19 	bl	80008d8 <Clock_Init>

	EXTI_PinConfig_t EXTI_Config;
	// EXTI9 PortB Pin9, Falling edge trigger
	EXTI_Config.EXTI_Pin = EXTI9PB9;
 8000aa6:	4a0b      	ldr	r2, [pc, #44]	; (8000ad4 <main+0x38>)
 8000aa8:	1d3b      	adds	r3, r7, #4
 8000aaa:	ca07      	ldmia	r2, {r0, r1, r2}
 8000aac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	EXTI_Config.Trigger_Case = EXTI_TRIGGER_RISING;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	743b      	strb	r3, [r7, #16]
	EXTI_Config.P_IRQ_CallBack = EXTI9_CallBack;
 8000ab4:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <main+0x3c>)
 8000ab6:	617b      	str	r3, [r7, #20]
	EXTI_Config.IRQ_EN = EXTI_IRQ_ENABLE;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	747b      	strb	r3, [r7, #17]
	MCAL_EXTI_GPIO_Init(&EXTI_Config);
 8000abc:	1d3b      	adds	r3, r7, #4
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f7ff fd14 	bl	80004ec <MCAL_EXTI_GPIO_Init>

	MainOS();
 8000ac4:	f7ff ff70 	bl	80009a8 <MainOS>

	return 0;
 8000ac8:	2300      	movs	r3, #0
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3718      	adds	r7, #24
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	08000b90 	.word	0x08000b90
 8000ad8:	08000901 	.word	0x08000901

08000adc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000adc:	480d      	ldr	r0, [pc, #52]	; (8000b14 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ade:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000ae0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ae4:	480c      	ldr	r0, [pc, #48]	; (8000b18 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ae6:	490d      	ldr	r1, [pc, #52]	; (8000b1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ae8:	4a0d      	ldr	r2, [pc, #52]	; (8000b20 <LoopForever+0xe>)
  movs r3, #0
 8000aea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aec:	e002      	b.n	8000af4 <LoopCopyDataInit>

08000aee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000af0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000af2:	3304      	adds	r3, #4

08000af4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000af4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000af6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000af8:	d3f9      	bcc.n	8000aee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000afa:	4a0a      	ldr	r2, [pc, #40]	; (8000b24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000afc:	4c0a      	ldr	r4, [pc, #40]	; (8000b28 <LoopForever+0x16>)
  movs r3, #0
 8000afe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b00:	e001      	b.n	8000b06 <LoopFillZerobss>

08000b02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b04:	3204      	adds	r2, #4

08000b06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b08:	d3fb      	bcc.n	8000b02 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b0a:	f000 f811 	bl	8000b30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b0e:	f7ff ffc5 	bl	8000a9c <main>

08000b12 <LoopForever>:

LoopForever:
    b LoopForever
 8000b12:	e7fe      	b.n	8000b12 <LoopForever>
  ldr   r0, =_estack
 8000b14:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000b18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b1c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000b20:	08000ba4 	.word	0x08000ba4
  ldr r2, =_sbss
 8000b24:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000b28:	20000074 	.word	0x20000074

08000b2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b2c:	e7fe      	b.n	8000b2c <ADC1_2_IRQHandler>
	...

08000b30 <__libc_init_array>:
 8000b30:	b570      	push	{r4, r5, r6, lr}
 8000b32:	2500      	movs	r5, #0
 8000b34:	4e0c      	ldr	r6, [pc, #48]	; (8000b68 <__libc_init_array+0x38>)
 8000b36:	4c0d      	ldr	r4, [pc, #52]	; (8000b6c <__libc_init_array+0x3c>)
 8000b38:	1ba4      	subs	r4, r4, r6
 8000b3a:	10a4      	asrs	r4, r4, #2
 8000b3c:	42a5      	cmp	r5, r4
 8000b3e:	d109      	bne.n	8000b54 <__libc_init_array+0x24>
 8000b40:	f000 f81a 	bl	8000b78 <_init>
 8000b44:	2500      	movs	r5, #0
 8000b46:	4e0a      	ldr	r6, [pc, #40]	; (8000b70 <__libc_init_array+0x40>)
 8000b48:	4c0a      	ldr	r4, [pc, #40]	; (8000b74 <__libc_init_array+0x44>)
 8000b4a:	1ba4      	subs	r4, r4, r6
 8000b4c:	10a4      	asrs	r4, r4, #2
 8000b4e:	42a5      	cmp	r5, r4
 8000b50:	d105      	bne.n	8000b5e <__libc_init_array+0x2e>
 8000b52:	bd70      	pop	{r4, r5, r6, pc}
 8000b54:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000b58:	4798      	blx	r3
 8000b5a:	3501      	adds	r5, #1
 8000b5c:	e7ee      	b.n	8000b3c <__libc_init_array+0xc>
 8000b5e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000b62:	4798      	blx	r3
 8000b64:	3501      	adds	r5, #1
 8000b66:	e7f2      	b.n	8000b4e <__libc_init_array+0x1e>
 8000b68:	08000b9c 	.word	0x08000b9c
 8000b6c:	08000b9c 	.word	0x08000b9c
 8000b70:	08000b9c 	.word	0x08000b9c
 8000b74:	08000ba0 	.word	0x08000ba0

08000b78 <_init>:
 8000b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b7a:	bf00      	nop
 8000b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b7e:	bc08      	pop	{r3}
 8000b80:	469e      	mov	lr, r3
 8000b82:	4770      	bx	lr

08000b84 <_fini>:
 8000b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b86:	bf00      	nop
 8000b88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b8a:	bc08      	pop	{r3}
 8000b8c:	469e      	mov	lr, r3
 8000b8e:	4770      	bx	lr
